
lab71.elf:     file format elf32-littlenios2
lab71.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0c000230

Program Header:
    LOAD off    0x00001000 vaddr 0x0c000000 paddr 0x0c000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x0c000020 paddr 0x0c000020 align 2**12
         filesz 0x0001050c memsz 0x0001050c flags r-x
    LOAD off    0x0001152c vaddr 0x0c01052c paddr 0x0c012020 align 2**12
         filesz 0x00001af4 memsz 0x00001af4 flags rw-
    LOAD off    0x00013b14 vaddr 0x0c013b14 paddr 0x0c013b14 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  0c000000  0c000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  0c000020  0c000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000fee4  0c000230  0c000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000418  0c010114  0c010114  00011114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001af4  0c01052c  0c012020  0001152c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  0c013b14  0c013b14  00013b14  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00013020  2**0
                  CONTENTS
  7 .sdram        00000000  0c013c74  0c013c74  00013020  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00013020  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000ef0  00000000  00000000  00013048  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00022eec  00000000  00000000  00013f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00008faf  00000000  00000000  00036e24  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b4f7  00000000  00000000  0003fdd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000214c  00000000  00000000  0004b2cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000039ab  00000000  00000000  0004d418  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00017755  00000000  00000000  00050dc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  00068518  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000018a0  00000000  00000000  00068558  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0006cfe6  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0006cfe9  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0006cff5  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0006cff6  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0006cff7  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0006cffb  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0006cfff  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0006d003  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0006d00e  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0006d019  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000009  00000000  00000000  0006d024  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000003b  00000000  00000000  0006d02d  2**0
                  CONTENTS, READONLY
 30 .jdi          00005019  00000000  00000000  0006d068  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0008a4e9  00000000  00000000  00072081  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
0c000000 l    d  .entry	00000000 .entry
0c000020 l    d  .exceptions	00000000 .exceptions
0c000230 l    d  .text	00000000 .text
0c010114 l    d  .rodata	00000000 .rodata
0c01052c l    d  .rwdata	00000000 .rwdata
0c013b14 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
0c013c74 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lab71_bsp//obj/HAL/src/crt0.o
0c000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
0c011fd8 l     O .rwdata	00000004 vga_ctrl
00000000 l    df *ABS*	00000000 text_mode_vga.c
0c011fdc l     O .rwdata	00000004 vga_ctrl
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
0c010272 l     O .rodata	00000010 zeroes.4404
0c002e50 l     F .text	000000bc __sbprintf
0c010282 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0c003060 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0c004bb8 l     F .text	00000008 __fp_unlock
0c004bcc l     F .text	0000019c __sinit.part.1
0c004d68 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0c01052c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
0c010970 l     O .rwdata	00000020 lc_ctype_charset
0c010950 l     O .rwdata	00000020 lc_message_charset
0c010990 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0c0102b4 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0c007604 l     F .text	000000fc __sprint_r.part.0
0c0103d8 l     O .rodata	00000010 zeroes.4349
0c008c40 l     F .text	000000bc __sbprintf
0c0103e8 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0c00d7e8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0c00d8fc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0c00d928 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0c00da1c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0c00db04 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0c00dbf0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0c00ddcc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0c012010 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0c00e070 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0c00e1ac l     F .text	00000034 alt_dev_reg
0c010f78 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0c00e4a0 l     F .text	0000020c altera_avalon_jtag_uart_irq
0c00e6ac l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0c00ece4 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0c00f07c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0c00f4dc l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0c00f63c l     F .text	0000003c alt_get_errno
0c00f678 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0c013b48 g     O .bss	00000004 alt_instruction_exception_handler
0c007114 g     F .text	00000074 _mprec_log10
0c007200 g     F .text	0000008c __any_on
0c0096bc g     F .text	00000054 _isatty_r
0c0102c0 g     O .rodata	00000028 __mprec_tinytens
0c00dd08 g     F .text	0000007c alt_main
0c0002dc g     F .text	00000050 textVGAClr
0c013b74 g     O .bss	00000100 alt_irq
0c009710 g     F .text	00000060 _lseek_r
0c012020 g       *ABS*	00000000 __flash_rwdata_start
0c00c1c0 g     F .text	00000088 .hidden __eqdf2
0c013c74 g       *ABS*	00000000 __alt_heap_start
0c000b1c g     F .text	0000003c printf
0c009fe8 g     F .text	0000009c _wcrtomb_r
0c00032c g     F .text	00000650 textVGATest
0c00742c g     F .text	0000005c __sseek
0c004f18 g     F .text	00000010 __sinit
0c009e90 g     F .text	00000140 __swbuf_r
0c005524 g     F .text	0000007c _setlocale_r
0c004d70 g     F .text	00000078 __sfmoreglue
0c00dda8 g     F .text	00000024 __malloc_unlock
0c009770 g     F .text	0000015c memmove
0c004f00 g     F .text	00000018 _cleanup
0c0061d4 g     F .text	000000a8 _Balloc
0c00c248 g     F .text	000000dc .hidden __gtdf2
0c00fa64 g     F .text	00000024 altera_nios2_gen2_irq_init
0c000000 g     F .entry	0000000c __reset
0c000020 g       *ABS*	00000000 __flash_exceptions_start
0c009198 g     F .text	0000005c _fstat_r
0c013b2c g     O .bss	00000004 errno
0c0073a8 g     F .text	00000008 __seofread
0c013b34 g     O .bss	00000004 alt_argv
0c019fd8 g       *ABS*	00000000 _gp
0c00e040 g     F .text	00000030 usleep
0c010df8 g     O .rwdata	00000180 alt_fd_list
0c00fa88 g     F .text	00000090 alt_find_dev
0c0009a4 g     F .text	00000148 memcpy
0c004bc0 g     F .text	0000000c _cleanup_r
0c00d600 g     F .text	000000dc .hidden __floatsidf
0c00f5c0 g     F .text	0000007c alt_io_redirect
0c00c324 g     F .text	000000f4 .hidden __ltdf2
0c010114 g       *ABS*	00000000 __DTOR_END__
0c00fce4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0c00728c g     F .text	00000074 __fpclassifyd
0c007070 g     F .text	000000a4 __ratio
0c008c24 g     F .text	0000001c __vfiprintf_internal
0c00e8a4 g     F .text	0000021c altera_avalon_jtag_uart_read
0c000aec g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0c00ae88 g     F .text	00000064 .hidden __udivsi3
0c00da58 g     F .text	000000ac isatty
0c010310 g     O .rodata	000000c8 __mprec_tens
0c0055a0 g     F .text	0000000c __locale_charset
0c013b28 g     O .bss	00000004 __malloc_top_pad
0c011fe8 g     O .rwdata	00000004 __mb_cur_max
0c0055d0 g     F .text	0000000c _localeconv_r
0c0091f4 g     F .text	000004c8 __sfvwrite_r
0c006608 g     F .text	0000003c __i2b
0c007300 g     F .text	00000054 _sbrk_r
0c0098cc g     F .text	00000060 _read_r
0c012008 g     O .rwdata	00000004 alt_max_fd
0c008e8c g     F .text	000000f0 _fclose_r
0c004b88 g     F .text	00000030 fflush
0c013b24 g     O .bss	00000004 __malloc_max_sbrked_mem
0c00af44 g     F .text	000008ac .hidden __adddf3
0c006e18 g     F .text	0000010c __b2d
0c00a7cc g     F .text	000005c4 .hidden __umoddi3
0c00dc2c g     F .text	000000dc lseek
0c011fe0 g     O .rwdata	00000004 _global_impure_ptr
0c00992c g     F .text	00000564 _realloc_r
0c013c74 g       *ABS*	00000000 __bss_end
0c00f3ec g     F .text	000000f0 alt_iic_isr_register
0c00f95c g     F .text	00000108 alt_tick
0c00a1d0 g     F .text	000005fc .hidden __udivdi3
0c0090f4 g     F .text	00000024 _fputwc_r
0c0102e8 g     O .rodata	00000028 __mprec_bigtens
0c0063ec g     F .text	00000104 __s2b
0c00d6dc g     F .text	000000a8 .hidden __floatunsidf
0c006b58 g     F .text	00000060 __mcmp
0c004f38 g     F .text	00000018 __fp_lock_all
0c00f3a0 g     F .text	0000004c alt_ic_irq_enabled
0c00f8c0 g     F .text	0000009c alt_alarm_stop
0c013b3c g     O .bss	00000004 alt_irq_active
0c0000fc g     F .exceptions	000000d4 alt_irq_handler
0c010dd0 g     O .rwdata	00000028 alt_dev_null
0c00f05c g     F .text	00000020 alt_dcache_flush_all
0c0064f0 g     F .text	00000068 __hi0bits
0c00d580 g     F .text	00000080 .hidden __fixdfsi
0c012020 g       *ABS*	00000000 __ram_rwdata_end
0c012000 g     O .rwdata	00000008 alt_dev_list
0c00e0ac g     F .text	00000100 write
0c01052c g       *ABS*	00000000 __ram_rodata_end
0c00d964 g     F .text	000000b8 fstat
0c00c324 g     F .text	000000f4 .hidden __ledf2
0c0068d0 g     F .text	00000140 __pow5mult
0c007718 g     F .text	0000150c ___vfiprintf_internal_r
0c013b1c g     O .bss	00000004 __nlocale_changed
0c00aeec g     F .text	00000058 .hidden __umodsi3
0c013c74 g       *ABS*	00000000 end
0c00e3e0 g     F .text	000000c0 altera_avalon_jtag_uart_init
0c0001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0c010114 g       *ABS*	00000000 __CTOR_LIST__
10000000 g       *ABS*	00000000 __alt_stack_pointer
0c00ed5c g     F .text	0000007c alt_avalon_timer_sc_init
0c00d784 g     F .text	00000064 .hidden __clzsi2
0c00eac0 g     F .text	00000224 altera_avalon_jtag_uart_write
0c004f28 g     F .text	00000004 __sfp_lock_acquire
0c005fc8 g     F .text	000000e4 memchr
0c000b58 g     F .text	000022dc ___vfprintf_internal_r
0c00508c g     F .text	00000310 _free_r
0c0055ac g     F .text	00000010 __locale_mb_cur_max
0c00ff60 g     F .text	00000180 __call_exitprocs
0c013b18 g     O .bss	00000004 __mlocale_changed
0c011fec g     O .rwdata	00000004 __malloc_sbrk_base
0c000230 g     F .text	0000003c _start
0c013b40 g     O .bss	00000004 _alt_tick_rate
0c006a10 g     F .text	00000148 __lshift
0c013b44 g     O .bss	00000004 _alt_nticks
0c00de08 g     F .text	00000104 read
0c00e218 g     F .text	00000064 alt_sys_init
0c00fe48 g     F .text	00000118 __register_exitproc
0c006644 g     F .text	0000028c __multiply
0c00e74c g     F .text	00000068 altera_avalon_jtag_uart_close
0c00097c g     F .text	00000028 .hidden __mulsi3
0c01052c g       *ABS*	00000000 __ram_rwdata_start
0c010114 g       *ABS*	00000000 __ram_rodata_start
0c013b4c g     O .bss	00000028 __malloc_current_mallinfo
0c006f24 g     F .text	0000014c __d2b
0c00e27c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0c00fc20 g     F .text	000000c4 alt_get_fd
0c00ef04 g     F .text	00000158 alt_busy_sleep
0c008d5c g     F .text	00000054 _close_r
0c00fdcc g     F .text	0000007c memcmp
0c00e33c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0c013c74 g       *ABS*	00000000 __alt_stack_base
0c00e38c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0c002f0c g     F .text	00000154 __swsetup_r
0c00b7f0 g     F .text	000009d0 .hidden __divdf3
0c004de8 g     F .text	00000118 __sfp
0c007188 g     F .text	00000078 __copybits
0c0109c8 g     O .rwdata	00000408 __malloc_av_
0c004f34 g     F .text	00000004 __sinit_lock_release
0c00c418 g     F .text	0000086c .hidden __muldf3
0c007354 g     F .text	00000054 __sread
0c00fb18 g     F .text	00000108 alt_find_file
0c00f0b8 g     F .text	000000a4 alt_dev_llist_insert
0c00dd84 g     F .text	00000024 __malloc_lock
0c00df90 g     F .text	000000b0 sbrk
0c004b2c g     F .text	0000005c _fflush_r
0c008db0 g     F .text	000000dc _calloc_r
0c013b14 g       *ABS*	00000000 __bss_start
0c0060ac g     F .text	00000128 memset
0c00026c g     F .text	0000002c main
0c013b38 g     O .bss	00000004 alt_envp
0c013b20 g     O .bss	00000004 __malloc_max_total_mem
0c00e2dc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0c009fd0 g     F .text	00000018 __swbuf
0c007488 g     F .text	00000008 __sclose
10000000 g       *ABS*	00000000 __alt_heap_limit
0c008f7c g     F .text	00000014 fclose
0c003288 g     F .text	00001688 _dtoa_r
0c0057bc g     F .text	0000080c _malloc_r
0c00a144 g     F .text	00000030 __ascii_wctomb
0c01200c g     O .rwdata	00000004 alt_errno
0c00539c g     F .text	000000c4 _fwalk
0c00ad90 g     F .text	00000084 .hidden __divsi3
0c004f68 g     F .text	00000124 _malloc_trim_r
0c010114 g       *ABS*	00000000 __CTOR_END__
0c007490 g     F .text	000000dc strcmp
0c010114 g       *ABS*	00000000 __flash_rodata_start
0c010114 g       *ABS*	00000000 __DTOR_LIST__
0c00c1c0 g     F .text	00000088 .hidden __nedf2
0c00e1e0 g     F .text	00000038 alt_irq_init
0c00df0c g     F .text	00000084 alt_release_fd
0c0103f8 g     O .rodata	00000100 .hidden __clz_tab
0c013b14 g     O .bss	00000004 _PathLocale
0c00fd80 g     F .text	00000014 atexit
0c008cfc g     F .text	00000060 _write_r
0c0055dc g     F .text	00000018 setlocale
0c000298 g     F .text	00000044 textVGASetColor
0c011fe4 g     O .rwdata	00000004 _impure_ptr
0c013b30 g     O .bss	00000004 alt_argc
0c004910 g     F .text	0000021c __sflush_r
0c00f1bc g     F .text	00000060 _do_dtors
0c0055c8 g     F .text	00000008 __locale_cjk_lang
0c000020 g       .exceptions	00000000 alt_irq_entry
0c006db4 g     F .text	00000064 __ulp
0c004f50 g     F .text	00000018 __fp_unlock_all
0c011ff8 g     O .rwdata	00000008 alt_fs_list
0c000020 g       *ABS*	00000000 __ram_exceptions_start
0c0055f4 g     F .text	0000000c localeconv
0c00f23c g     F .text	00000050 alt_ic_isr_register
0c012020 g       *ABS*	00000000 _edata
0c013c74 g       *ABS*	00000000 _end
0c008f90 g     F .text	00000164 __fputwc
0c000230 g       *ABS*	00000000 __ram_exceptions_end
0c00e7b4 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0c00f314 g     F .text	0000008c alt_ic_irq_disable
0c0073b0 g     F .text	0000007c __swrite
0c011ff0 g     O .rwdata	00000004 __malloc_trim_threshold
0c0055bc g     F .text	0000000c __locale_msgcharset
0c00fd94 g     F .text	00000038 exit
0c005460 g     F .text	000000c4 _fwalk_reent
0c006bb8 g     F .text	000001fc __mdiff
0c00ae14 g     F .text	00000074 .hidden __modsi3
10000000 g       *ABS*	00000000 __alt_data_end
0c000020 g     F .exceptions	00000000 alt_exception
0c004f2c g     F .text	00000004 __sfp_lock_release
0c000000 g       *ABS*	00000000 __alt_mem_sdram
0c0100e0 g     F .text	00000034 _exit
0c00edd8 g     F .text	0000012c alt_alarm_start
0c005600 g     F .text	000001bc __smakebuf_r
0c00756c g     F .text	00000098 strlen
0c00f764 g     F .text	0000015c open
0c00c248 g     F .text	000000dc .hidden __gedf2
0c011ff4 g     O .rwdata	00000004 __wctomb
0c007700 g     F .text	00000018 __sprint_r
0c00f21c g     F .text	00000020 alt_icache_flush_all
0c012014 g     O .rwdata	00000004 alt_priority_mask
0c00f28c g     F .text	00000088 alt_ic_irq_enable
0c002e34 g     F .text	0000001c __vfprintf_internal
0c00a174 g     F .text	0000005c _wctomb_r
0c00cc84 g     F .text	000008fc .hidden __subdf3
0c006558 g     F .text	000000b0 __lo0bits
0c012018 g     O .rwdata	00000008 alt_alarm_list
0c00f15c g     F .text	00000060 _do_ctors
0c00a084 g     F .text	000000c0 wcrtomb
0c00d824 g     F .text	000000d8 close
0c00db6c g     F .text	00000084 alt_load
0c009118 g     F .text	00000080 fputwc
0c004f30 g     F .text	00000004 __sinit_lock_acquire
0c0062a4 g     F .text	00000148 __multadd
0c00627c g     F .text	00000028 _Bfree



Disassembly of section .entry:

0c000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 c000000:	00430034 	movhi	at,3072
    ori r1, r1, %lo(_start)
 c000004:	08408c14 	ori	at,at,560
    jmp r1
 c000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

0c000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 c000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 c000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 c000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 c00002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 c000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 c000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 c000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 c00003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 c000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 c000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 c000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 c00004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 c000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 c000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 c000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 c00005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 c000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 c000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 c000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 c00006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 c000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 c000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 c000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 c00007c:	10000326 	beq	r2,zero,c00008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 c000080:	20000226 	beq	r4,zero,c00008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 c000084:	c0000fc0 	call	c0000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 c000088:	00000706 	br	c0000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 c00008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 c000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 c000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 c000098:	c0001d00 	call	c0001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 c00009c:	1000021e 	bne	r2,zero,c0000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 c0000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 c0000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 c0000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 c0000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 c0000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 c0000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 c0000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 c0000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 c0000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 c0000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 c0000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 c0000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 c0000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 c0000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 c0000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 c0000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 c0000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 c0000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 c0000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 c0000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 c0000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 c0000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 c0000f8:	ef80083a 	eret

0c0000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 c0000fc:	defff904 	addi	sp,sp,-28
 c000100:	dfc00615 	stw	ra,24(sp)
 c000104:	df000515 	stw	fp,20(sp)
 c000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 c00010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 c000110:	0005313a 	rdctl	r2,ipending
 c000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 c000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 c00011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 c000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 c000124:	00800044 	movi	r2,1
 c000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 c00012c:	e0fffb17 	ldw	r3,-20(fp)
 c000130:	e0bffc17 	ldw	r2,-16(fp)
 c000134:	1884703a 	and	r2,r3,r2
 c000138:	10001426 	beq	r2,zero,c00018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 c00013c:	00830074 	movhi	r2,3073
 c000140:	108edd04 	addi	r2,r2,15220
 c000144:	e0fffd17 	ldw	r3,-12(fp)
 c000148:	180690fa 	slli	r3,r3,3
 c00014c:	10c5883a 	add	r2,r2,r3
 c000150:	10c00017 	ldw	r3,0(r2)
 c000154:	00830074 	movhi	r2,3073
 c000158:	108edd04 	addi	r2,r2,15220
 c00015c:	e13ffd17 	ldw	r4,-12(fp)
 c000160:	200890fa 	slli	r4,r4,3
 c000164:	1105883a 	add	r2,r2,r4
 c000168:	10800104 	addi	r2,r2,4
 c00016c:	10800017 	ldw	r2,0(r2)
 c000170:	1009883a 	mov	r4,r2
 c000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 c000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 c00017c:	0005313a 	rdctl	r2,ipending
 c000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 c000184:	e0bfff17 	ldw	r2,-4(fp)
 c000188:	00000706 	br	c0001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 c00018c:	e0bffc17 	ldw	r2,-16(fp)
 c000190:	1085883a 	add	r2,r2,r2
 c000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 c000198:	e0bffd17 	ldw	r2,-12(fp)
 c00019c:	10800044 	addi	r2,r2,1
 c0001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 c0001a4:	003fe106 	br	c00012c <__alt_data_end+0xfc00012c>

    active = alt_irq_pending ();
 c0001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 c0001ac:	e0bffb17 	ldw	r2,-20(fp)
 c0001b0:	103fdb1e 	bne	r2,zero,c000120 <__alt_data_end+0xfc000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 c0001b4:	0001883a 	nop
}
 c0001b8:	0001883a 	nop
 c0001bc:	e037883a 	mov	sp,fp
 c0001c0:	dfc00117 	ldw	ra,4(sp)
 c0001c4:	df000017 	ldw	fp,0(sp)
 c0001c8:	dec00204 	addi	sp,sp,8
 c0001cc:	f800283a 	ret

0c0001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 c0001d0:	defffb04 	addi	sp,sp,-20
 c0001d4:	dfc00415 	stw	ra,16(sp)
 c0001d8:	df000315 	stw	fp,12(sp)
 c0001dc:	df000304 	addi	fp,sp,12
 c0001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 c0001e4:	00bfffc4 	movi	r2,-1
 c0001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 c0001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 c0001f0:	d0a6dc17 	ldw	r2,-25744(gp)
 c0001f4:	10000726 	beq	r2,zero,c000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 c0001f8:	d0a6dc17 	ldw	r2,-25744(gp)
 c0001fc:	e0fffd17 	ldw	r3,-12(fp)
 c000200:	e1bffe17 	ldw	r6,-8(fp)
 c000204:	e17fff17 	ldw	r5,-4(fp)
 c000208:	1809883a 	mov	r4,r3
 c00020c:	103ee83a 	callr	r2
 c000210:	00000206 	br	c00021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 c000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 c000218:	0005883a 	mov	r2,zero
}
 c00021c:	e037883a 	mov	sp,fp
 c000220:	dfc00117 	ldw	ra,4(sp)
 c000224:	df000017 	ldw	fp,0(sp)
 c000228:	dec00204 	addi	sp,sp,8
 c00022c:	f800283a 	ret

Disassembly of section .text:

0c000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 c000230:	06c40034 	movhi	sp,4096
    ori sp, sp, %lo(__alt_stack_pointer)
 c000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 c000238:	06830074 	movhi	gp,3073
    ori gp, gp, %lo(_gp)
 c00023c:	d6a7f614 	ori	gp,gp,40920
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 c000240:	00830074 	movhi	r2,3073
    ori r2, r2, %lo(__bss_start)
 c000244:	108ec514 	ori	r2,r2,15124

    movhi r3, %hi(__bss_end)
 c000248:	00c30074 	movhi	r3,3073
    ori r3, r3, %lo(__bss_end)
 c00024c:	18cf1d14 	ori	r3,r3,15476

    beq r2, r3, 1f
 c000250:	10c00326 	beq	r2,r3,c000260 <_start+0x30>

0:
    stw zero, (r2)
 c000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 c000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 c00025c:	10fffd36 	bltu	r2,r3,c000254 <__alt_data_end+0xfc000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 c000260:	c00db6c0 	call	c00db6c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 c000264:	c00dd080 	call	c00dd08 <alt_main>

0c000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 c000268:	003fff06 	br	c000268 <__alt_data_end+0xfc000268>

0c00026c <main>:
#include <stdlib.h>
#include <string.h>
#include <alt_types.h>
#include "text_mode_vga.h"

int main(){
 c00026c:	defffe04 	addi	sp,sp,-8
 c000270:	dfc00115 	stw	ra,4(sp)
 c000274:	df000015 	stw	fp,0(sp)
 c000278:	d839883a 	mov	fp,sp
	textVGATest();
 c00027c:	c00032c0 	call	c00032c <textVGATest>
 c000280:	0005883a 	mov	r2,zero
}
 c000284:	e037883a 	mov	sp,fp
 c000288:	dfc00117 	ldw	ra,4(sp)
 c00028c:	df000017 	ldw	fp,0(sp)
 c000290:	dec00204 	addi	sp,sp,8
 c000294:	f800283a 	ret

0c000298 <textVGASetColor>:
#include <alt_types.h>
#include "text_mode_vga.h"


void textVGASetColor(int background, int foreground)
{
 c000298:	defffd04 	addi	sp,sp,-12
 c00029c:	df000215 	stw	fp,8(sp)
 c0002a0:	df000204 	addi	fp,sp,8
 c0002a4:	e13ffe15 	stw	r4,-8(fp)
 c0002a8:	e17fff15 	stw	r5,-4(fp)
	vga_ctrl->CTRL = foreground << 13 |
 c0002ac:	d0e00117 	ldw	r3,-32764(gp)
 c0002b0:	e0bfff17 	ldw	r2,-4(fp)
 c0002b4:	1008937a 	slli	r4,r2,13
					 background << 1;
 c0002b8:	e0bffe17 	ldw	r2,-8(fp)
 c0002bc:	1085883a 	add	r2,r2,r2
#include "text_mode_vga.h"


void textVGASetColor(int background, int foreground)
{
	vga_ctrl->CTRL = foreground << 13 |
 c0002c0:	2084b03a 	or	r2,r4,r2
 c0002c4:	18825815 	stw	r2,2400(r3)
					 background << 1;
}
 c0002c8:	0001883a 	nop
 c0002cc:	e037883a 	mov	sp,fp
 c0002d0:	df000017 	ldw	fp,0(sp)
 c0002d4:	dec00104 	addi	sp,sp,4
 c0002d8:	f800283a 	ret

0c0002dc <textVGAClr>:

void textVGAClr()
{
 c0002dc:	defffe04 	addi	sp,sp,-8
 c0002e0:	df000115 	stw	fp,4(sp)
 c0002e4:	df000104 	addi	fp,sp,4
	for (int i = 0; i<(ROWS*COLUMNS); i++)
 c0002e8:	e03fff15 	stw	zero,-4(fp)
 c0002ec:	00000706 	br	c00030c <textVGAClr+0x30>
	{
		vga_ctrl->VRAM[i] = 0x00;
 c0002f0:	d0e00117 	ldw	r3,-32764(gp)
 c0002f4:	e0bfff17 	ldw	r2,-4(fp)
 c0002f8:	1885883a 	add	r2,r3,r2
 c0002fc:	10000005 	stb	zero,0(r2)
					 background << 1;
}

void textVGAClr()
{
	for (int i = 0; i<(ROWS*COLUMNS); i++)
 c000300:	e0bfff17 	ldw	r2,-4(fp)
 c000304:	10800044 	addi	r2,r2,1
 c000308:	e0bfff15 	stw	r2,-4(fp)
 c00030c:	e0bfff17 	ldw	r2,-4(fp)
 c000310:	10825810 	cmplti	r2,r2,2400
 c000314:	103ff61e 	bne	r2,zero,c0002f0 <__alt_data_end+0xfc0002f0>
	{
		vga_ctrl->VRAM[i] = 0x00;
	}
}
 c000318:	0001883a 	nop
 c00031c:	e037883a 	mov	sp,fp
 c000320:	df000017 	ldw	fp,0(sp)
 c000324:	dec00104 	addi	sp,sp,4
 c000328:	f800283a 	ret

0c00032c <textVGATest>:

void textVGATest()
{
 c00032c:	deff8904 	addi	sp,sp,-476
 c000330:	dfc07615 	stw	ra,472(sp)
 c000334:	df007515 	stw	fp,468(sp)
 c000338:	dc007415 	stw	r16,464(sp)
 c00033c:	df007504 	addi	fp,sp,468
	textVGASetColor(BLACK, WHITE);
 c000340:	0143ffc4 	movi	r5,4095
 c000344:	0009883a 	mov	r4,zero
 c000348:	c0002980 	call	c000298 <textVGASetColor>
	textVGAClr();
 c00034c:	c0002dc0 	call	c0002dc <textVGAClr>

	//Register write and readback test
	alt_u32 checksum[ROWS], readsum[ROWS];

	for (int j = 0; j < ROWS; j++)
 c000350:	e03f8b15 	stw	zero,-468(fp)
 c000354:	00003106 	br	c00041c <textVGATest+0xf0>
	{
		checksum[j] = 0;
 c000358:	e0bf8b17 	ldw	r2,-468(fp)
 c00035c:	1085883a 	add	r2,r2,r2
 c000360:	1085883a 	add	r2,r2,r2
 c000364:	e0ff8b04 	addi	r3,fp,-468
 c000368:	1885883a 	add	r2,r3,r2
 c00036c:	10800904 	addi	r2,r2,36
 c000370:	10000015 	stw	zero,0(r2)
		for (int i = 0; i < COLUMNS; i++)
 c000374:	e03f8c15 	stw	zero,-464(fp)
 c000378:	00002206 	br	c000404 <textVGATest+0xd8>
		{
			vga_ctrl->VRAM[j*COLUMNS + i] = i + j;
 c00037c:	d4200117 	ldw	r16,-32764(gp)
 c000380:	01401404 	movi	r5,80
 c000384:	e13f8b17 	ldw	r4,-468(fp)
 c000388:	c00097c0 	call	c00097c <__mulsi3>
 c00038c:	1007883a 	mov	r3,r2
 c000390:	e0bf8c17 	ldw	r2,-464(fp)
 c000394:	1885883a 	add	r2,r3,r2
 c000398:	e0ff8c17 	ldw	r3,-464(fp)
 c00039c:	1809883a 	mov	r4,r3
 c0003a0:	e0ff8b17 	ldw	r3,-468(fp)
 c0003a4:	20c7883a 	add	r3,r4,r3
 c0003a8:	8085883a 	add	r2,r16,r2
 c0003ac:	10c00005 	stb	r3,0(r2)
			checksum[j] += i + j;
 c0003b0:	e0bf8b17 	ldw	r2,-468(fp)
 c0003b4:	1085883a 	add	r2,r2,r2
 c0003b8:	1085883a 	add	r2,r2,r2
 c0003bc:	e13f8b04 	addi	r4,fp,-468
 c0003c0:	2085883a 	add	r2,r4,r2
 c0003c4:	10800904 	addi	r2,r2,36
 c0003c8:	10800017 	ldw	r2,0(r2)
 c0003cc:	e13f8c17 	ldw	r4,-464(fp)
 c0003d0:	e0ff8b17 	ldw	r3,-468(fp)
 c0003d4:	20c7883a 	add	r3,r4,r3
 c0003d8:	10c7883a 	add	r3,r2,r3
 c0003dc:	e0bf8b17 	ldw	r2,-468(fp)
 c0003e0:	1085883a 	add	r2,r2,r2
 c0003e4:	1085883a 	add	r2,r2,r2
 c0003e8:	e13f8b04 	addi	r4,fp,-468
 c0003ec:	2085883a 	add	r2,r4,r2
 c0003f0:	10800904 	addi	r2,r2,36
 c0003f4:	10c00015 	stw	r3,0(r2)
	alt_u32 checksum[ROWS], readsum[ROWS];

	for (int j = 0; j < ROWS; j++)
	{
		checksum[j] = 0;
		for (int i = 0; i < COLUMNS; i++)
 c0003f8:	e0bf8c17 	ldw	r2,-464(fp)
 c0003fc:	10800044 	addi	r2,r2,1
 c000400:	e0bf8c15 	stw	r2,-464(fp)
 c000404:	e0bf8c17 	ldw	r2,-464(fp)
 c000408:	10801410 	cmplti	r2,r2,80
 c00040c:	103fdb1e 	bne	r2,zero,c00037c <__alt_data_end+0xfc00037c>
	textVGAClr();

	//Register write and readback test
	alt_u32 checksum[ROWS], readsum[ROWS];

	for (int j = 0; j < ROWS; j++)
 c000410:	e0bf8b17 	ldw	r2,-468(fp)
 c000414:	10800044 	addi	r2,r2,1
 c000418:	e0bf8b15 	stw	r2,-468(fp)
 c00041c:	e0bf8b17 	ldw	r2,-468(fp)
 c000420:	10800790 	cmplti	r2,r2,30
 c000424:	103fcc1e 	bne	r2,zero,c000358 <__alt_data_end+0xfc000358>
		{
			vga_ctrl->VRAM[j*COLUMNS + i] = i + j;
			checksum[j] += i + j;
		}
	}
	for (int j = 0; j < ROWS; j++)
 c000428:	e03f8d15 	stw	zero,-460(fp)
 c00042c:	00005206 	br	c000578 <textVGATest+0x24c>
	{
		readsum[j] = 0;
 c000430:	e0bf8d17 	ldw	r2,-460(fp)
 c000434:	1085883a 	add	r2,r2,r2
 c000438:	1085883a 	add	r2,r2,r2
 c00043c:	e0ff8b04 	addi	r3,fp,-468
 c000440:	1885883a 	add	r2,r3,r2
 c000444:	10802704 	addi	r2,r2,156
 c000448:	10000015 	stw	zero,0(r2)
		for (int i = 0; i < COLUMNS; i++)
 c00044c:	e03f8e15 	stw	zero,-456(fp)
 c000450:	00001c06 	br	c0004c4 <textVGATest+0x198>
		{
			readsum[j] += vga_ctrl->VRAM[j*COLUMNS + i];
 c000454:	d4200117 	ldw	r16,-32764(gp)
 c000458:	01401404 	movi	r5,80
 c00045c:	e13f8d17 	ldw	r4,-460(fp)
 c000460:	c00097c0 	call	c00097c <__mulsi3>
 c000464:	1007883a 	mov	r3,r2
 c000468:	e0bf8e17 	ldw	r2,-456(fp)
 c00046c:	1885883a 	add	r2,r3,r2
 c000470:	8085883a 	add	r2,r16,r2
 c000474:	11000003 	ldbu	r4,0(r2)
 c000478:	e0bf8d17 	ldw	r2,-460(fp)
 c00047c:	1085883a 	add	r2,r2,r2
 c000480:	1085883a 	add	r2,r2,r2
 c000484:	e0ff8b04 	addi	r3,fp,-468
 c000488:	1885883a 	add	r2,r3,r2
 c00048c:	10802704 	addi	r2,r2,156
 c000490:	10c00017 	ldw	r3,0(r2)
 c000494:	20803fcc 	andi	r2,r4,255
 c000498:	1887883a 	add	r3,r3,r2
 c00049c:	e0bf8d17 	ldw	r2,-460(fp)
 c0004a0:	1085883a 	add	r2,r2,r2
 c0004a4:	1085883a 	add	r2,r2,r2
 c0004a8:	e13f8b04 	addi	r4,fp,-468
 c0004ac:	2085883a 	add	r2,r4,r2
 c0004b0:	10802704 	addi	r2,r2,156
 c0004b4:	10c00015 	stw	r3,0(r2)
		}
	}
	for (int j = 0; j < ROWS; j++)
	{
		readsum[j] = 0;
		for (int i = 0; i < COLUMNS; i++)
 c0004b8:	e0bf8e17 	ldw	r2,-456(fp)
 c0004bc:	10800044 	addi	r2,r2,1
 c0004c0:	e0bf8e15 	stw	r2,-456(fp)
 c0004c4:	e0bf8e17 	ldw	r2,-456(fp)
 c0004c8:	10801410 	cmplti	r2,r2,80
 c0004cc:	103fe11e 	bne	r2,zero,c000454 <__alt_data_end+0xfc000454>
		{
			readsum[j] += vga_ctrl->VRAM[j*COLUMNS + i];
			//printf ("%x \n\r", vga_ctrl->VRAM[j*COLUMNS + i]);
		}
		printf ("Row: %d, Checksum: %x, Read-back Checksum: %x\n\r", j, checksum[j], readsum[j]);
 c0004d0:	e0bf8d17 	ldw	r2,-460(fp)
 c0004d4:	1085883a 	add	r2,r2,r2
 c0004d8:	1085883a 	add	r2,r2,r2
 c0004dc:	e0ff8b04 	addi	r3,fp,-468
 c0004e0:	1885883a 	add	r2,r3,r2
 c0004e4:	10800904 	addi	r2,r2,36
 c0004e8:	10c00017 	ldw	r3,0(r2)
 c0004ec:	e0bf8d17 	ldw	r2,-460(fp)
 c0004f0:	1085883a 	add	r2,r2,r2
 c0004f4:	1085883a 	add	r2,r2,r2
 c0004f8:	e13f8b04 	addi	r4,fp,-468
 c0004fc:	2085883a 	add	r2,r4,r2
 c000500:	10802704 	addi	r2,r2,156
 c000504:	10800017 	ldw	r2,0(r2)
 c000508:	100f883a 	mov	r7,r2
 c00050c:	180d883a 	mov	r6,r3
 c000510:	e17f8d17 	ldw	r5,-460(fp)
 c000514:	01030074 	movhi	r4,3073
 c000518:	21004504 	addi	r4,r4,276
 c00051c:	c000b1c0 	call	c000b1c <printf>
		if (checksum[j] != readsum[j])
 c000520:	e0bf8d17 	ldw	r2,-460(fp)
 c000524:	1085883a 	add	r2,r2,r2
 c000528:	1085883a 	add	r2,r2,r2
 c00052c:	e0ff8b04 	addi	r3,fp,-468
 c000530:	1885883a 	add	r2,r3,r2
 c000534:	10800904 	addi	r2,r2,36
 c000538:	10c00017 	ldw	r3,0(r2)
 c00053c:	e0bf8d17 	ldw	r2,-460(fp)
 c000540:	1085883a 	add	r2,r2,r2
 c000544:	1085883a 	add	r2,r2,r2
 c000548:	e13f8b04 	addi	r4,fp,-468
 c00054c:	2085883a 	add	r2,r4,r2
 c000550:	10802704 	addi	r2,r2,156
 c000554:	10800017 	ldw	r2,0(r2)
 c000558:	18800426 	beq	r3,r2,c00056c <textVGATest+0x240>
		{
			printf ("Checksum mismatch!, check your Avalon-MM code\n\r");
 c00055c:	01030074 	movhi	r4,3073
 c000560:	21005104 	addi	r4,r4,324
 c000564:	c000b1c0 	call	c000b1c <printf>
			while (1){};
 c000568:	003fff06 	br	c000568 <__alt_data_end+0xfc000568>
		{
			vga_ctrl->VRAM[j*COLUMNS + i] = i + j;
			checksum[j] += i + j;
		}
	}
	for (int j = 0; j < ROWS; j++)
 c00056c:	e0bf8d17 	ldw	r2,-460(fp)
 c000570:	10800044 	addi	r2,r2,1
 c000574:	e0bf8d15 	stw	r2,-460(fp)
 c000578:	e0bf8d17 	ldw	r2,-460(fp)
 c00057c:	10800790 	cmplti	r2,r2,30
 c000580:	103fab1e 	bne	r2,zero,c000430 <__alt_data_end+0xfc000430>
		{
			printf ("Checksum mismatch!, check your Avalon-MM code\n\r");
			while (1){};
		}
	}
	printf ("Checksum code passed!...starting color test \n\r");
 c000584:	01030074 	movhi	r4,3073
 c000588:	21005d04 	addi	r4,r4,372
 c00058c:	c000b1c0 	call	c000b1c <printf>
	usleep (500000);
 c000590:	01000234 	movhi	r4,8
 c000594:	21284804 	addi	r4,r4,-24288
 c000598:	c00e0400 	call	c00e040 <usleep>
	textVGASetColor(DIM_GRN, BRIGHT_GRN);
 c00059c:	01403c04 	movi	r5,240
 c0005a0:	01001c04 	movi	r4,112
 c0005a4:	c0002980 	call	c000298 <textVGASetColor>
	textVGAClr();
 c0005a8:	c0002dc0 	call	c0002dc <textVGAClr>
	char greentest[] = "This text should draw in green";
 c0005ac:	009cda74 	movhi	r2,29545
 c0005b0:	109a1504 	addi	r2,r2,26708
 c0005b4:	e0bfd015 	stw	r2,-192(fp)
 c0005b8:	009e1974 	movhi	r2,30821
 c0005bc:	109d0804 	addi	r2,r2,29728
 c0005c0:	e0bfd115 	stw	r2,-188(fp)
 c0005c4:	009a1cf4 	movhi	r2,26739
 c0005c8:	10881d04 	addi	r2,r2,8308
 c0005cc:	e0bfd215 	stw	r2,-184(fp)
 c0005d0:	00991b34 	movhi	r2,25708
 c0005d4:	109d5bc4 	addi	r2,r2,30063
 c0005d8:	e0bfd315 	stw	r2,-180(fp)
 c0005dc:	00985cb4 	movhi	r2,24946
 c0005e0:	10990804 	addi	r2,r2,25632
 c0005e4:	e0bfd415 	stw	r2,-176(fp)
 c0005e8:	009b9a74 	movhi	r2,28265
 c0005ec:	10881dc4 	addi	r2,r2,8311
 c0005f0:	e0bfd515 	stw	r2,-172(fp)
 c0005f4:	00995cb4 	movhi	r2,25970
 c0005f8:	1099c804 	addi	r2,r2,26400
 c0005fc:	e0bfd615 	stw	r2,-168(fp)
 c000600:	009b9944 	movi	r2,28261
 c000604:	e0bfd70d 	sth	r2,-164(fp)
 c000608:	e03fd785 	stb	zero,-162(fp)
	{
		for (int j = 0; j < ROWS; j++)
 c00060c:	e03f8f15 	stw	zero,-452(fp)
 c000610:	00001006 	br	c000654 <textVGATest+0x328>
		{
			memcpy((void*)&vga_ctrl->VRAM[j*COLUMNS]+j,greentest, sizeof(greentest));
 c000614:	d4200117 	ldw	r16,-32764(gp)
 c000618:	01401404 	movi	r5,80
 c00061c:	e13f8f17 	ldw	r4,-452(fp)
 c000620:	c00097c0 	call	c00097c <__mulsi3>
 c000624:	8087883a 	add	r3,r16,r2
 c000628:	e0bf8f17 	ldw	r2,-452(fp)
 c00062c:	1885883a 	add	r2,r3,r2
 c000630:	1009883a 	mov	r4,r2
 c000634:	e0bfd004 	addi	r2,fp,-192
 c000638:	00c007c4 	movi	r3,31
 c00063c:	180d883a 	mov	r6,r3
 c000640:	100b883a 	mov	r5,r2
 c000644:	c0009a40 	call	c0009a4 <memcpy>
	usleep (500000);
	textVGASetColor(DIM_GRN, BRIGHT_GRN);
	textVGAClr();
	char greentest[] = "This text should draw in green";
	{
		for (int j = 0; j < ROWS; j++)
 c000648:	e0bf8f17 	ldw	r2,-452(fp)
 c00064c:	10800044 	addi	r2,r2,1
 c000650:	e0bf8f15 	stw	r2,-452(fp)
 c000654:	e0bf8f17 	ldw	r2,-452(fp)
 c000658:	10800790 	cmplti	r2,r2,30
 c00065c:	103fed1e 	bne	r2,zero,c000614 <__alt_data_end+0xfc000614>
		{
			memcpy((void*)&vga_ctrl->VRAM[j*COLUMNS]+j,greentest, sizeof(greentest));
		}
	}
	usleep (500000);
 c000660:	01000234 	movhi	r4,8
 c000664:	21284804 	addi	r4,r4,-24288
 c000668:	c00e0400 	call	c00e040 <usleep>
	textVGASetColor(DIM_RED, BRIGHT_RED);
 c00066c:	0143c004 	movi	r5,3840
 c000670:	0101c004 	movi	r4,1792
 c000674:	c0002980 	call	c000298 <textVGASetColor>
	textVGAClr();
 c000678:	c0002dc0 	call	c0002dc <textVGAClr>
	char redtest[] = "This text should draw in red";
 c00067c:	00830074 	movhi	r2,3073
 c000680:	10806b04 	addi	r2,r2,428
 c000684:	e0ffd7c4 	addi	r3,fp,-161
 c000688:	1009883a 	mov	r4,r2
 c00068c:	00800744 	movi	r2,29
 c000690:	100d883a 	mov	r6,r2
 c000694:	200b883a 	mov	r5,r4
 c000698:	1809883a 	mov	r4,r3
 c00069c:	c0009a40 	call	c0009a4 <memcpy>
	{
		for (int j = 0; j < ROWS; j++)
 c0006a0:	e03f9015 	stw	zero,-448(fp)
 c0006a4:	00001206 	br	c0006f0 <textVGATest+0x3c4>
		{
			memcpy((void*)&vga_ctrl->VRAM[j*COLUMNS]+(ROWS-j),redtest, sizeof(redtest));
 c0006a8:	d4200117 	ldw	r16,-32764(gp)
 c0006ac:	01401404 	movi	r5,80
 c0006b0:	e13f9017 	ldw	r4,-448(fp)
 c0006b4:	c00097c0 	call	c00097c <__mulsi3>
 c0006b8:	8085883a 	add	r2,r16,r2
 c0006bc:	01000784 	movi	r4,30
 c0006c0:	e0ff9017 	ldw	r3,-448(fp)
 c0006c4:	20c7c83a 	sub	r3,r4,r3
 c0006c8:	10c5883a 	add	r2,r2,r3
 c0006cc:	1009883a 	mov	r4,r2
 c0006d0:	e0bfd7c4 	addi	r2,fp,-161
 c0006d4:	00c00744 	movi	r3,29
 c0006d8:	180d883a 	mov	r6,r3
 c0006dc:	100b883a 	mov	r5,r2
 c0006e0:	c0009a40 	call	c0009a4 <memcpy>
	usleep (500000);
	textVGASetColor(DIM_RED, BRIGHT_RED);
	textVGAClr();
	char redtest[] = "This text should draw in red";
	{
		for (int j = 0; j < ROWS; j++)
 c0006e4:	e0bf9017 	ldw	r2,-448(fp)
 c0006e8:	10800044 	addi	r2,r2,1
 c0006ec:	e0bf9015 	stw	r2,-448(fp)
 c0006f0:	e0bf9017 	ldw	r2,-448(fp)
 c0006f4:	10800790 	cmplti	r2,r2,30
 c0006f8:	103feb1e 	bne	r2,zero,c0006a8 <__alt_data_end+0xfc0006a8>
		{
			memcpy((void*)&vga_ctrl->VRAM[j*COLUMNS]+(ROWS-j),redtest, sizeof(redtest));
		}
	}
	usleep (500000);
 c0006fc:	01000234 	movhi	r4,8
 c000700:	21284804 	addi	r4,r4,-24288
 c000704:	c00e0400 	call	c00e040 <usleep>
	textVGASetColor(DIM_BLU, BRIGHT_BLU);
 c000708:	014003c4 	movi	r5,15
 c00070c:	010001c4 	movi	r4,7
 c000710:	c0002980 	call	c000298 <textVGASetColor>
	textVGAClr();
 c000714:	c0002dc0 	call	c0002dc <textVGAClr>
	char blutest[] = "This text should draw in blue";
 c000718:	009cda74 	movhi	r2,29545
 c00071c:	109a1504 	addi	r2,r2,26708
 c000720:	e0bfdf15 	stw	r2,-132(fp)
 c000724:	009e1974 	movhi	r2,30821
 c000728:	109d0804 	addi	r2,r2,29728
 c00072c:	e0bfe015 	stw	r2,-128(fp)
 c000730:	009a1cf4 	movhi	r2,26739
 c000734:	10881d04 	addi	r2,r2,8308
 c000738:	e0bfe115 	stw	r2,-124(fp)
 c00073c:	00991b34 	movhi	r2,25708
 c000740:	109d5bc4 	addi	r2,r2,30063
 c000744:	e0bfe215 	stw	r2,-120(fp)
 c000748:	00985cb4 	movhi	r2,24946
 c00074c:	10990804 	addi	r2,r2,25632
 c000750:	e0bfe315 	stw	r2,-116(fp)
 c000754:	009b9a74 	movhi	r2,28265
 c000758:	10881dc4 	addi	r2,r2,8311
 c00075c:	e0bfe415 	stw	r2,-112(fp)
 c000760:	009d5b34 	movhi	r2,30060
 c000764:	10988804 	addi	r2,r2,25120
 c000768:	e0bfe515 	stw	r2,-108(fp)
 c00076c:	00801944 	movi	r2,101
 c000770:	e0bfe60d 	sth	r2,-104(fp)
	{
		for (int j = 0; j < ROWS; j++)
 c000774:	e03f9115 	stw	zero,-444(fp)
 c000778:	00000e06 	br	c0007b4 <textVGATest+0x488>
		{
			memcpy((void*)&vga_ctrl->VRAM[j*COLUMNS],blutest, sizeof(blutest));
 c00077c:	d4200117 	ldw	r16,-32764(gp)
 c000780:	01401404 	movi	r5,80
 c000784:	e13f9117 	ldw	r4,-444(fp)
 c000788:	c00097c0 	call	c00097c <__mulsi3>
 c00078c:	8085883a 	add	r2,r16,r2
 c000790:	1009883a 	mov	r4,r2
 c000794:	e0bfdf04 	addi	r2,fp,-132
 c000798:	00c00784 	movi	r3,30
 c00079c:	180d883a 	mov	r6,r3
 c0007a0:	100b883a 	mov	r5,r2
 c0007a4:	c0009a40 	call	c0009a4 <memcpy>
	usleep (500000);
	textVGASetColor(DIM_BLU, BRIGHT_BLU);
	textVGAClr();
	char blutest[] = "This text should draw in blue";
	{
		for (int j = 0; j < ROWS; j++)
 c0007a8:	e0bf9117 	ldw	r2,-444(fp)
 c0007ac:	10800044 	addi	r2,r2,1
 c0007b0:	e0bf9115 	stw	r2,-444(fp)
 c0007b4:	e0bf9117 	ldw	r2,-444(fp)
 c0007b8:	10800790 	cmplti	r2,r2,30
 c0007bc:	103fef1e 	bne	r2,zero,c00077c <__alt_data_end+0xfc00077c>
		{
			memcpy((void*)&vga_ctrl->VRAM[j*COLUMNS],blutest, sizeof(blutest));
		}
	}
	usleep (500000);
 c0007c0:	01000234 	movhi	r4,8
 c0007c4:	21284804 	addi	r4,r4,-24288
 c0007c8:	c00e0400 	call	c00e040 <usleep>
	textVGAClr();
 c0007cc:	c0002dc0 	call	c0002dc <textVGAClr>
	char inverted[] = "This text should draw inverted";
 c0007d0:	00830074 	movhi	r2,3073
 c0007d4:	10807304 	addi	r2,r2,460
 c0007d8:	e0ffe684 	addi	r3,fp,-102
 c0007dc:	1009883a 	mov	r4,r2
 c0007e0:	008007c4 	movi	r2,31
 c0007e4:	100d883a 	mov	r6,r2
 c0007e8:	200b883a 	mov	r5,r4
 c0007ec:	1809883a 	mov	r4,r3
 c0007f0:	c0009a40 	call	c0009a4 <memcpy>
	for (int i = 0; i < sizeof(inverted); i++)
 c0007f4:	e03f9215 	stw	zero,-440(fp)
 c0007f8:	00000e06 	br	c000834 <textVGATest+0x508>
		inverted[i] |= 0x80;
 c0007fc:	e0ffe684 	addi	r3,fp,-102
 c000800:	e0bf9217 	ldw	r2,-440(fp)
 c000804:	1885883a 	add	r2,r3,r2
 c000808:	10c00003 	ldbu	r3,0(r2)
 c00080c:	00bfe004 	movi	r2,-128
 c000810:	1884b03a 	or	r2,r3,r2
 c000814:	1009883a 	mov	r4,r2
 c000818:	e0ffe684 	addi	r3,fp,-102
 c00081c:	e0bf9217 	ldw	r2,-440(fp)
 c000820:	1885883a 	add	r2,r3,r2
 c000824:	11000005 	stb	r4,0(r2)
		}
	}
	usleep (500000);
	textVGAClr();
	char inverted[] = "This text should draw inverted";
	for (int i = 0; i < sizeof(inverted); i++)
 c000828:	e0bf9217 	ldw	r2,-440(fp)
 c00082c:	10800044 	addi	r2,r2,1
 c000830:	e0bf9215 	stw	r2,-440(fp)
 c000834:	e0bf9217 	ldw	r2,-440(fp)
 c000838:	108007f0 	cmpltui	r2,r2,31
 c00083c:	103fef1e 	bne	r2,zero,c0007fc <__alt_data_end+0xfc0007fc>
		inverted[i] |= 0x80;

	textVGASetColor(DIM_GRN, BRIGHT_GRN);
 c000840:	01403c04 	movi	r5,240
 c000844:	01001c04 	movi	r4,112
 c000848:	c0002980 	call	c000298 <textVGASetColor>
	{
		for (int j = 0; j < ROWS; j++)
 c00084c:	e03f9315 	stw	zero,-436(fp)
 c000850:	00002106 	br	c0008d8 <textVGATest+0x5ac>
		{
			if (j%2==0)
 c000854:	e0bf9317 	ldw	r2,-436(fp)
 c000858:	1080004c 	andi	r2,r2,1
 c00085c:	10000e1e 	bne	r2,zero,c000898 <textVGATest+0x56c>
				memcpy((void*)&vga_ctrl->VRAM[j*COLUMNS]+j,greentest, sizeof(greentest));
 c000860:	d4200117 	ldw	r16,-32764(gp)
 c000864:	01401404 	movi	r5,80
 c000868:	e13f9317 	ldw	r4,-436(fp)
 c00086c:	c00097c0 	call	c00097c <__mulsi3>
 c000870:	8087883a 	add	r3,r16,r2
 c000874:	e0bf9317 	ldw	r2,-436(fp)
 c000878:	1885883a 	add	r2,r3,r2
 c00087c:	1009883a 	mov	r4,r2
 c000880:	e0bfd004 	addi	r2,fp,-192
 c000884:	00c007c4 	movi	r3,31
 c000888:	180d883a 	mov	r6,r3
 c00088c:	100b883a 	mov	r5,r2
 c000890:	c0009a40 	call	c0009a4 <memcpy>
 c000894:	00000d06 	br	c0008cc <textVGATest+0x5a0>
			else
				memcpy((void*)&vga_ctrl->VRAM[j*COLUMNS]+j,inverted, sizeof(inverted));
 c000898:	d4200117 	ldw	r16,-32764(gp)
 c00089c:	01401404 	movi	r5,80
 c0008a0:	e13f9317 	ldw	r4,-436(fp)
 c0008a4:	c00097c0 	call	c00097c <__mulsi3>
 c0008a8:	8087883a 	add	r3,r16,r2
 c0008ac:	e0bf9317 	ldw	r2,-436(fp)
 c0008b0:	1885883a 	add	r2,r3,r2
 c0008b4:	1009883a 	mov	r4,r2
 c0008b8:	e0bfe684 	addi	r2,fp,-102
 c0008bc:	00c007c4 	movi	r3,31
 c0008c0:	180d883a 	mov	r6,r3
 c0008c4:	100b883a 	mov	r5,r2
 c0008c8:	c0009a40 	call	c0009a4 <memcpy>
	for (int i = 0; i < sizeof(inverted); i++)
		inverted[i] |= 0x80;

	textVGASetColor(DIM_GRN, BRIGHT_GRN);
	{
		for (int j = 0; j < ROWS; j++)
 c0008cc:	e0bf9317 	ldw	r2,-436(fp)
 c0008d0:	10800044 	addi	r2,r2,1
 c0008d4:	e0bf9315 	stw	r2,-436(fp)
 c0008d8:	e0bf9317 	ldw	r2,-436(fp)
 c0008dc:	10800790 	cmplti	r2,r2,30
 c0008e0:	103fdc1e 	bne	r2,zero,c000854 <__alt_data_end+0xfc000854>
				memcpy((void*)&vga_ctrl->VRAM[j*COLUMNS]+j,greentest, sizeof(greentest));
			else
				memcpy((void*)&vga_ctrl->VRAM[j*COLUMNS]+j,inverted, sizeof(inverted));
		}
	}
	usleep (500000);
 c0008e4:	01000234 	movhi	r4,8
 c0008e8:	21284804 	addi	r4,r4,-24288
 c0008ec:	c00e0400 	call	c00e040 <usleep>

	textVGASetColor(BLACK, WHITE);
 c0008f0:	0143ffc4 	movi	r5,4095
 c0008f4:	0009883a 	mov	r4,zero
 c0008f8:	c0002980 	call	c000298 <textVGASetColor>
	textVGAClr();
 c0008fc:	c0002dc0 	call	c0002dc <textVGAClr>

	char completed[] = "All visual tests completed, verify on-screen results are correct.";
 c000900:	00830074 	movhi	r2,3073
 c000904:	10807b04 	addi	r2,r2,492
 c000908:	e0ffee44 	addi	r3,fp,-71
 c00090c:	1009883a 	mov	r4,r2
 c000910:	00801084 	movi	r2,66
 c000914:	100d883a 	mov	r6,r2
 c000918:	200b883a 	mov	r5,r4
 c00091c:	1809883a 	mov	r4,r3
 c000920:	c0009a40 	call	c0009a4 <memcpy>
	memcpy((void*)&vga_ctrl->VRAM[0],completed, sizeof(completed));
 c000924:	d0a00117 	ldw	r2,-32764(gp)
 c000928:	1009883a 	mov	r4,r2
 c00092c:	e0bfee44 	addi	r2,fp,-71
 c000930:	00c01084 	movi	r3,66
 c000934:	180d883a 	mov	r6,r3
 c000938:	100b883a 	mov	r5,r2
 c00093c:	c0009a40 	call	c0009a4 <memcpy>
	printf( "%s \n\r", completed);
 c000940:	e0bfee44 	addi	r2,fp,-71
 c000944:	100b883a 	mov	r5,r2
 c000948:	01030074 	movhi	r4,3073
 c00094c:	21006904 	addi	r4,r4,420
 c000950:	c000b1c0 	call	c000b1c <printf>

	usleep (1000000);
 c000954:	010003f4 	movhi	r4,15
 c000958:	21109004 	addi	r4,r4,16960
 c00095c:	c00e0400 	call	c00e040 <usleep>

}
 c000960:	0001883a 	nop
 c000964:	e6ffff04 	addi	sp,fp,-4
 c000968:	dfc00217 	ldw	ra,8(sp)
 c00096c:	df000117 	ldw	fp,4(sp)
 c000970:	dc000017 	ldw	r16,0(sp)
 c000974:	dec00304 	addi	sp,sp,12
 c000978:	f800283a 	ret

0c00097c <__mulsi3>:
 c00097c:	0005883a 	mov	r2,zero
 c000980:	20000726 	beq	r4,zero,c0009a0 <__mulsi3+0x24>
 c000984:	20c0004c 	andi	r3,r4,1
 c000988:	2008d07a 	srli	r4,r4,1
 c00098c:	18000126 	beq	r3,zero,c000994 <__mulsi3+0x18>
 c000990:	1145883a 	add	r2,r2,r5
 c000994:	294b883a 	add	r5,r5,r5
 c000998:	203ffa1e 	bne	r4,zero,c000984 <__alt_data_end+0xfc000984>
 c00099c:	f800283a 	ret
 c0009a0:	f800283a 	ret

0c0009a4 <memcpy>:
 c0009a4:	defffd04 	addi	sp,sp,-12
 c0009a8:	dfc00215 	stw	ra,8(sp)
 c0009ac:	dc400115 	stw	r17,4(sp)
 c0009b0:	dc000015 	stw	r16,0(sp)
 c0009b4:	00c003c4 	movi	r3,15
 c0009b8:	2005883a 	mov	r2,r4
 c0009bc:	1980452e 	bgeu	r3,r6,c000ad4 <memcpy+0x130>
 c0009c0:	2906b03a 	or	r3,r5,r4
 c0009c4:	18c000cc 	andi	r3,r3,3
 c0009c8:	1800441e 	bne	r3,zero,c000adc <memcpy+0x138>
 c0009cc:	347ffc04 	addi	r17,r6,-16
 c0009d0:	8822d13a 	srli	r17,r17,4
 c0009d4:	28c00104 	addi	r3,r5,4
 c0009d8:	23400104 	addi	r13,r4,4
 c0009dc:	8820913a 	slli	r16,r17,4
 c0009e0:	2b000204 	addi	r12,r5,8
 c0009e4:	22c00204 	addi	r11,r4,8
 c0009e8:	84000504 	addi	r16,r16,20
 c0009ec:	2a800304 	addi	r10,r5,12
 c0009f0:	22400304 	addi	r9,r4,12
 c0009f4:	2c21883a 	add	r16,r5,r16
 c0009f8:	2811883a 	mov	r8,r5
 c0009fc:	200f883a 	mov	r7,r4
 c000a00:	41000017 	ldw	r4,0(r8)
 c000a04:	1fc00017 	ldw	ra,0(r3)
 c000a08:	63c00017 	ldw	r15,0(r12)
 c000a0c:	39000015 	stw	r4,0(r7)
 c000a10:	53800017 	ldw	r14,0(r10)
 c000a14:	6fc00015 	stw	ra,0(r13)
 c000a18:	5bc00015 	stw	r15,0(r11)
 c000a1c:	4b800015 	stw	r14,0(r9)
 c000a20:	18c00404 	addi	r3,r3,16
 c000a24:	39c00404 	addi	r7,r7,16
 c000a28:	42000404 	addi	r8,r8,16
 c000a2c:	6b400404 	addi	r13,r13,16
 c000a30:	63000404 	addi	r12,r12,16
 c000a34:	5ac00404 	addi	r11,r11,16
 c000a38:	52800404 	addi	r10,r10,16
 c000a3c:	4a400404 	addi	r9,r9,16
 c000a40:	1c3fef1e 	bne	r3,r16,c000a00 <__alt_data_end+0xfc000a00>
 c000a44:	89c00044 	addi	r7,r17,1
 c000a48:	380e913a 	slli	r7,r7,4
 c000a4c:	310003cc 	andi	r4,r6,15
 c000a50:	02c000c4 	movi	r11,3
 c000a54:	11c7883a 	add	r3,r2,r7
 c000a58:	29cb883a 	add	r5,r5,r7
 c000a5c:	5900212e 	bgeu	r11,r4,c000ae4 <memcpy+0x140>
 c000a60:	1813883a 	mov	r9,r3
 c000a64:	2811883a 	mov	r8,r5
 c000a68:	200f883a 	mov	r7,r4
 c000a6c:	42800017 	ldw	r10,0(r8)
 c000a70:	4a400104 	addi	r9,r9,4
 c000a74:	39ffff04 	addi	r7,r7,-4
 c000a78:	4abfff15 	stw	r10,-4(r9)
 c000a7c:	42000104 	addi	r8,r8,4
 c000a80:	59fffa36 	bltu	r11,r7,c000a6c <__alt_data_end+0xfc000a6c>
 c000a84:	213fff04 	addi	r4,r4,-4
 c000a88:	2008d0ba 	srli	r4,r4,2
 c000a8c:	318000cc 	andi	r6,r6,3
 c000a90:	21000044 	addi	r4,r4,1
 c000a94:	2109883a 	add	r4,r4,r4
 c000a98:	2109883a 	add	r4,r4,r4
 c000a9c:	1907883a 	add	r3,r3,r4
 c000aa0:	290b883a 	add	r5,r5,r4
 c000aa4:	30000626 	beq	r6,zero,c000ac0 <memcpy+0x11c>
 c000aa8:	198d883a 	add	r6,r3,r6
 c000aac:	29c00003 	ldbu	r7,0(r5)
 c000ab0:	18c00044 	addi	r3,r3,1
 c000ab4:	29400044 	addi	r5,r5,1
 c000ab8:	19ffffc5 	stb	r7,-1(r3)
 c000abc:	19bffb1e 	bne	r3,r6,c000aac <__alt_data_end+0xfc000aac>
 c000ac0:	dfc00217 	ldw	ra,8(sp)
 c000ac4:	dc400117 	ldw	r17,4(sp)
 c000ac8:	dc000017 	ldw	r16,0(sp)
 c000acc:	dec00304 	addi	sp,sp,12
 c000ad0:	f800283a 	ret
 c000ad4:	2007883a 	mov	r3,r4
 c000ad8:	003ff206 	br	c000aa4 <__alt_data_end+0xfc000aa4>
 c000adc:	2007883a 	mov	r3,r4
 c000ae0:	003ff106 	br	c000aa8 <__alt_data_end+0xfc000aa8>
 c000ae4:	200d883a 	mov	r6,r4
 c000ae8:	003fee06 	br	c000aa4 <__alt_data_end+0xfc000aa4>

0c000aec <_printf_r>:
 c000aec:	defffd04 	addi	sp,sp,-12
 c000af0:	2805883a 	mov	r2,r5
 c000af4:	dfc00015 	stw	ra,0(sp)
 c000af8:	d9800115 	stw	r6,4(sp)
 c000afc:	d9c00215 	stw	r7,8(sp)
 c000b00:	21400217 	ldw	r5,8(r4)
 c000b04:	d9c00104 	addi	r7,sp,4
 c000b08:	100d883a 	mov	r6,r2
 c000b0c:	c000b580 	call	c000b58 <___vfprintf_internal_r>
 c000b10:	dfc00017 	ldw	ra,0(sp)
 c000b14:	dec00304 	addi	sp,sp,12
 c000b18:	f800283a 	ret

0c000b1c <printf>:
 c000b1c:	defffc04 	addi	sp,sp,-16
 c000b20:	dfc00015 	stw	ra,0(sp)
 c000b24:	d9400115 	stw	r5,4(sp)
 c000b28:	d9800215 	stw	r6,8(sp)
 c000b2c:	d9c00315 	stw	r7,12(sp)
 c000b30:	00830074 	movhi	r2,3073
 c000b34:	1087f904 	addi	r2,r2,8164
 c000b38:	10800017 	ldw	r2,0(r2)
 c000b3c:	200b883a 	mov	r5,r4
 c000b40:	d9800104 	addi	r6,sp,4
 c000b44:	11000217 	ldw	r4,8(r2)
 c000b48:	c002e340 	call	c002e34 <__vfprintf_internal>
 c000b4c:	dfc00017 	ldw	ra,0(sp)
 c000b50:	dec00404 	addi	sp,sp,16
 c000b54:	f800283a 	ret

0c000b58 <___vfprintf_internal_r>:
 c000b58:	deffb804 	addi	sp,sp,-288
 c000b5c:	dfc04715 	stw	ra,284(sp)
 c000b60:	ddc04515 	stw	r23,276(sp)
 c000b64:	dd404315 	stw	r21,268(sp)
 c000b68:	d9002d15 	stw	r4,180(sp)
 c000b6c:	282f883a 	mov	r23,r5
 c000b70:	302b883a 	mov	r21,r6
 c000b74:	d9c02e15 	stw	r7,184(sp)
 c000b78:	df004615 	stw	fp,280(sp)
 c000b7c:	dd804415 	stw	r22,272(sp)
 c000b80:	dd004215 	stw	r20,264(sp)
 c000b84:	dcc04115 	stw	r19,260(sp)
 c000b88:	dc804015 	stw	r18,256(sp)
 c000b8c:	dc403f15 	stw	r17,252(sp)
 c000b90:	dc003e15 	stw	r16,248(sp)
 c000b94:	c0055d00 	call	c0055d0 <_localeconv_r>
 c000b98:	10800017 	ldw	r2,0(r2)
 c000b9c:	1009883a 	mov	r4,r2
 c000ba0:	d8803415 	stw	r2,208(sp)
 c000ba4:	c00756c0 	call	c00756c <strlen>
 c000ba8:	d8803715 	stw	r2,220(sp)
 c000bac:	d8802d17 	ldw	r2,180(sp)
 c000bb0:	10000226 	beq	r2,zero,c000bbc <___vfprintf_internal_r+0x64>
 c000bb4:	10800e17 	ldw	r2,56(r2)
 c000bb8:	1000fb26 	beq	r2,zero,c000fa8 <___vfprintf_internal_r+0x450>
 c000bbc:	b880030b 	ldhu	r2,12(r23)
 c000bc0:	10c8000c 	andi	r3,r2,8192
 c000bc4:	1800061e 	bne	r3,zero,c000be0 <___vfprintf_internal_r+0x88>
 c000bc8:	b9001917 	ldw	r4,100(r23)
 c000bcc:	00f7ffc4 	movi	r3,-8193
 c000bd0:	10880014 	ori	r2,r2,8192
 c000bd4:	20c6703a 	and	r3,r4,r3
 c000bd8:	b880030d 	sth	r2,12(r23)
 c000bdc:	b8c01915 	stw	r3,100(r23)
 c000be0:	10c0020c 	andi	r3,r2,8
 c000be4:	1800c326 	beq	r3,zero,c000ef4 <___vfprintf_internal_r+0x39c>
 c000be8:	b8c00417 	ldw	r3,16(r23)
 c000bec:	1800c126 	beq	r3,zero,c000ef4 <___vfprintf_internal_r+0x39c>
 c000bf0:	1080068c 	andi	r2,r2,26
 c000bf4:	00c00284 	movi	r3,10
 c000bf8:	10c0c626 	beq	r2,r3,c000f14 <___vfprintf_internal_r+0x3bc>
 c000bfc:	d8c00404 	addi	r3,sp,16
 c000c00:	05030074 	movhi	r20,3073
 c000c04:	d9001e04 	addi	r4,sp,120
 c000c08:	a5009c84 	addi	r20,r20,626
 c000c0c:	d8c01e15 	stw	r3,120(sp)
 c000c10:	d8002015 	stw	zero,128(sp)
 c000c14:	d8001f15 	stw	zero,124(sp)
 c000c18:	d8003315 	stw	zero,204(sp)
 c000c1c:	d8003615 	stw	zero,216(sp)
 c000c20:	d8003815 	stw	zero,224(sp)
 c000c24:	1811883a 	mov	r8,r3
 c000c28:	d8003915 	stw	zero,228(sp)
 c000c2c:	d8003a15 	stw	zero,232(sp)
 c000c30:	d8002f15 	stw	zero,188(sp)
 c000c34:	d9002815 	stw	r4,160(sp)
 c000c38:	a8800007 	ldb	r2,0(r21)
 c000c3c:	10028b26 	beq	r2,zero,c00166c <___vfprintf_internal_r+0xb14>
 c000c40:	00c00944 	movi	r3,37
 c000c44:	a823883a 	mov	r17,r21
 c000c48:	10c0021e 	bne	r2,r3,c000c54 <___vfprintf_internal_r+0xfc>
 c000c4c:	00001406 	br	c000ca0 <___vfprintf_internal_r+0x148>
 c000c50:	10c00326 	beq	r2,r3,c000c60 <___vfprintf_internal_r+0x108>
 c000c54:	8c400044 	addi	r17,r17,1
 c000c58:	88800007 	ldb	r2,0(r17)
 c000c5c:	103ffc1e 	bne	r2,zero,c000c50 <__alt_data_end+0xfc000c50>
 c000c60:	8d61c83a 	sub	r16,r17,r21
 c000c64:	80000e26 	beq	r16,zero,c000ca0 <___vfprintf_internal_r+0x148>
 c000c68:	d8c02017 	ldw	r3,128(sp)
 c000c6c:	d8801f17 	ldw	r2,124(sp)
 c000c70:	45400015 	stw	r21,0(r8)
 c000c74:	1c07883a 	add	r3,r3,r16
 c000c78:	10800044 	addi	r2,r2,1
 c000c7c:	d8c02015 	stw	r3,128(sp)
 c000c80:	44000115 	stw	r16,4(r8)
 c000c84:	d8801f15 	stw	r2,124(sp)
 c000c88:	00c001c4 	movi	r3,7
 c000c8c:	1880a916 	blt	r3,r2,c000f34 <___vfprintf_internal_r+0x3dc>
 c000c90:	42000204 	addi	r8,r8,8
 c000c94:	d9402f17 	ldw	r5,188(sp)
 c000c98:	2c0b883a 	add	r5,r5,r16
 c000c9c:	d9402f15 	stw	r5,188(sp)
 c000ca0:	88800007 	ldb	r2,0(r17)
 c000ca4:	1000aa26 	beq	r2,zero,c000f50 <___vfprintf_internal_r+0x3f8>
 c000ca8:	8d400044 	addi	r21,r17,1
 c000cac:	8c400047 	ldb	r17,1(r17)
 c000cb0:	0021883a 	mov	r16,zero
 c000cb4:	00bfffc4 	movi	r2,-1
 c000cb8:	0025883a 	mov	r18,zero
 c000cbc:	dc002905 	stb	r16,164(sp)
 c000cc0:	d8002785 	stb	zero,158(sp)
 c000cc4:	d8002b05 	stb	zero,172(sp)
 c000cc8:	d8802a15 	stw	r2,168(sp)
 c000ccc:	d8003115 	stw	zero,196(sp)
 c000cd0:	04c01604 	movi	r19,88
 c000cd4:	05800244 	movi	r22,9
 c000cd8:	9021883a 	mov	r16,r18
 c000cdc:	4039883a 	mov	fp,r8
 c000ce0:	ad400044 	addi	r21,r21,1
 c000ce4:	88bff804 	addi	r2,r17,-32
 c000ce8:	98833236 	bltu	r19,r2,c0019b4 <___vfprintf_internal_r+0xe5c>
 c000cec:	100490ba 	slli	r2,r2,2
 c000cf0:	00c30034 	movhi	r3,3072
 c000cf4:	18c34104 	addi	r3,r3,3332
 c000cf8:	10c5883a 	add	r2,r2,r3
 c000cfc:	10800017 	ldw	r2,0(r2)
 c000d00:	1000683a 	jmp	r2
 c000d04:	0c0018ac 	andhi	r16,at,98
 c000d08:	0c0019b4 	orhi	r16,at,102
 c000d0c:	0c0019b4 	orhi	r16,at,102
 c000d10:	0c0018cc 	andi	r16,at,99
 c000d14:	0c0019b4 	orhi	r16,at,102
 c000d18:	0c0019b4 	orhi	r16,at,102
 c000d1c:	0c0019b4 	orhi	r16,at,102
 c000d20:	0c0019b4 	orhi	r16,at,102
 c000d24:	0c0019b4 	orhi	r16,at,102
 c000d28:	0c0019b4 	orhi	r16,at,102
 c000d2c:	0c000fb4 	orhi	r16,at,62
 c000d30:	0c0017bc 	xorhi	r16,at,94
 c000d34:	0c0019b4 	orhi	r16,at,102
 c000d38:	0c000e78 	rdprs	r16,at,57
 c000d3c:	0c000fd8 	cmpnei	r16,at,63
 c000d40:	0c0019b4 	orhi	r16,at,102
 c000d44:	0c001028 	cmpgeui	r16,at,64
 c000d48:	0c001034 	orhi	r16,at,64
 c000d4c:	0c001034 	orhi	r16,at,64
 c000d50:	0c001034 	orhi	r16,at,64
 c000d54:	0c001034 	orhi	r16,at,64
 c000d58:	0c001034 	orhi	r16,at,64
 c000d5c:	0c001034 	orhi	r16,at,64
 c000d60:	0c001034 	orhi	r16,at,64
 c000d64:	0c001034 	orhi	r16,at,64
 c000d68:	0c001034 	orhi	r16,at,64
 c000d6c:	0c0019b4 	orhi	r16,at,102
 c000d70:	0c0019b4 	orhi	r16,at,102
 c000d74:	0c0019b4 	orhi	r16,at,102
 c000d78:	0c0019b4 	orhi	r16,at,102
 c000d7c:	0c0019b4 	orhi	r16,at,102
 c000d80:	0c0019b4 	orhi	r16,at,102
 c000d84:	0c0019b4 	orhi	r16,at,102
 c000d88:	0c0019b4 	orhi	r16,at,102
 c000d8c:	0c0019b4 	orhi	r16,at,102
 c000d90:	0c0019b4 	orhi	r16,at,102
 c000d94:	0c001070 	cmpltui	r16,at,65
 c000d98:	0c001138 	rdprs	r16,at,68
 c000d9c:	0c0019b4 	orhi	r16,at,102
 c000da0:	0c001138 	rdprs	r16,at,68
 c000da4:	0c0019b4 	orhi	r16,at,102
 c000da8:	0c0019b4 	orhi	r16,at,102
 c000dac:	0c0019b4 	orhi	r16,at,102
 c000db0:	0c0019b4 	orhi	r16,at,102
 c000db4:	0c0011e4 	muli	r16,at,71
 c000db8:	0c0019b4 	orhi	r16,at,102
 c000dbc:	0c0019b4 	orhi	r16,at,102
 c000dc0:	0c0011f0 	cmpltui	r16,at,71
 c000dc4:	0c0019b4 	orhi	r16,at,102
 c000dc8:	0c0019b4 	orhi	r16,at,102
 c000dcc:	0c0019b4 	orhi	r16,at,102
 c000dd0:	0c0019b4 	orhi	r16,at,102
 c000dd4:	0c0019b4 	orhi	r16,at,102
 c000dd8:	0c001674 	orhi	r16,at,89
 c000ddc:	0c0019b4 	orhi	r16,at,102
 c000de0:	0c0019b4 	orhi	r16,at,102
 c000de4:	0c0016e0 	cmpeqi	r16,at,91
 c000de8:	0c0019b4 	orhi	r16,at,102
 c000dec:	0c0019b4 	orhi	r16,at,102
 c000df0:	0c0019b4 	orhi	r16,at,102
 c000df4:	0c0019b4 	orhi	r16,at,102
 c000df8:	0c0019b4 	orhi	r16,at,102
 c000dfc:	0c0019b4 	orhi	r16,at,102
 c000e00:	0c0019b4 	orhi	r16,at,102
 c000e04:	0c0019b4 	orhi	r16,at,102
 c000e08:	0c0019b4 	orhi	r16,at,102
 c000e0c:	0c0019b4 	orhi	r16,at,102
 c000e10:	0c001958 	cmpnei	r16,at,101
 c000e14:	0c0018d8 	cmpnei	r16,at,99
 c000e18:	0c001138 	rdprs	r16,at,68
 c000e1c:	0c001138 	rdprs	r16,at,68
 c000e20:	0c001138 	rdprs	r16,at,68
 c000e24:	0c0018f8 	rdprs	r16,at,99
 c000e28:	0c0018d8 	cmpnei	r16,at,99
 c000e2c:	0c0019b4 	orhi	r16,at,102
 c000e30:	0c0019b4 	orhi	r16,at,102
 c000e34:	0c001904 	addi	r16,at,100
 c000e38:	0c0019b4 	orhi	r16,at,102
 c000e3c:	0c001918 	cmpnei	r16,at,100
 c000e40:	0c00179c 	xori	r16,at,94
 c000e44:	0c000e84 	addi	r16,at,58
 c000e48:	0c0017d4 	ori	r16,at,95
 c000e4c:	0c0019b4 	orhi	r16,at,102
 c000e50:	0c0017e0 	cmpeqi	r16,at,95
 c000e54:	0c0019b4 	orhi	r16,at,102
 c000e58:	0c001844 	addi	r16,at,97
 c000e5c:	0c0019b4 	orhi	r16,at,102
 c000e60:	0c0019b4 	orhi	r16,at,102
 c000e64:	0c001864 	muli	r16,at,97
 c000e68:	d8c03117 	ldw	r3,196(sp)
 c000e6c:	d8802e15 	stw	r2,184(sp)
 c000e70:	00c7c83a 	sub	r3,zero,r3
 c000e74:	d8c03115 	stw	r3,196(sp)
 c000e78:	84000114 	ori	r16,r16,4
 c000e7c:	ac400007 	ldb	r17,0(r21)
 c000e80:	003f9706 	br	c000ce0 <__alt_data_end+0xfc000ce0>
 c000e84:	00800c04 	movi	r2,48
 c000e88:	d8802705 	stb	r2,156(sp)
 c000e8c:	00801e04 	movi	r2,120
 c000e90:	d8802745 	stb	r2,157(sp)
 c000e94:	d9002a17 	ldw	r4,168(sp)
 c000e98:	d8802e17 	ldw	r2,184(sp)
 c000e9c:	d8002785 	stb	zero,158(sp)
 c000ea0:	e011883a 	mov	r8,fp
 c000ea4:	10c00104 	addi	r3,r2,4
 c000ea8:	14c00017 	ldw	r19,0(r2)
 c000eac:	002d883a 	mov	r22,zero
 c000eb0:	80800094 	ori	r2,r16,2
 c000eb4:	2002ca16 	blt	r4,zero,c0019e0 <___vfprintf_internal_r+0xe88>
 c000eb8:	00bfdfc4 	movi	r2,-129
 c000ebc:	80a4703a 	and	r18,r16,r2
 c000ec0:	d8c02e15 	stw	r3,184(sp)
 c000ec4:	94800094 	ori	r18,r18,2
 c000ec8:	9802b41e 	bne	r19,zero,c00199c <___vfprintf_internal_r+0xe44>
 c000ecc:	01430074 	movhi	r5,3073
 c000ed0:	29409504 	addi	r5,r5,596
 c000ed4:	d9403915 	stw	r5,228(sp)
 c000ed8:	04401e04 	movi	r17,120
 c000edc:	d8802a17 	ldw	r2,168(sp)
 c000ee0:	0039883a 	mov	fp,zero
 c000ee4:	1001fa26 	beq	r2,zero,c0016d0 <___vfprintf_internal_r+0xb78>
 c000ee8:	0027883a 	mov	r19,zero
 c000eec:	002d883a 	mov	r22,zero
 c000ef0:	00021906 	br	c001758 <___vfprintf_internal_r+0xc00>
 c000ef4:	d9002d17 	ldw	r4,180(sp)
 c000ef8:	b80b883a 	mov	r5,r23
 c000efc:	c002f0c0 	call	c002f0c <__swsetup_r>
 c000f00:	1005dc1e 	bne	r2,zero,c002674 <___vfprintf_internal_r+0x1b1c>
 c000f04:	b880030b 	ldhu	r2,12(r23)
 c000f08:	00c00284 	movi	r3,10
 c000f0c:	1080068c 	andi	r2,r2,26
 c000f10:	10ff3a1e 	bne	r2,r3,c000bfc <__alt_data_end+0xfc000bfc>
 c000f14:	b880038f 	ldh	r2,14(r23)
 c000f18:	103f3816 	blt	r2,zero,c000bfc <__alt_data_end+0xfc000bfc>
 c000f1c:	d9c02e17 	ldw	r7,184(sp)
 c000f20:	d9002d17 	ldw	r4,180(sp)
 c000f24:	a80d883a 	mov	r6,r21
 c000f28:	b80b883a 	mov	r5,r23
 c000f2c:	c002e500 	call	c002e50 <__sbprintf>
 c000f30:	00001106 	br	c000f78 <___vfprintf_internal_r+0x420>
 c000f34:	d9002d17 	ldw	r4,180(sp)
 c000f38:	d9801e04 	addi	r6,sp,120
 c000f3c:	b80b883a 	mov	r5,r23
 c000f40:	c0077000 	call	c007700 <__sprint_r>
 c000f44:	1000081e 	bne	r2,zero,c000f68 <___vfprintf_internal_r+0x410>
 c000f48:	da000404 	addi	r8,sp,16
 c000f4c:	003f5106 	br	c000c94 <__alt_data_end+0xfc000c94>
 c000f50:	d8802017 	ldw	r2,128(sp)
 c000f54:	10000426 	beq	r2,zero,c000f68 <___vfprintf_internal_r+0x410>
 c000f58:	d9002d17 	ldw	r4,180(sp)
 c000f5c:	d9801e04 	addi	r6,sp,120
 c000f60:	b80b883a 	mov	r5,r23
 c000f64:	c0077000 	call	c007700 <__sprint_r>
 c000f68:	b880030b 	ldhu	r2,12(r23)
 c000f6c:	1080100c 	andi	r2,r2,64
 c000f70:	1005c01e 	bne	r2,zero,c002674 <___vfprintf_internal_r+0x1b1c>
 c000f74:	d8802f17 	ldw	r2,188(sp)
 c000f78:	dfc04717 	ldw	ra,284(sp)
 c000f7c:	df004617 	ldw	fp,280(sp)
 c000f80:	ddc04517 	ldw	r23,276(sp)
 c000f84:	dd804417 	ldw	r22,272(sp)
 c000f88:	dd404317 	ldw	r21,268(sp)
 c000f8c:	dd004217 	ldw	r20,264(sp)
 c000f90:	dcc04117 	ldw	r19,260(sp)
 c000f94:	dc804017 	ldw	r18,256(sp)
 c000f98:	dc403f17 	ldw	r17,252(sp)
 c000f9c:	dc003e17 	ldw	r16,248(sp)
 c000fa0:	dec04804 	addi	sp,sp,288
 c000fa4:	f800283a 	ret
 c000fa8:	d9002d17 	ldw	r4,180(sp)
 c000fac:	c004f180 	call	c004f18 <__sinit>
 c000fb0:	003f0206 	br	c000bbc <__alt_data_end+0xfc000bbc>
 c000fb4:	d9002e17 	ldw	r4,184(sp)
 c000fb8:	d9402e17 	ldw	r5,184(sp)
 c000fbc:	21000017 	ldw	r4,0(r4)
 c000fc0:	28800104 	addi	r2,r5,4
 c000fc4:	d9003115 	stw	r4,196(sp)
 c000fc8:	203fa716 	blt	r4,zero,c000e68 <__alt_data_end+0xfc000e68>
 c000fcc:	d8802e15 	stw	r2,184(sp)
 c000fd0:	ac400007 	ldb	r17,0(r21)
 c000fd4:	003f4206 	br	c000ce0 <__alt_data_end+0xfc000ce0>
 c000fd8:	ac400007 	ldb	r17,0(r21)
 c000fdc:	01000a84 	movi	r4,42
 c000fe0:	a8c00044 	addi	r3,r21,1
 c000fe4:	89075826 	beq	r17,r4,c002d48 <___vfprintf_internal_r+0x21f0>
 c000fe8:	8cbff404 	addi	r18,r17,-48
 c000fec:	b486ae36 	bltu	r22,r18,c002aa8 <___vfprintf_internal_r+0x1f50>
 c000ff0:	0009883a 	mov	r4,zero
 c000ff4:	1823883a 	mov	r17,r3
 c000ff8:	01400284 	movi	r5,10
 c000ffc:	c00097c0 	call	c00097c <__mulsi3>
 c001000:	88c00007 	ldb	r3,0(r17)
 c001004:	1489883a 	add	r4,r2,r18
 c001008:	8d400044 	addi	r21,r17,1
 c00100c:	1cbff404 	addi	r18,r3,-48
 c001010:	a823883a 	mov	r17,r21
 c001014:	b4bff82e 	bgeu	r22,r18,c000ff8 <__alt_data_end+0xfc000ff8>
 c001018:	1823883a 	mov	r17,r3
 c00101c:	2005f616 	blt	r4,zero,c0027f8 <___vfprintf_internal_r+0x1ca0>
 c001020:	d9002a15 	stw	r4,168(sp)
 c001024:	003f2f06 	br	c000ce4 <__alt_data_end+0xfc000ce4>
 c001028:	84002014 	ori	r16,r16,128
 c00102c:	ac400007 	ldb	r17,0(r21)
 c001030:	003f2b06 	br	c000ce0 <__alt_data_end+0xfc000ce0>
 c001034:	8cbff404 	addi	r18,r17,-48
 c001038:	d8003115 	stw	zero,196(sp)
 c00103c:	0009883a 	mov	r4,zero
 c001040:	a823883a 	mov	r17,r21
 c001044:	01400284 	movi	r5,10
 c001048:	c00097c0 	call	c00097c <__mulsi3>
 c00104c:	88c00007 	ldb	r3,0(r17)
 c001050:	9089883a 	add	r4,r18,r2
 c001054:	ad400044 	addi	r21,r21,1
 c001058:	1cbff404 	addi	r18,r3,-48
 c00105c:	a823883a 	mov	r17,r21
 c001060:	b4bff82e 	bgeu	r22,r18,c001044 <__alt_data_end+0xfc001044>
 c001064:	1823883a 	mov	r17,r3
 c001068:	d9003115 	stw	r4,196(sp)
 c00106c:	003f1d06 	br	c000ce4 <__alt_data_end+0xfc000ce4>
 c001070:	8025883a 	mov	r18,r16
 c001074:	dc002903 	ldbu	r16,164(sp)
 c001078:	e011883a 	mov	r8,fp
 c00107c:	84003fcc 	andi	r16,r16,255
 c001080:	8007531e 	bne	r16,zero,c002dd0 <___vfprintf_internal_r+0x2278>
 c001084:	94800414 	ori	r18,r18,16
 c001088:	9080080c 	andi	r2,r18,32
 c00108c:	1003a326 	beq	r2,zero,c001f1c <___vfprintf_internal_r+0x13c4>
 c001090:	d9002e17 	ldw	r4,184(sp)
 c001094:	20800117 	ldw	r2,4(r4)
 c001098:	24c00017 	ldw	r19,0(r4)
 c00109c:	21000204 	addi	r4,r4,8
 c0010a0:	d9002e15 	stw	r4,184(sp)
 c0010a4:	102d883a 	mov	r22,r2
 c0010a8:	10047316 	blt	r2,zero,c002278 <___vfprintf_internal_r+0x1720>
 c0010ac:	d9002a17 	ldw	r4,168(sp)
 c0010b0:	df002783 	ldbu	fp,158(sp)
 c0010b4:	2003e416 	blt	r4,zero,c002048 <___vfprintf_internal_r+0x14f0>
 c0010b8:	00ffdfc4 	movi	r3,-129
 c0010bc:	9d84b03a 	or	r2,r19,r22
 c0010c0:	90e4703a 	and	r18,r18,r3
 c0010c4:	10018026 	beq	r2,zero,c0016c8 <___vfprintf_internal_r+0xb70>
 c0010c8:	b003ab26 	beq	r22,zero,c001f78 <___vfprintf_internal_r+0x1420>
 c0010cc:	dc402915 	stw	r17,164(sp)
 c0010d0:	dc001e04 	addi	r16,sp,120
 c0010d4:	b023883a 	mov	r17,r22
 c0010d8:	402d883a 	mov	r22,r8
 c0010dc:	9809883a 	mov	r4,r19
 c0010e0:	880b883a 	mov	r5,r17
 c0010e4:	01800284 	movi	r6,10
 c0010e8:	000f883a 	mov	r7,zero
 c0010ec:	c00a7cc0 	call	c00a7cc <__umoddi3>
 c0010f0:	10800c04 	addi	r2,r2,48
 c0010f4:	843fffc4 	addi	r16,r16,-1
 c0010f8:	9809883a 	mov	r4,r19
 c0010fc:	880b883a 	mov	r5,r17
 c001100:	80800005 	stb	r2,0(r16)
 c001104:	01800284 	movi	r6,10
 c001108:	000f883a 	mov	r7,zero
 c00110c:	c00a1d00 	call	c00a1d0 <__udivdi3>
 c001110:	1027883a 	mov	r19,r2
 c001114:	10c4b03a 	or	r2,r2,r3
 c001118:	1823883a 	mov	r17,r3
 c00111c:	103fef1e 	bne	r2,zero,c0010dc <__alt_data_end+0xfc0010dc>
 c001120:	d8c02817 	ldw	r3,160(sp)
 c001124:	dc402917 	ldw	r17,164(sp)
 c001128:	b011883a 	mov	r8,r22
 c00112c:	1c07c83a 	sub	r3,r3,r16
 c001130:	d8c02b15 	stw	r3,172(sp)
 c001134:	00005f06 	br	c0012b4 <___vfprintf_internal_r+0x75c>
 c001138:	8025883a 	mov	r18,r16
 c00113c:	dc002903 	ldbu	r16,164(sp)
 c001140:	e011883a 	mov	r8,fp
 c001144:	84003fcc 	andi	r16,r16,255
 c001148:	80071e1e 	bne	r16,zero,c002dc4 <___vfprintf_internal_r+0x226c>
 c00114c:	9080020c 	andi	r2,r18,8
 c001150:	1004af26 	beq	r2,zero,c002410 <___vfprintf_internal_r+0x18b8>
 c001154:	d9002e17 	ldw	r4,184(sp)
 c001158:	d9402e17 	ldw	r5,184(sp)
 c00115c:	d8802e17 	ldw	r2,184(sp)
 c001160:	21000017 	ldw	r4,0(r4)
 c001164:	29400117 	ldw	r5,4(r5)
 c001168:	10800204 	addi	r2,r2,8
 c00116c:	d9003615 	stw	r4,216(sp)
 c001170:	d9403815 	stw	r5,224(sp)
 c001174:	d8802e15 	stw	r2,184(sp)
 c001178:	d9003617 	ldw	r4,216(sp)
 c00117c:	d9403817 	ldw	r5,224(sp)
 c001180:	da003d15 	stw	r8,244(sp)
 c001184:	04000044 	movi	r16,1
 c001188:	c00728c0 	call	c00728c <__fpclassifyd>
 c00118c:	da003d17 	ldw	r8,244(sp)
 c001190:	1404441e 	bne	r2,r16,c0022a4 <___vfprintf_internal_r+0x174c>
 c001194:	d9003617 	ldw	r4,216(sp)
 c001198:	d9403817 	ldw	r5,224(sp)
 c00119c:	000d883a 	mov	r6,zero
 c0011a0:	000f883a 	mov	r7,zero
 c0011a4:	c00c3240 	call	c00c324 <__ledf2>
 c0011a8:	da003d17 	ldw	r8,244(sp)
 c0011ac:	1005e316 	blt	r2,zero,c00293c <___vfprintf_internal_r+0x1de4>
 c0011b0:	df002783 	ldbu	fp,158(sp)
 c0011b4:	008011c4 	movi	r2,71
 c0011b8:	1445580e 	bge	r2,r17,c00271c <___vfprintf_internal_r+0x1bc4>
 c0011bc:	04030074 	movhi	r16,3073
 c0011c0:	84008d04 	addi	r16,r16,564
 c0011c4:	00c000c4 	movi	r3,3
 c0011c8:	00bfdfc4 	movi	r2,-129
 c0011cc:	d8c02915 	stw	r3,164(sp)
 c0011d0:	90a4703a 	and	r18,r18,r2
 c0011d4:	d8c02b15 	stw	r3,172(sp)
 c0011d8:	d8002a15 	stw	zero,168(sp)
 c0011dc:	d8003215 	stw	zero,200(sp)
 c0011e0:	00003a06 	br	c0012cc <___vfprintf_internal_r+0x774>
 c0011e4:	84000214 	ori	r16,r16,8
 c0011e8:	ac400007 	ldb	r17,0(r21)
 c0011ec:	003ebc06 	br	c000ce0 <__alt_data_end+0xfc000ce0>
 c0011f0:	8025883a 	mov	r18,r16
 c0011f4:	dc002903 	ldbu	r16,164(sp)
 c0011f8:	e011883a 	mov	r8,fp
 c0011fc:	84003fcc 	andi	r16,r16,255
 c001200:	8007001e 	bne	r16,zero,c002e04 <___vfprintf_internal_r+0x22ac>
 c001204:	94800414 	ori	r18,r18,16
 c001208:	9080080c 	andi	r2,r18,32
 c00120c:	1002fa26 	beq	r2,zero,c001df8 <___vfprintf_internal_r+0x12a0>
 c001210:	d9002e17 	ldw	r4,184(sp)
 c001214:	d9402a17 	ldw	r5,168(sp)
 c001218:	d8002785 	stb	zero,158(sp)
 c00121c:	20800204 	addi	r2,r4,8
 c001220:	24c00017 	ldw	r19,0(r4)
 c001224:	25800117 	ldw	r22,4(r4)
 c001228:	2804b116 	blt	r5,zero,c0024f0 <___vfprintf_internal_r+0x1998>
 c00122c:	013fdfc4 	movi	r4,-129
 c001230:	9d86b03a 	or	r3,r19,r22
 c001234:	d8802e15 	stw	r2,184(sp)
 c001238:	9124703a 	and	r18,r18,r4
 c00123c:	1802fb1e 	bne	r3,zero,c001e2c <___vfprintf_internal_r+0x12d4>
 c001240:	d8c02a17 	ldw	r3,168(sp)
 c001244:	0039883a 	mov	fp,zero
 c001248:	1805e526 	beq	r3,zero,c0029e0 <___vfprintf_internal_r+0x1e88>
 c00124c:	0027883a 	mov	r19,zero
 c001250:	002d883a 	mov	r22,zero
 c001254:	dc001e04 	addi	r16,sp,120
 c001258:	9806d0fa 	srli	r3,r19,3
 c00125c:	b008977a 	slli	r4,r22,29
 c001260:	b02cd0fa 	srli	r22,r22,3
 c001264:	9cc001cc 	andi	r19,r19,7
 c001268:	98800c04 	addi	r2,r19,48
 c00126c:	843fffc4 	addi	r16,r16,-1
 c001270:	20e6b03a 	or	r19,r4,r3
 c001274:	80800005 	stb	r2,0(r16)
 c001278:	9d86b03a 	or	r3,r19,r22
 c00127c:	183ff61e 	bne	r3,zero,c001258 <__alt_data_end+0xfc001258>
 c001280:	90c0004c 	andi	r3,r18,1
 c001284:	18014126 	beq	r3,zero,c00178c <___vfprintf_internal_r+0xc34>
 c001288:	10803fcc 	andi	r2,r2,255
 c00128c:	1080201c 	xori	r2,r2,128
 c001290:	10bfe004 	addi	r2,r2,-128
 c001294:	00c00c04 	movi	r3,48
 c001298:	10c13c26 	beq	r2,r3,c00178c <___vfprintf_internal_r+0xc34>
 c00129c:	80ffffc5 	stb	r3,-1(r16)
 c0012a0:	d8c02817 	ldw	r3,160(sp)
 c0012a4:	80bfffc4 	addi	r2,r16,-1
 c0012a8:	1021883a 	mov	r16,r2
 c0012ac:	1887c83a 	sub	r3,r3,r2
 c0012b0:	d8c02b15 	stw	r3,172(sp)
 c0012b4:	d8802b17 	ldw	r2,172(sp)
 c0012b8:	d9002a17 	ldw	r4,168(sp)
 c0012bc:	1100010e 	bge	r2,r4,c0012c4 <___vfprintf_internal_r+0x76c>
 c0012c0:	2005883a 	mov	r2,r4
 c0012c4:	d8802915 	stw	r2,164(sp)
 c0012c8:	d8003215 	stw	zero,200(sp)
 c0012cc:	e7003fcc 	andi	fp,fp,255
 c0012d0:	e700201c 	xori	fp,fp,128
 c0012d4:	e73fe004 	addi	fp,fp,-128
 c0012d8:	e0000326 	beq	fp,zero,c0012e8 <___vfprintf_internal_r+0x790>
 c0012dc:	d8c02917 	ldw	r3,164(sp)
 c0012e0:	18c00044 	addi	r3,r3,1
 c0012e4:	d8c02915 	stw	r3,164(sp)
 c0012e8:	90c0008c 	andi	r3,r18,2
 c0012ec:	d8c02c15 	stw	r3,176(sp)
 c0012f0:	18000326 	beq	r3,zero,c001300 <___vfprintf_internal_r+0x7a8>
 c0012f4:	d8c02917 	ldw	r3,164(sp)
 c0012f8:	18c00084 	addi	r3,r3,2
 c0012fc:	d8c02915 	stw	r3,164(sp)
 c001300:	90c0210c 	andi	r3,r18,132
 c001304:	d8c03015 	stw	r3,192(sp)
 c001308:	1801c51e 	bne	r3,zero,c001a20 <___vfprintf_internal_r+0xec8>
 c00130c:	d9003117 	ldw	r4,196(sp)
 c001310:	d8c02917 	ldw	r3,164(sp)
 c001314:	20e7c83a 	sub	r19,r4,r3
 c001318:	04c1c10e 	bge	zero,r19,c001a20 <___vfprintf_internal_r+0xec8>
 c00131c:	02400404 	movi	r9,16
 c001320:	d8c02017 	ldw	r3,128(sp)
 c001324:	d8801f17 	ldw	r2,124(sp)
 c001328:	4cc52f0e 	bge	r9,r19,c0027e8 <___vfprintf_internal_r+0x1c90>
 c00132c:	01430074 	movhi	r5,3073
 c001330:	2940a084 	addi	r5,r5,642
 c001334:	dc403b15 	stw	r17,236(sp)
 c001338:	d9403515 	stw	r5,212(sp)
 c00133c:	9823883a 	mov	r17,r19
 c001340:	482d883a 	mov	r22,r9
 c001344:	9027883a 	mov	r19,r18
 c001348:	070001c4 	movi	fp,7
 c00134c:	8025883a 	mov	r18,r16
 c001350:	dc002d17 	ldw	r16,180(sp)
 c001354:	00000306 	br	c001364 <___vfprintf_internal_r+0x80c>
 c001358:	8c7ffc04 	addi	r17,r17,-16
 c00135c:	42000204 	addi	r8,r8,8
 c001360:	b440130e 	bge	r22,r17,c0013b0 <___vfprintf_internal_r+0x858>
 c001364:	01030074 	movhi	r4,3073
 c001368:	18c00404 	addi	r3,r3,16
 c00136c:	10800044 	addi	r2,r2,1
 c001370:	2100a084 	addi	r4,r4,642
 c001374:	41000015 	stw	r4,0(r8)
 c001378:	45800115 	stw	r22,4(r8)
 c00137c:	d8c02015 	stw	r3,128(sp)
 c001380:	d8801f15 	stw	r2,124(sp)
 c001384:	e0bff40e 	bge	fp,r2,c001358 <__alt_data_end+0xfc001358>
 c001388:	d9801e04 	addi	r6,sp,120
 c00138c:	b80b883a 	mov	r5,r23
 c001390:	8009883a 	mov	r4,r16
 c001394:	c0077000 	call	c007700 <__sprint_r>
 c001398:	103ef31e 	bne	r2,zero,c000f68 <__alt_data_end+0xfc000f68>
 c00139c:	8c7ffc04 	addi	r17,r17,-16
 c0013a0:	d8c02017 	ldw	r3,128(sp)
 c0013a4:	d8801f17 	ldw	r2,124(sp)
 c0013a8:	da000404 	addi	r8,sp,16
 c0013ac:	b47fed16 	blt	r22,r17,c001364 <__alt_data_end+0xfc001364>
 c0013b0:	9021883a 	mov	r16,r18
 c0013b4:	9825883a 	mov	r18,r19
 c0013b8:	8827883a 	mov	r19,r17
 c0013bc:	dc403b17 	ldw	r17,236(sp)
 c0013c0:	d9403517 	ldw	r5,212(sp)
 c0013c4:	98c7883a 	add	r3,r19,r3
 c0013c8:	10800044 	addi	r2,r2,1
 c0013cc:	41400015 	stw	r5,0(r8)
 c0013d0:	44c00115 	stw	r19,4(r8)
 c0013d4:	d8c02015 	stw	r3,128(sp)
 c0013d8:	d8801f15 	stw	r2,124(sp)
 c0013dc:	010001c4 	movi	r4,7
 c0013e0:	2082c516 	blt	r4,r2,c001ef8 <___vfprintf_internal_r+0x13a0>
 c0013e4:	df002787 	ldb	fp,158(sp)
 c0013e8:	42000204 	addi	r8,r8,8
 c0013ec:	e0000c26 	beq	fp,zero,c001420 <___vfprintf_internal_r+0x8c8>
 c0013f0:	d8801f17 	ldw	r2,124(sp)
 c0013f4:	d9002784 	addi	r4,sp,158
 c0013f8:	18c00044 	addi	r3,r3,1
 c0013fc:	10800044 	addi	r2,r2,1
 c001400:	41000015 	stw	r4,0(r8)
 c001404:	01000044 	movi	r4,1
 c001408:	41000115 	stw	r4,4(r8)
 c00140c:	d8c02015 	stw	r3,128(sp)
 c001410:	d8801f15 	stw	r2,124(sp)
 c001414:	010001c4 	movi	r4,7
 c001418:	20825e16 	blt	r4,r2,c001d94 <___vfprintf_internal_r+0x123c>
 c00141c:	42000204 	addi	r8,r8,8
 c001420:	d8802c17 	ldw	r2,176(sp)
 c001424:	10000c26 	beq	r2,zero,c001458 <___vfprintf_internal_r+0x900>
 c001428:	d8801f17 	ldw	r2,124(sp)
 c00142c:	d9002704 	addi	r4,sp,156
 c001430:	18c00084 	addi	r3,r3,2
 c001434:	10800044 	addi	r2,r2,1
 c001438:	41000015 	stw	r4,0(r8)
 c00143c:	01000084 	movi	r4,2
 c001440:	41000115 	stw	r4,4(r8)
 c001444:	d8c02015 	stw	r3,128(sp)
 c001448:	d8801f15 	stw	r2,124(sp)
 c00144c:	010001c4 	movi	r4,7
 c001450:	20825816 	blt	r4,r2,c001db4 <___vfprintf_internal_r+0x125c>
 c001454:	42000204 	addi	r8,r8,8
 c001458:	d9003017 	ldw	r4,192(sp)
 c00145c:	00802004 	movi	r2,128
 c001460:	2081bb26 	beq	r4,r2,c001b50 <___vfprintf_internal_r+0xff8>
 c001464:	d9402a17 	ldw	r5,168(sp)
 c001468:	d8802b17 	ldw	r2,172(sp)
 c00146c:	28adc83a 	sub	r22,r5,r2
 c001470:	0580310e 	bge	zero,r22,c001538 <___vfprintf_internal_r+0x9e0>
 c001474:	07000404 	movi	fp,16
 c001478:	d8801f17 	ldw	r2,124(sp)
 c00147c:	e584360e 	bge	fp,r22,c002558 <___vfprintf_internal_r+0x1a00>
 c001480:	01430074 	movhi	r5,3073
 c001484:	29409c84 	addi	r5,r5,626
 c001488:	dc402a15 	stw	r17,168(sp)
 c00148c:	d9402c15 	stw	r5,176(sp)
 c001490:	b023883a 	mov	r17,r22
 c001494:	04c001c4 	movi	r19,7
 c001498:	a82d883a 	mov	r22,r21
 c00149c:	902b883a 	mov	r21,r18
 c0014a0:	8025883a 	mov	r18,r16
 c0014a4:	dc002d17 	ldw	r16,180(sp)
 c0014a8:	00000306 	br	c0014b8 <___vfprintf_internal_r+0x960>
 c0014ac:	8c7ffc04 	addi	r17,r17,-16
 c0014b0:	42000204 	addi	r8,r8,8
 c0014b4:	e440110e 	bge	fp,r17,c0014fc <___vfprintf_internal_r+0x9a4>
 c0014b8:	18c00404 	addi	r3,r3,16
 c0014bc:	10800044 	addi	r2,r2,1
 c0014c0:	45000015 	stw	r20,0(r8)
 c0014c4:	47000115 	stw	fp,4(r8)
 c0014c8:	d8c02015 	stw	r3,128(sp)
 c0014cc:	d8801f15 	stw	r2,124(sp)
 c0014d0:	98bff60e 	bge	r19,r2,c0014ac <__alt_data_end+0xfc0014ac>
 c0014d4:	d9801e04 	addi	r6,sp,120
 c0014d8:	b80b883a 	mov	r5,r23
 c0014dc:	8009883a 	mov	r4,r16
 c0014e0:	c0077000 	call	c007700 <__sprint_r>
 c0014e4:	103ea01e 	bne	r2,zero,c000f68 <__alt_data_end+0xfc000f68>
 c0014e8:	8c7ffc04 	addi	r17,r17,-16
 c0014ec:	d8c02017 	ldw	r3,128(sp)
 c0014f0:	d8801f17 	ldw	r2,124(sp)
 c0014f4:	da000404 	addi	r8,sp,16
 c0014f8:	e47fef16 	blt	fp,r17,c0014b8 <__alt_data_end+0xfc0014b8>
 c0014fc:	9021883a 	mov	r16,r18
 c001500:	a825883a 	mov	r18,r21
 c001504:	b02b883a 	mov	r21,r22
 c001508:	882d883a 	mov	r22,r17
 c00150c:	dc402a17 	ldw	r17,168(sp)
 c001510:	d9002c17 	ldw	r4,176(sp)
 c001514:	1d87883a 	add	r3,r3,r22
 c001518:	10800044 	addi	r2,r2,1
 c00151c:	41000015 	stw	r4,0(r8)
 c001520:	45800115 	stw	r22,4(r8)
 c001524:	d8c02015 	stw	r3,128(sp)
 c001528:	d8801f15 	stw	r2,124(sp)
 c00152c:	010001c4 	movi	r4,7
 c001530:	20821016 	blt	r4,r2,c001d74 <___vfprintf_internal_r+0x121c>
 c001534:	42000204 	addi	r8,r8,8
 c001538:	9080400c 	andi	r2,r18,256
 c00153c:	10013a1e 	bne	r2,zero,c001a28 <___vfprintf_internal_r+0xed0>
 c001540:	d9402b17 	ldw	r5,172(sp)
 c001544:	d8801f17 	ldw	r2,124(sp)
 c001548:	44000015 	stw	r16,0(r8)
 c00154c:	1947883a 	add	r3,r3,r5
 c001550:	10800044 	addi	r2,r2,1
 c001554:	41400115 	stw	r5,4(r8)
 c001558:	d8c02015 	stw	r3,128(sp)
 c00155c:	d8801f15 	stw	r2,124(sp)
 c001560:	010001c4 	movi	r4,7
 c001564:	2081f516 	blt	r4,r2,c001d3c <___vfprintf_internal_r+0x11e4>
 c001568:	42000204 	addi	r8,r8,8
 c00156c:	9480010c 	andi	r18,r18,4
 c001570:	90003226 	beq	r18,zero,c00163c <___vfprintf_internal_r+0xae4>
 c001574:	d9403117 	ldw	r5,196(sp)
 c001578:	d8802917 	ldw	r2,164(sp)
 c00157c:	28a1c83a 	sub	r16,r5,r2
 c001580:	04002e0e 	bge	zero,r16,c00163c <___vfprintf_internal_r+0xae4>
 c001584:	04400404 	movi	r17,16
 c001588:	d8801f17 	ldw	r2,124(sp)
 c00158c:	8c04c40e 	bge	r17,r16,c0028a0 <___vfprintf_internal_r+0x1d48>
 c001590:	01430074 	movhi	r5,3073
 c001594:	2940a084 	addi	r5,r5,642
 c001598:	d9403515 	stw	r5,212(sp)
 c00159c:	048001c4 	movi	r18,7
 c0015a0:	dcc02d17 	ldw	r19,180(sp)
 c0015a4:	00000306 	br	c0015b4 <___vfprintf_internal_r+0xa5c>
 c0015a8:	843ffc04 	addi	r16,r16,-16
 c0015ac:	42000204 	addi	r8,r8,8
 c0015b0:	8c00130e 	bge	r17,r16,c001600 <___vfprintf_internal_r+0xaa8>
 c0015b4:	01030074 	movhi	r4,3073
 c0015b8:	18c00404 	addi	r3,r3,16
 c0015bc:	10800044 	addi	r2,r2,1
 c0015c0:	2100a084 	addi	r4,r4,642
 c0015c4:	41000015 	stw	r4,0(r8)
 c0015c8:	44400115 	stw	r17,4(r8)
 c0015cc:	d8c02015 	stw	r3,128(sp)
 c0015d0:	d8801f15 	stw	r2,124(sp)
 c0015d4:	90bff40e 	bge	r18,r2,c0015a8 <__alt_data_end+0xfc0015a8>
 c0015d8:	d9801e04 	addi	r6,sp,120
 c0015dc:	b80b883a 	mov	r5,r23
 c0015e0:	9809883a 	mov	r4,r19
 c0015e4:	c0077000 	call	c007700 <__sprint_r>
 c0015e8:	103e5f1e 	bne	r2,zero,c000f68 <__alt_data_end+0xfc000f68>
 c0015ec:	843ffc04 	addi	r16,r16,-16
 c0015f0:	d8c02017 	ldw	r3,128(sp)
 c0015f4:	d8801f17 	ldw	r2,124(sp)
 c0015f8:	da000404 	addi	r8,sp,16
 c0015fc:	8c3fed16 	blt	r17,r16,c0015b4 <__alt_data_end+0xfc0015b4>
 c001600:	d9403517 	ldw	r5,212(sp)
 c001604:	1c07883a 	add	r3,r3,r16
 c001608:	10800044 	addi	r2,r2,1
 c00160c:	41400015 	stw	r5,0(r8)
 c001610:	44000115 	stw	r16,4(r8)
 c001614:	d8c02015 	stw	r3,128(sp)
 c001618:	d8801f15 	stw	r2,124(sp)
 c00161c:	010001c4 	movi	r4,7
 c001620:	2080060e 	bge	r4,r2,c00163c <___vfprintf_internal_r+0xae4>
 c001624:	d9002d17 	ldw	r4,180(sp)
 c001628:	d9801e04 	addi	r6,sp,120
 c00162c:	b80b883a 	mov	r5,r23
 c001630:	c0077000 	call	c007700 <__sprint_r>
 c001634:	103e4c1e 	bne	r2,zero,c000f68 <__alt_data_end+0xfc000f68>
 c001638:	d8c02017 	ldw	r3,128(sp)
 c00163c:	d8803117 	ldw	r2,196(sp)
 c001640:	d9002917 	ldw	r4,164(sp)
 c001644:	1100010e 	bge	r2,r4,c00164c <___vfprintf_internal_r+0xaf4>
 c001648:	2005883a 	mov	r2,r4
 c00164c:	d9402f17 	ldw	r5,188(sp)
 c001650:	288b883a 	add	r5,r5,r2
 c001654:	d9402f15 	stw	r5,188(sp)
 c001658:	1801c01e 	bne	r3,zero,c001d5c <___vfprintf_internal_r+0x1204>
 c00165c:	a8800007 	ldb	r2,0(r21)
 c001660:	d8001f15 	stw	zero,124(sp)
 c001664:	da000404 	addi	r8,sp,16
 c001668:	103d751e 	bne	r2,zero,c000c40 <__alt_data_end+0xfc000c40>
 c00166c:	a823883a 	mov	r17,r21
 c001670:	003d8b06 	br	c000ca0 <__alt_data_end+0xfc000ca0>
 c001674:	8025883a 	mov	r18,r16
 c001678:	dc002903 	ldbu	r16,164(sp)
 c00167c:	e011883a 	mov	r8,fp
 c001680:	84003fcc 	andi	r16,r16,255
 c001684:	8005e51e 	bne	r16,zero,c002e1c <___vfprintf_internal_r+0x22c4>
 c001688:	94800414 	ori	r18,r18,16
 c00168c:	9080080c 	andi	r2,r18,32
 c001690:	10022b26 	beq	r2,zero,c001f40 <___vfprintf_internal_r+0x13e8>
 c001694:	d9002e17 	ldw	r4,184(sp)
 c001698:	d9402a17 	ldw	r5,168(sp)
 c00169c:	d8002785 	stb	zero,158(sp)
 c0016a0:	20c00204 	addi	r3,r4,8
 c0016a4:	24c00017 	ldw	r19,0(r4)
 c0016a8:	25800117 	ldw	r22,4(r4)
 c0016ac:	28042e16 	blt	r5,zero,c002768 <___vfprintf_internal_r+0x1c10>
 c0016b0:	013fdfc4 	movi	r4,-129
 c0016b4:	9d84b03a 	or	r2,r19,r22
 c0016b8:	d8c02e15 	stw	r3,184(sp)
 c0016bc:	9124703a 	and	r18,r18,r4
 c0016c0:	0039883a 	mov	fp,zero
 c0016c4:	103e801e 	bne	r2,zero,c0010c8 <__alt_data_end+0xfc0010c8>
 c0016c8:	d9002a17 	ldw	r4,168(sp)
 c0016cc:	2002e01e 	bne	r4,zero,c002250 <___vfprintf_internal_r+0x16f8>
 c0016d0:	d8002a15 	stw	zero,168(sp)
 c0016d4:	d8002b15 	stw	zero,172(sp)
 c0016d8:	dc001e04 	addi	r16,sp,120
 c0016dc:	003ef506 	br	c0012b4 <__alt_data_end+0xfc0012b4>
 c0016e0:	8025883a 	mov	r18,r16
 c0016e4:	dc002903 	ldbu	r16,164(sp)
 c0016e8:	e011883a 	mov	r8,fp
 c0016ec:	84003fcc 	andi	r16,r16,255
 c0016f0:	8005ba1e 	bne	r16,zero,c002ddc <___vfprintf_internal_r+0x2284>
 c0016f4:	01030074 	movhi	r4,3073
 c0016f8:	21009004 	addi	r4,r4,576
 c0016fc:	d9003915 	stw	r4,228(sp)
 c001700:	9080080c 	andi	r2,r18,32
 c001704:	10006126 	beq	r2,zero,c00188c <___vfprintf_internal_r+0xd34>
 c001708:	d9402e17 	ldw	r5,184(sp)
 c00170c:	2cc00017 	ldw	r19,0(r5)
 c001710:	2d800117 	ldw	r22,4(r5)
 c001714:	29400204 	addi	r5,r5,8
 c001718:	d9402e15 	stw	r5,184(sp)
 c00171c:	9080004c 	andi	r2,r18,1
 c001720:	1001ac26 	beq	r2,zero,c001dd4 <___vfprintf_internal_r+0x127c>
 c001724:	9d84b03a 	or	r2,r19,r22
 c001728:	10038526 	beq	r2,zero,c002540 <___vfprintf_internal_r+0x19e8>
 c00172c:	d8c02a17 	ldw	r3,168(sp)
 c001730:	00800c04 	movi	r2,48
 c001734:	d8802705 	stb	r2,156(sp)
 c001738:	dc402745 	stb	r17,157(sp)
 c00173c:	d8002785 	stb	zero,158(sp)
 c001740:	90800094 	ori	r2,r18,2
 c001744:	18047916 	blt	r3,zero,c00292c <___vfprintf_internal_r+0x1dd4>
 c001748:	00bfdfc4 	movi	r2,-129
 c00174c:	90a4703a 	and	r18,r18,r2
 c001750:	94800094 	ori	r18,r18,2
 c001754:	0039883a 	mov	fp,zero
 c001758:	d9003917 	ldw	r4,228(sp)
 c00175c:	dc001e04 	addi	r16,sp,120
 c001760:	988003cc 	andi	r2,r19,15
 c001764:	b006973a 	slli	r3,r22,28
 c001768:	2085883a 	add	r2,r4,r2
 c00176c:	9826d13a 	srli	r19,r19,4
 c001770:	10800003 	ldbu	r2,0(r2)
 c001774:	b02cd13a 	srli	r22,r22,4
 c001778:	843fffc4 	addi	r16,r16,-1
 c00177c:	1ce6b03a 	or	r19,r3,r19
 c001780:	80800005 	stb	r2,0(r16)
 c001784:	9d84b03a 	or	r2,r19,r22
 c001788:	103ff51e 	bne	r2,zero,c001760 <__alt_data_end+0xfc001760>
 c00178c:	d8c02817 	ldw	r3,160(sp)
 c001790:	1c07c83a 	sub	r3,r3,r16
 c001794:	d8c02b15 	stw	r3,172(sp)
 c001798:	003ec606 	br	c0012b4 <__alt_data_end+0xfc0012b4>
 c00179c:	8025883a 	mov	r18,r16
 c0017a0:	dc002903 	ldbu	r16,164(sp)
 c0017a4:	e011883a 	mov	r8,fp
 c0017a8:	84003fcc 	andi	r16,r16,255
 c0017ac:	803e9626 	beq	r16,zero,c001208 <__alt_data_end+0xfc001208>
 c0017b0:	d8c02b03 	ldbu	r3,172(sp)
 c0017b4:	d8c02785 	stb	r3,158(sp)
 c0017b8:	003e9306 	br	c001208 <__alt_data_end+0xfc001208>
 c0017bc:	00c00044 	movi	r3,1
 c0017c0:	d8c02905 	stb	r3,164(sp)
 c0017c4:	00c00ac4 	movi	r3,43
 c0017c8:	d8c02b05 	stb	r3,172(sp)
 c0017cc:	ac400007 	ldb	r17,0(r21)
 c0017d0:	003d4306 	br	c000ce0 <__alt_data_end+0xfc000ce0>
 c0017d4:	84000814 	ori	r16,r16,32
 c0017d8:	ac400007 	ldb	r17,0(r21)
 c0017dc:	003d4006 	br	c000ce0 <__alt_data_end+0xfc000ce0>
 c0017e0:	d8802e17 	ldw	r2,184(sp)
 c0017e4:	8025883a 	mov	r18,r16
 c0017e8:	d8002785 	stb	zero,158(sp)
 c0017ec:	14000017 	ldw	r16,0(r2)
 c0017f0:	e011883a 	mov	r8,fp
 c0017f4:	14c00104 	addi	r19,r2,4
 c0017f8:	80042d26 	beq	r16,zero,c0028b0 <___vfprintf_internal_r+0x1d58>
 c0017fc:	d8c02a17 	ldw	r3,168(sp)
 c001800:	1803e416 	blt	r3,zero,c002794 <___vfprintf_internal_r+0x1c3c>
 c001804:	180d883a 	mov	r6,r3
 c001808:	000b883a 	mov	r5,zero
 c00180c:	8009883a 	mov	r4,r16
 c001810:	df003d15 	stw	fp,244(sp)
 c001814:	c005fc80 	call	c005fc8 <memchr>
 c001818:	da003d17 	ldw	r8,244(sp)
 c00181c:	10046826 	beq	r2,zero,c0029c0 <___vfprintf_internal_r+0x1e68>
 c001820:	1405c83a 	sub	r2,r2,r16
 c001824:	d8802b15 	stw	r2,172(sp)
 c001828:	1003e016 	blt	r2,zero,c0027ac <___vfprintf_internal_r+0x1c54>
 c00182c:	df002783 	ldbu	fp,158(sp)
 c001830:	d8802915 	stw	r2,164(sp)
 c001834:	dcc02e15 	stw	r19,184(sp)
 c001838:	d8002a15 	stw	zero,168(sp)
 c00183c:	d8003215 	stw	zero,200(sp)
 c001840:	003ea206 	br	c0012cc <__alt_data_end+0xfc0012cc>
 c001844:	8025883a 	mov	r18,r16
 c001848:	dc002903 	ldbu	r16,164(sp)
 c00184c:	e011883a 	mov	r8,fp
 c001850:	84003fcc 	andi	r16,r16,255
 c001854:	803f8d26 	beq	r16,zero,c00168c <__alt_data_end+0xfc00168c>
 c001858:	d8c02b03 	ldbu	r3,172(sp)
 c00185c:	d8c02785 	stb	r3,158(sp)
 c001860:	003f8a06 	br	c00168c <__alt_data_end+0xfc00168c>
 c001864:	8025883a 	mov	r18,r16
 c001868:	dc002903 	ldbu	r16,164(sp)
 c00186c:	e011883a 	mov	r8,fp
 c001870:	84003fcc 	andi	r16,r16,255
 c001874:	8005661e 	bne	r16,zero,c002e10 <___vfprintf_internal_r+0x22b8>
 c001878:	01030074 	movhi	r4,3073
 c00187c:	21009504 	addi	r4,r4,596
 c001880:	d9003915 	stw	r4,228(sp)
 c001884:	9080080c 	andi	r2,r18,32
 c001888:	103f9f1e 	bne	r2,zero,c001708 <__alt_data_end+0xfc001708>
 c00188c:	9080040c 	andi	r2,r18,16
 c001890:	1002eb26 	beq	r2,zero,c002440 <___vfprintf_internal_r+0x18e8>
 c001894:	d8802e17 	ldw	r2,184(sp)
 c001898:	002d883a 	mov	r22,zero
 c00189c:	14c00017 	ldw	r19,0(r2)
 c0018a0:	10800104 	addi	r2,r2,4
 c0018a4:	d8802e15 	stw	r2,184(sp)
 c0018a8:	003f9c06 	br	c00171c <__alt_data_end+0xfc00171c>
 c0018ac:	d8802b07 	ldb	r2,172(sp)
 c0018b0:	1002e11e 	bne	r2,zero,c002438 <___vfprintf_internal_r+0x18e0>
 c0018b4:	00c00044 	movi	r3,1
 c0018b8:	d8c02905 	stb	r3,164(sp)
 c0018bc:	00c00804 	movi	r3,32
 c0018c0:	d8c02b05 	stb	r3,172(sp)
 c0018c4:	ac400007 	ldb	r17,0(r21)
 c0018c8:	003d0506 	br	c000ce0 <__alt_data_end+0xfc000ce0>
 c0018cc:	84000054 	ori	r16,r16,1
 c0018d0:	ac400007 	ldb	r17,0(r21)
 c0018d4:	003d0206 	br	c000ce0 <__alt_data_end+0xfc000ce0>
 c0018d8:	8025883a 	mov	r18,r16
 c0018dc:	dc002903 	ldbu	r16,164(sp)
 c0018e0:	e011883a 	mov	r8,fp
 c0018e4:	84003fcc 	andi	r16,r16,255
 c0018e8:	803de726 	beq	r16,zero,c001088 <__alt_data_end+0xfc001088>
 c0018ec:	d8c02b03 	ldbu	r3,172(sp)
 c0018f0:	d8c02785 	stb	r3,158(sp)
 c0018f4:	003de406 	br	c001088 <__alt_data_end+0xfc001088>
 c0018f8:	84001014 	ori	r16,r16,64
 c0018fc:	ac400007 	ldb	r17,0(r21)
 c001900:	003cf706 	br	c000ce0 <__alt_data_end+0xfc000ce0>
 c001904:	ac400007 	ldb	r17,0(r21)
 c001908:	00801b04 	movi	r2,108
 c00190c:	88838f26 	beq	r17,r2,c00274c <___vfprintf_internal_r+0x1bf4>
 c001910:	84000414 	ori	r16,r16,16
 c001914:	003cf206 	br	c000ce0 <__alt_data_end+0xfc000ce0>
 c001918:	8025883a 	mov	r18,r16
 c00191c:	dc002903 	ldbu	r16,164(sp)
 c001920:	e011883a 	mov	r8,fp
 c001924:	84003fcc 	andi	r16,r16,255
 c001928:	80053f1e 	bne	r16,zero,c002e28 <___vfprintf_internal_r+0x22d0>
 c00192c:	9080080c 	andi	r2,r18,32
 c001930:	1002d226 	beq	r2,zero,c00247c <___vfprintf_internal_r+0x1924>
 c001934:	d9002e17 	ldw	r4,184(sp)
 c001938:	d9402f17 	ldw	r5,188(sp)
 c00193c:	20800017 	ldw	r2,0(r4)
 c001940:	2807d7fa 	srai	r3,r5,31
 c001944:	21000104 	addi	r4,r4,4
 c001948:	d9002e15 	stw	r4,184(sp)
 c00194c:	11400015 	stw	r5,0(r2)
 c001950:	10c00115 	stw	r3,4(r2)
 c001954:	003cb806 	br	c000c38 <__alt_data_end+0xfc000c38>
 c001958:	d8c02e17 	ldw	r3,184(sp)
 c00195c:	d9002e17 	ldw	r4,184(sp)
 c001960:	8025883a 	mov	r18,r16
 c001964:	18800017 	ldw	r2,0(r3)
 c001968:	21000104 	addi	r4,r4,4
 c00196c:	00c00044 	movi	r3,1
 c001970:	e011883a 	mov	r8,fp
 c001974:	d8c02915 	stw	r3,164(sp)
 c001978:	d8002785 	stb	zero,158(sp)
 c00197c:	d8801405 	stb	r2,80(sp)
 c001980:	d9002e15 	stw	r4,184(sp)
 c001984:	d8c02b15 	stw	r3,172(sp)
 c001988:	d8002a15 	stw	zero,168(sp)
 c00198c:	d8003215 	stw	zero,200(sp)
 c001990:	dc001404 	addi	r16,sp,80
 c001994:	0039883a 	mov	fp,zero
 c001998:	003e5306 	br	c0012e8 <__alt_data_end+0xfc0012e8>
 c00199c:	01030074 	movhi	r4,3073
 c0019a0:	21009504 	addi	r4,r4,596
 c0019a4:	0039883a 	mov	fp,zero
 c0019a8:	d9003915 	stw	r4,228(sp)
 c0019ac:	04401e04 	movi	r17,120
 c0019b0:	003f6906 	br	c001758 <__alt_data_end+0xfc001758>
 c0019b4:	8025883a 	mov	r18,r16
 c0019b8:	dc002903 	ldbu	r16,164(sp)
 c0019bc:	e011883a 	mov	r8,fp
 c0019c0:	84003fcc 	andi	r16,r16,255
 c0019c4:	8005081e 	bne	r16,zero,c002de8 <___vfprintf_internal_r+0x2290>
 c0019c8:	883d6126 	beq	r17,zero,c000f50 <__alt_data_end+0xfc000f50>
 c0019cc:	00c00044 	movi	r3,1
 c0019d0:	d8c02915 	stw	r3,164(sp)
 c0019d4:	dc401405 	stb	r17,80(sp)
 c0019d8:	d8002785 	stb	zero,158(sp)
 c0019dc:	003fe906 	br	c001984 <__alt_data_end+0xfc001984>
 c0019e0:	01430074 	movhi	r5,3073
 c0019e4:	29409504 	addi	r5,r5,596
 c0019e8:	d9403915 	stw	r5,228(sp)
 c0019ec:	d8c02e15 	stw	r3,184(sp)
 c0019f0:	1025883a 	mov	r18,r2
 c0019f4:	04401e04 	movi	r17,120
 c0019f8:	9d84b03a 	or	r2,r19,r22
 c0019fc:	1000fc1e 	bne	r2,zero,c001df0 <___vfprintf_internal_r+0x1298>
 c001a00:	0039883a 	mov	fp,zero
 c001a04:	00800084 	movi	r2,2
 c001a08:	10803fcc 	andi	r2,r2,255
 c001a0c:	00c00044 	movi	r3,1
 c001a10:	10c20f26 	beq	r2,r3,c002250 <___vfprintf_internal_r+0x16f8>
 c001a14:	00c00084 	movi	r3,2
 c001a18:	10fd3326 	beq	r2,r3,c000ee8 <__alt_data_end+0xfc000ee8>
 c001a1c:	003e0b06 	br	c00124c <__alt_data_end+0xfc00124c>
 c001a20:	d8c02017 	ldw	r3,128(sp)
 c001a24:	003e7106 	br	c0013ec <__alt_data_end+0xfc0013ec>
 c001a28:	00801944 	movi	r2,101
 c001a2c:	14407e0e 	bge	r2,r17,c001c28 <___vfprintf_internal_r+0x10d0>
 c001a30:	d9003617 	ldw	r4,216(sp)
 c001a34:	d9403817 	ldw	r5,224(sp)
 c001a38:	000d883a 	mov	r6,zero
 c001a3c:	000f883a 	mov	r7,zero
 c001a40:	d8c03c15 	stw	r3,240(sp)
 c001a44:	da003d15 	stw	r8,244(sp)
 c001a48:	c00c1c00 	call	c00c1c0 <__eqdf2>
 c001a4c:	d8c03c17 	ldw	r3,240(sp)
 c001a50:	da003d17 	ldw	r8,244(sp)
 c001a54:	1000f71e 	bne	r2,zero,c001e34 <___vfprintf_internal_r+0x12dc>
 c001a58:	d8801f17 	ldw	r2,124(sp)
 c001a5c:	01030074 	movhi	r4,3073
 c001a60:	21009c04 	addi	r4,r4,624
 c001a64:	18c00044 	addi	r3,r3,1
 c001a68:	10800044 	addi	r2,r2,1
 c001a6c:	41000015 	stw	r4,0(r8)
 c001a70:	01000044 	movi	r4,1
 c001a74:	41000115 	stw	r4,4(r8)
 c001a78:	d8c02015 	stw	r3,128(sp)
 c001a7c:	d8801f15 	stw	r2,124(sp)
 c001a80:	010001c4 	movi	r4,7
 c001a84:	2082b816 	blt	r4,r2,c002568 <___vfprintf_internal_r+0x1a10>
 c001a88:	42000204 	addi	r8,r8,8
 c001a8c:	d8802617 	ldw	r2,152(sp)
 c001a90:	d9403317 	ldw	r5,204(sp)
 c001a94:	11400216 	blt	r2,r5,c001aa0 <___vfprintf_internal_r+0xf48>
 c001a98:	9080004c 	andi	r2,r18,1
 c001a9c:	103eb326 	beq	r2,zero,c00156c <__alt_data_end+0xfc00156c>
 c001aa0:	d8803717 	ldw	r2,220(sp)
 c001aa4:	d9003417 	ldw	r4,208(sp)
 c001aa8:	d9403717 	ldw	r5,220(sp)
 c001aac:	1887883a 	add	r3,r3,r2
 c001ab0:	d8801f17 	ldw	r2,124(sp)
 c001ab4:	41000015 	stw	r4,0(r8)
 c001ab8:	41400115 	stw	r5,4(r8)
 c001abc:	10800044 	addi	r2,r2,1
 c001ac0:	d8c02015 	stw	r3,128(sp)
 c001ac4:	d8801f15 	stw	r2,124(sp)
 c001ac8:	010001c4 	movi	r4,7
 c001acc:	20832916 	blt	r4,r2,c002774 <___vfprintf_internal_r+0x1c1c>
 c001ad0:	42000204 	addi	r8,r8,8
 c001ad4:	d8803317 	ldw	r2,204(sp)
 c001ad8:	143fffc4 	addi	r16,r2,-1
 c001adc:	043ea30e 	bge	zero,r16,c00156c <__alt_data_end+0xfc00156c>
 c001ae0:	04400404 	movi	r17,16
 c001ae4:	d8801f17 	ldw	r2,124(sp)
 c001ae8:	8c00880e 	bge	r17,r16,c001d0c <___vfprintf_internal_r+0x11b4>
 c001aec:	01430074 	movhi	r5,3073
 c001af0:	29409c84 	addi	r5,r5,626
 c001af4:	d9402c15 	stw	r5,176(sp)
 c001af8:	058001c4 	movi	r22,7
 c001afc:	dcc02d17 	ldw	r19,180(sp)
 c001b00:	00000306 	br	c001b10 <___vfprintf_internal_r+0xfb8>
 c001b04:	42000204 	addi	r8,r8,8
 c001b08:	843ffc04 	addi	r16,r16,-16
 c001b0c:	8c00820e 	bge	r17,r16,c001d18 <___vfprintf_internal_r+0x11c0>
 c001b10:	18c00404 	addi	r3,r3,16
 c001b14:	10800044 	addi	r2,r2,1
 c001b18:	45000015 	stw	r20,0(r8)
 c001b1c:	44400115 	stw	r17,4(r8)
 c001b20:	d8c02015 	stw	r3,128(sp)
 c001b24:	d8801f15 	stw	r2,124(sp)
 c001b28:	b0bff60e 	bge	r22,r2,c001b04 <__alt_data_end+0xfc001b04>
 c001b2c:	d9801e04 	addi	r6,sp,120
 c001b30:	b80b883a 	mov	r5,r23
 c001b34:	9809883a 	mov	r4,r19
 c001b38:	c0077000 	call	c007700 <__sprint_r>
 c001b3c:	103d0a1e 	bne	r2,zero,c000f68 <__alt_data_end+0xfc000f68>
 c001b40:	d8c02017 	ldw	r3,128(sp)
 c001b44:	d8801f17 	ldw	r2,124(sp)
 c001b48:	da000404 	addi	r8,sp,16
 c001b4c:	003fee06 	br	c001b08 <__alt_data_end+0xfc001b08>
 c001b50:	d9403117 	ldw	r5,196(sp)
 c001b54:	d8802917 	ldw	r2,164(sp)
 c001b58:	28adc83a 	sub	r22,r5,r2
 c001b5c:	05be410e 	bge	zero,r22,c001464 <__alt_data_end+0xfc001464>
 c001b60:	07000404 	movi	fp,16
 c001b64:	d8801f17 	ldw	r2,124(sp)
 c001b68:	e5838f0e 	bge	fp,r22,c0029a8 <___vfprintf_internal_r+0x1e50>
 c001b6c:	01430074 	movhi	r5,3073
 c001b70:	29409c84 	addi	r5,r5,626
 c001b74:	dc403015 	stw	r17,192(sp)
 c001b78:	d9402c15 	stw	r5,176(sp)
 c001b7c:	b023883a 	mov	r17,r22
 c001b80:	04c001c4 	movi	r19,7
 c001b84:	a82d883a 	mov	r22,r21
 c001b88:	902b883a 	mov	r21,r18
 c001b8c:	8025883a 	mov	r18,r16
 c001b90:	dc002d17 	ldw	r16,180(sp)
 c001b94:	00000306 	br	c001ba4 <___vfprintf_internal_r+0x104c>
 c001b98:	8c7ffc04 	addi	r17,r17,-16
 c001b9c:	42000204 	addi	r8,r8,8
 c001ba0:	e440110e 	bge	fp,r17,c001be8 <___vfprintf_internal_r+0x1090>
 c001ba4:	18c00404 	addi	r3,r3,16
 c001ba8:	10800044 	addi	r2,r2,1
 c001bac:	45000015 	stw	r20,0(r8)
 c001bb0:	47000115 	stw	fp,4(r8)
 c001bb4:	d8c02015 	stw	r3,128(sp)
 c001bb8:	d8801f15 	stw	r2,124(sp)
 c001bbc:	98bff60e 	bge	r19,r2,c001b98 <__alt_data_end+0xfc001b98>
 c001bc0:	d9801e04 	addi	r6,sp,120
 c001bc4:	b80b883a 	mov	r5,r23
 c001bc8:	8009883a 	mov	r4,r16
 c001bcc:	c0077000 	call	c007700 <__sprint_r>
 c001bd0:	103ce51e 	bne	r2,zero,c000f68 <__alt_data_end+0xfc000f68>
 c001bd4:	8c7ffc04 	addi	r17,r17,-16
 c001bd8:	d8c02017 	ldw	r3,128(sp)
 c001bdc:	d8801f17 	ldw	r2,124(sp)
 c001be0:	da000404 	addi	r8,sp,16
 c001be4:	e47fef16 	blt	fp,r17,c001ba4 <__alt_data_end+0xfc001ba4>
 c001be8:	9021883a 	mov	r16,r18
 c001bec:	a825883a 	mov	r18,r21
 c001bf0:	b02b883a 	mov	r21,r22
 c001bf4:	882d883a 	mov	r22,r17
 c001bf8:	dc403017 	ldw	r17,192(sp)
 c001bfc:	d9002c17 	ldw	r4,176(sp)
 c001c00:	1d87883a 	add	r3,r3,r22
 c001c04:	10800044 	addi	r2,r2,1
 c001c08:	41000015 	stw	r4,0(r8)
 c001c0c:	45800115 	stw	r22,4(r8)
 c001c10:	d8c02015 	stw	r3,128(sp)
 c001c14:	d8801f15 	stw	r2,124(sp)
 c001c18:	010001c4 	movi	r4,7
 c001c1c:	20818e16 	blt	r4,r2,c002258 <___vfprintf_internal_r+0x1700>
 c001c20:	42000204 	addi	r8,r8,8
 c001c24:	003e0f06 	br	c001464 <__alt_data_end+0xfc001464>
 c001c28:	d9403317 	ldw	r5,204(sp)
 c001c2c:	00800044 	movi	r2,1
 c001c30:	18c00044 	addi	r3,r3,1
 c001c34:	1141530e 	bge	r2,r5,c002184 <___vfprintf_internal_r+0x162c>
 c001c38:	dc401f17 	ldw	r17,124(sp)
 c001c3c:	00800044 	movi	r2,1
 c001c40:	40800115 	stw	r2,4(r8)
 c001c44:	8c400044 	addi	r17,r17,1
 c001c48:	44000015 	stw	r16,0(r8)
 c001c4c:	d8c02015 	stw	r3,128(sp)
 c001c50:	dc401f15 	stw	r17,124(sp)
 c001c54:	008001c4 	movi	r2,7
 c001c58:	14416b16 	blt	r2,r17,c002208 <___vfprintf_internal_r+0x16b0>
 c001c5c:	42000204 	addi	r8,r8,8
 c001c60:	d8803717 	ldw	r2,220(sp)
 c001c64:	d9003417 	ldw	r4,208(sp)
 c001c68:	8c400044 	addi	r17,r17,1
 c001c6c:	10c7883a 	add	r3,r2,r3
 c001c70:	40800115 	stw	r2,4(r8)
 c001c74:	41000015 	stw	r4,0(r8)
 c001c78:	d8c02015 	stw	r3,128(sp)
 c001c7c:	dc401f15 	stw	r17,124(sp)
 c001c80:	008001c4 	movi	r2,7
 c001c84:	14416916 	blt	r2,r17,c00222c <___vfprintf_internal_r+0x16d4>
 c001c88:	45800204 	addi	r22,r8,8
 c001c8c:	d9003617 	ldw	r4,216(sp)
 c001c90:	d9403817 	ldw	r5,224(sp)
 c001c94:	000d883a 	mov	r6,zero
 c001c98:	000f883a 	mov	r7,zero
 c001c9c:	d8c03c15 	stw	r3,240(sp)
 c001ca0:	c00c1c00 	call	c00c1c0 <__eqdf2>
 c001ca4:	d8c03c17 	ldw	r3,240(sp)
 c001ca8:	1000bc26 	beq	r2,zero,c001f9c <___vfprintf_internal_r+0x1444>
 c001cac:	d9403317 	ldw	r5,204(sp)
 c001cb0:	84000044 	addi	r16,r16,1
 c001cb4:	8c400044 	addi	r17,r17,1
 c001cb8:	28bfffc4 	addi	r2,r5,-1
 c001cbc:	1887883a 	add	r3,r3,r2
 c001cc0:	b0800115 	stw	r2,4(r22)
 c001cc4:	b4000015 	stw	r16,0(r22)
 c001cc8:	d8c02015 	stw	r3,128(sp)
 c001ccc:	dc401f15 	stw	r17,124(sp)
 c001cd0:	008001c4 	movi	r2,7
 c001cd4:	14414316 	blt	r2,r17,c0021e4 <___vfprintf_internal_r+0x168c>
 c001cd8:	b5800204 	addi	r22,r22,8
 c001cdc:	d9003a17 	ldw	r4,232(sp)
 c001ce0:	df0022c4 	addi	fp,sp,139
 c001ce4:	8c400044 	addi	r17,r17,1
 c001ce8:	20c7883a 	add	r3,r4,r3
 c001cec:	b7000015 	stw	fp,0(r22)
 c001cf0:	b1000115 	stw	r4,4(r22)
 c001cf4:	d8c02015 	stw	r3,128(sp)
 c001cf8:	dc401f15 	stw	r17,124(sp)
 c001cfc:	008001c4 	movi	r2,7
 c001d00:	14400e16 	blt	r2,r17,c001d3c <___vfprintf_internal_r+0x11e4>
 c001d04:	b2000204 	addi	r8,r22,8
 c001d08:	003e1806 	br	c00156c <__alt_data_end+0xfc00156c>
 c001d0c:	01030074 	movhi	r4,3073
 c001d10:	21009c84 	addi	r4,r4,626
 c001d14:	d9002c15 	stw	r4,176(sp)
 c001d18:	d9002c17 	ldw	r4,176(sp)
 c001d1c:	1c07883a 	add	r3,r3,r16
 c001d20:	44000115 	stw	r16,4(r8)
 c001d24:	41000015 	stw	r4,0(r8)
 c001d28:	10800044 	addi	r2,r2,1
 c001d2c:	d8c02015 	stw	r3,128(sp)
 c001d30:	d8801f15 	stw	r2,124(sp)
 c001d34:	010001c4 	movi	r4,7
 c001d38:	20be0b0e 	bge	r4,r2,c001568 <__alt_data_end+0xfc001568>
 c001d3c:	d9002d17 	ldw	r4,180(sp)
 c001d40:	d9801e04 	addi	r6,sp,120
 c001d44:	b80b883a 	mov	r5,r23
 c001d48:	c0077000 	call	c007700 <__sprint_r>
 c001d4c:	103c861e 	bne	r2,zero,c000f68 <__alt_data_end+0xfc000f68>
 c001d50:	d8c02017 	ldw	r3,128(sp)
 c001d54:	da000404 	addi	r8,sp,16
 c001d58:	003e0406 	br	c00156c <__alt_data_end+0xfc00156c>
 c001d5c:	d9002d17 	ldw	r4,180(sp)
 c001d60:	d9801e04 	addi	r6,sp,120
 c001d64:	b80b883a 	mov	r5,r23
 c001d68:	c0077000 	call	c007700 <__sprint_r>
 c001d6c:	103e3b26 	beq	r2,zero,c00165c <__alt_data_end+0xfc00165c>
 c001d70:	003c7d06 	br	c000f68 <__alt_data_end+0xfc000f68>
 c001d74:	d9002d17 	ldw	r4,180(sp)
 c001d78:	d9801e04 	addi	r6,sp,120
 c001d7c:	b80b883a 	mov	r5,r23
 c001d80:	c0077000 	call	c007700 <__sprint_r>
 c001d84:	103c781e 	bne	r2,zero,c000f68 <__alt_data_end+0xfc000f68>
 c001d88:	d8c02017 	ldw	r3,128(sp)
 c001d8c:	da000404 	addi	r8,sp,16
 c001d90:	003de906 	br	c001538 <__alt_data_end+0xfc001538>
 c001d94:	d9002d17 	ldw	r4,180(sp)
 c001d98:	d9801e04 	addi	r6,sp,120
 c001d9c:	b80b883a 	mov	r5,r23
 c001da0:	c0077000 	call	c007700 <__sprint_r>
 c001da4:	103c701e 	bne	r2,zero,c000f68 <__alt_data_end+0xfc000f68>
 c001da8:	d8c02017 	ldw	r3,128(sp)
 c001dac:	da000404 	addi	r8,sp,16
 c001db0:	003d9b06 	br	c001420 <__alt_data_end+0xfc001420>
 c001db4:	d9002d17 	ldw	r4,180(sp)
 c001db8:	d9801e04 	addi	r6,sp,120
 c001dbc:	b80b883a 	mov	r5,r23
 c001dc0:	c0077000 	call	c007700 <__sprint_r>
 c001dc4:	103c681e 	bne	r2,zero,c000f68 <__alt_data_end+0xfc000f68>
 c001dc8:	d8c02017 	ldw	r3,128(sp)
 c001dcc:	da000404 	addi	r8,sp,16
 c001dd0:	003da106 	br	c001458 <__alt_data_end+0xfc001458>
 c001dd4:	d9402a17 	ldw	r5,168(sp)
 c001dd8:	d8002785 	stb	zero,158(sp)
 c001ddc:	283f0616 	blt	r5,zero,c0019f8 <__alt_data_end+0xfc0019f8>
 c001de0:	00ffdfc4 	movi	r3,-129
 c001de4:	9d84b03a 	or	r2,r19,r22
 c001de8:	90e4703a 	and	r18,r18,r3
 c001dec:	103c3b26 	beq	r2,zero,c000edc <__alt_data_end+0xfc000edc>
 c001df0:	0039883a 	mov	fp,zero
 c001df4:	003e5806 	br	c001758 <__alt_data_end+0xfc001758>
 c001df8:	9080040c 	andi	r2,r18,16
 c001dfc:	1001b326 	beq	r2,zero,c0024cc <___vfprintf_internal_r+0x1974>
 c001e00:	d8c02e17 	ldw	r3,184(sp)
 c001e04:	d9002a17 	ldw	r4,168(sp)
 c001e08:	d8002785 	stb	zero,158(sp)
 c001e0c:	18800104 	addi	r2,r3,4
 c001e10:	1cc00017 	ldw	r19,0(r3)
 c001e14:	002d883a 	mov	r22,zero
 c001e18:	2001b516 	blt	r4,zero,c0024f0 <___vfprintf_internal_r+0x1998>
 c001e1c:	00ffdfc4 	movi	r3,-129
 c001e20:	d8802e15 	stw	r2,184(sp)
 c001e24:	90e4703a 	and	r18,r18,r3
 c001e28:	983d0526 	beq	r19,zero,c001240 <__alt_data_end+0xfc001240>
 c001e2c:	0039883a 	mov	fp,zero
 c001e30:	003d0806 	br	c001254 <__alt_data_end+0xfc001254>
 c001e34:	dc402617 	ldw	r17,152(sp)
 c001e38:	0441d30e 	bge	zero,r17,c002588 <___vfprintf_internal_r+0x1a30>
 c001e3c:	dc403217 	ldw	r17,200(sp)
 c001e40:	d8803317 	ldw	r2,204(sp)
 c001e44:	1440010e 	bge	r2,r17,c001e4c <___vfprintf_internal_r+0x12f4>
 c001e48:	1023883a 	mov	r17,r2
 c001e4c:	04400a0e 	bge	zero,r17,c001e78 <___vfprintf_internal_r+0x1320>
 c001e50:	d8801f17 	ldw	r2,124(sp)
 c001e54:	1c47883a 	add	r3,r3,r17
 c001e58:	44000015 	stw	r16,0(r8)
 c001e5c:	10800044 	addi	r2,r2,1
 c001e60:	44400115 	stw	r17,4(r8)
 c001e64:	d8c02015 	stw	r3,128(sp)
 c001e68:	d8801f15 	stw	r2,124(sp)
 c001e6c:	010001c4 	movi	r4,7
 c001e70:	20826516 	blt	r4,r2,c002808 <___vfprintf_internal_r+0x1cb0>
 c001e74:	42000204 	addi	r8,r8,8
 c001e78:	88026116 	blt	r17,zero,c002800 <___vfprintf_internal_r+0x1ca8>
 c001e7c:	d9003217 	ldw	r4,200(sp)
 c001e80:	2463c83a 	sub	r17,r4,r17
 c001e84:	04407b0e 	bge	zero,r17,c002074 <___vfprintf_internal_r+0x151c>
 c001e88:	05800404 	movi	r22,16
 c001e8c:	d8801f17 	ldw	r2,124(sp)
 c001e90:	b4419d0e 	bge	r22,r17,c002508 <___vfprintf_internal_r+0x19b0>
 c001e94:	01030074 	movhi	r4,3073
 c001e98:	21009c84 	addi	r4,r4,626
 c001e9c:	d9002c15 	stw	r4,176(sp)
 c001ea0:	070001c4 	movi	fp,7
 c001ea4:	dcc02d17 	ldw	r19,180(sp)
 c001ea8:	00000306 	br	c001eb8 <___vfprintf_internal_r+0x1360>
 c001eac:	42000204 	addi	r8,r8,8
 c001eb0:	8c7ffc04 	addi	r17,r17,-16
 c001eb4:	b441970e 	bge	r22,r17,c002514 <___vfprintf_internal_r+0x19bc>
 c001eb8:	18c00404 	addi	r3,r3,16
 c001ebc:	10800044 	addi	r2,r2,1
 c001ec0:	45000015 	stw	r20,0(r8)
 c001ec4:	45800115 	stw	r22,4(r8)
 c001ec8:	d8c02015 	stw	r3,128(sp)
 c001ecc:	d8801f15 	stw	r2,124(sp)
 c001ed0:	e0bff60e 	bge	fp,r2,c001eac <__alt_data_end+0xfc001eac>
 c001ed4:	d9801e04 	addi	r6,sp,120
 c001ed8:	b80b883a 	mov	r5,r23
 c001edc:	9809883a 	mov	r4,r19
 c001ee0:	c0077000 	call	c007700 <__sprint_r>
 c001ee4:	103c201e 	bne	r2,zero,c000f68 <__alt_data_end+0xfc000f68>
 c001ee8:	d8c02017 	ldw	r3,128(sp)
 c001eec:	d8801f17 	ldw	r2,124(sp)
 c001ef0:	da000404 	addi	r8,sp,16
 c001ef4:	003fee06 	br	c001eb0 <__alt_data_end+0xfc001eb0>
 c001ef8:	d9002d17 	ldw	r4,180(sp)
 c001efc:	d9801e04 	addi	r6,sp,120
 c001f00:	b80b883a 	mov	r5,r23
 c001f04:	c0077000 	call	c007700 <__sprint_r>
 c001f08:	103c171e 	bne	r2,zero,c000f68 <__alt_data_end+0xfc000f68>
 c001f0c:	d8c02017 	ldw	r3,128(sp)
 c001f10:	df002787 	ldb	fp,158(sp)
 c001f14:	da000404 	addi	r8,sp,16
 c001f18:	003d3406 	br	c0013ec <__alt_data_end+0xfc0013ec>
 c001f1c:	9080040c 	andi	r2,r18,16
 c001f20:	10016126 	beq	r2,zero,c0024a8 <___vfprintf_internal_r+0x1950>
 c001f24:	d9402e17 	ldw	r5,184(sp)
 c001f28:	2cc00017 	ldw	r19,0(r5)
 c001f2c:	29400104 	addi	r5,r5,4
 c001f30:	d9402e15 	stw	r5,184(sp)
 c001f34:	982dd7fa 	srai	r22,r19,31
 c001f38:	b005883a 	mov	r2,r22
 c001f3c:	003c5a06 	br	c0010a8 <__alt_data_end+0xfc0010a8>
 c001f40:	9080040c 	andi	r2,r18,16
 c001f44:	10003526 	beq	r2,zero,c00201c <___vfprintf_internal_r+0x14c4>
 c001f48:	d8c02e17 	ldw	r3,184(sp)
 c001f4c:	d9002a17 	ldw	r4,168(sp)
 c001f50:	d8002785 	stb	zero,158(sp)
 c001f54:	18800104 	addi	r2,r3,4
 c001f58:	1cc00017 	ldw	r19,0(r3)
 c001f5c:	002d883a 	mov	r22,zero
 c001f60:	20003716 	blt	r4,zero,c002040 <___vfprintf_internal_r+0x14e8>
 c001f64:	00ffdfc4 	movi	r3,-129
 c001f68:	d8802e15 	stw	r2,184(sp)
 c001f6c:	90e4703a 	and	r18,r18,r3
 c001f70:	0039883a 	mov	fp,zero
 c001f74:	983dd426 	beq	r19,zero,c0016c8 <__alt_data_end+0xfc0016c8>
 c001f78:	00800244 	movi	r2,9
 c001f7c:	14fc5336 	bltu	r2,r19,c0010cc <__alt_data_end+0xfc0010cc>
 c001f80:	d8c02817 	ldw	r3,160(sp)
 c001f84:	dc001dc4 	addi	r16,sp,119
 c001f88:	9cc00c04 	addi	r19,r19,48
 c001f8c:	1c07c83a 	sub	r3,r3,r16
 c001f90:	dcc01dc5 	stb	r19,119(sp)
 c001f94:	d8c02b15 	stw	r3,172(sp)
 c001f98:	003cc606 	br	c0012b4 <__alt_data_end+0xfc0012b4>
 c001f9c:	d8803317 	ldw	r2,204(sp)
 c001fa0:	143fffc4 	addi	r16,r2,-1
 c001fa4:	043f4d0e 	bge	zero,r16,c001cdc <__alt_data_end+0xfc001cdc>
 c001fa8:	07000404 	movi	fp,16
 c001fac:	e400810e 	bge	fp,r16,c0021b4 <___vfprintf_internal_r+0x165c>
 c001fb0:	01430074 	movhi	r5,3073
 c001fb4:	29409c84 	addi	r5,r5,626
 c001fb8:	d9402c15 	stw	r5,176(sp)
 c001fbc:	01c001c4 	movi	r7,7
 c001fc0:	dcc02d17 	ldw	r19,180(sp)
 c001fc4:	00000306 	br	c001fd4 <___vfprintf_internal_r+0x147c>
 c001fc8:	b5800204 	addi	r22,r22,8
 c001fcc:	843ffc04 	addi	r16,r16,-16
 c001fd0:	e4007b0e 	bge	fp,r16,c0021c0 <___vfprintf_internal_r+0x1668>
 c001fd4:	18c00404 	addi	r3,r3,16
 c001fd8:	8c400044 	addi	r17,r17,1
 c001fdc:	b5000015 	stw	r20,0(r22)
 c001fe0:	b7000115 	stw	fp,4(r22)
 c001fe4:	d8c02015 	stw	r3,128(sp)
 c001fe8:	dc401f15 	stw	r17,124(sp)
 c001fec:	3c7ff60e 	bge	r7,r17,c001fc8 <__alt_data_end+0xfc001fc8>
 c001ff0:	d9801e04 	addi	r6,sp,120
 c001ff4:	b80b883a 	mov	r5,r23
 c001ff8:	9809883a 	mov	r4,r19
 c001ffc:	d9c03c15 	stw	r7,240(sp)
 c002000:	c0077000 	call	c007700 <__sprint_r>
 c002004:	d9c03c17 	ldw	r7,240(sp)
 c002008:	103bd71e 	bne	r2,zero,c000f68 <__alt_data_end+0xfc000f68>
 c00200c:	d8c02017 	ldw	r3,128(sp)
 c002010:	dc401f17 	ldw	r17,124(sp)
 c002014:	dd800404 	addi	r22,sp,16
 c002018:	003fec06 	br	c001fcc <__alt_data_end+0xfc001fcc>
 c00201c:	9080100c 	andi	r2,r18,64
 c002020:	d8002785 	stb	zero,158(sp)
 c002024:	10010e26 	beq	r2,zero,c002460 <___vfprintf_internal_r+0x1908>
 c002028:	d9402e17 	ldw	r5,184(sp)
 c00202c:	d8c02a17 	ldw	r3,168(sp)
 c002030:	002d883a 	mov	r22,zero
 c002034:	28800104 	addi	r2,r5,4
 c002038:	2cc0000b 	ldhu	r19,0(r5)
 c00203c:	183fc90e 	bge	r3,zero,c001f64 <__alt_data_end+0xfc001f64>
 c002040:	d8802e15 	stw	r2,184(sp)
 c002044:	0039883a 	mov	fp,zero
 c002048:	9d84b03a 	or	r2,r19,r22
 c00204c:	103c1e1e 	bne	r2,zero,c0010c8 <__alt_data_end+0xfc0010c8>
 c002050:	00800044 	movi	r2,1
 c002054:	003e6c06 	br	c001a08 <__alt_data_end+0xfc001a08>
 c002058:	d9002d17 	ldw	r4,180(sp)
 c00205c:	d9801e04 	addi	r6,sp,120
 c002060:	b80b883a 	mov	r5,r23
 c002064:	c0077000 	call	c007700 <__sprint_r>
 c002068:	103bbf1e 	bne	r2,zero,c000f68 <__alt_data_end+0xfc000f68>
 c00206c:	d8c02017 	ldw	r3,128(sp)
 c002070:	da000404 	addi	r8,sp,16
 c002074:	d9003217 	ldw	r4,200(sp)
 c002078:	d8802617 	ldw	r2,152(sp)
 c00207c:	d9403317 	ldw	r5,204(sp)
 c002080:	8123883a 	add	r17,r16,r4
 c002084:	11400216 	blt	r2,r5,c002090 <___vfprintf_internal_r+0x1538>
 c002088:	9100004c 	andi	r4,r18,1
 c00208c:	20000d26 	beq	r4,zero,c0020c4 <___vfprintf_internal_r+0x156c>
 c002090:	d9003717 	ldw	r4,220(sp)
 c002094:	d9403417 	ldw	r5,208(sp)
 c002098:	1907883a 	add	r3,r3,r4
 c00209c:	d9001f17 	ldw	r4,124(sp)
 c0020a0:	41400015 	stw	r5,0(r8)
 c0020a4:	d9403717 	ldw	r5,220(sp)
 c0020a8:	21000044 	addi	r4,r4,1
 c0020ac:	d8c02015 	stw	r3,128(sp)
 c0020b0:	41400115 	stw	r5,4(r8)
 c0020b4:	d9001f15 	stw	r4,124(sp)
 c0020b8:	014001c4 	movi	r5,7
 c0020bc:	2901e816 	blt	r5,r4,c002860 <___vfprintf_internal_r+0x1d08>
 c0020c0:	42000204 	addi	r8,r8,8
 c0020c4:	d9003317 	ldw	r4,204(sp)
 c0020c8:	8121883a 	add	r16,r16,r4
 c0020cc:	2085c83a 	sub	r2,r4,r2
 c0020d0:	8461c83a 	sub	r16,r16,r17
 c0020d4:	1400010e 	bge	r2,r16,c0020dc <___vfprintf_internal_r+0x1584>
 c0020d8:	1021883a 	mov	r16,r2
 c0020dc:	04000a0e 	bge	zero,r16,c002108 <___vfprintf_internal_r+0x15b0>
 c0020e0:	d9001f17 	ldw	r4,124(sp)
 c0020e4:	1c07883a 	add	r3,r3,r16
 c0020e8:	44400015 	stw	r17,0(r8)
 c0020ec:	21000044 	addi	r4,r4,1
 c0020f0:	44000115 	stw	r16,4(r8)
 c0020f4:	d8c02015 	stw	r3,128(sp)
 c0020f8:	d9001f15 	stw	r4,124(sp)
 c0020fc:	014001c4 	movi	r5,7
 c002100:	2901fb16 	blt	r5,r4,c0028f0 <___vfprintf_internal_r+0x1d98>
 c002104:	42000204 	addi	r8,r8,8
 c002108:	8001f716 	blt	r16,zero,c0028e8 <___vfprintf_internal_r+0x1d90>
 c00210c:	1421c83a 	sub	r16,r2,r16
 c002110:	043d160e 	bge	zero,r16,c00156c <__alt_data_end+0xfc00156c>
 c002114:	04400404 	movi	r17,16
 c002118:	d8801f17 	ldw	r2,124(sp)
 c00211c:	8c3efb0e 	bge	r17,r16,c001d0c <__alt_data_end+0xfc001d0c>
 c002120:	01430074 	movhi	r5,3073
 c002124:	29409c84 	addi	r5,r5,626
 c002128:	d9402c15 	stw	r5,176(sp)
 c00212c:	058001c4 	movi	r22,7
 c002130:	dcc02d17 	ldw	r19,180(sp)
 c002134:	00000306 	br	c002144 <___vfprintf_internal_r+0x15ec>
 c002138:	42000204 	addi	r8,r8,8
 c00213c:	843ffc04 	addi	r16,r16,-16
 c002140:	8c3ef50e 	bge	r17,r16,c001d18 <__alt_data_end+0xfc001d18>
 c002144:	18c00404 	addi	r3,r3,16
 c002148:	10800044 	addi	r2,r2,1
 c00214c:	45000015 	stw	r20,0(r8)
 c002150:	44400115 	stw	r17,4(r8)
 c002154:	d8c02015 	stw	r3,128(sp)
 c002158:	d8801f15 	stw	r2,124(sp)
 c00215c:	b0bff60e 	bge	r22,r2,c002138 <__alt_data_end+0xfc002138>
 c002160:	d9801e04 	addi	r6,sp,120
 c002164:	b80b883a 	mov	r5,r23
 c002168:	9809883a 	mov	r4,r19
 c00216c:	c0077000 	call	c007700 <__sprint_r>
 c002170:	103b7d1e 	bne	r2,zero,c000f68 <__alt_data_end+0xfc000f68>
 c002174:	d8c02017 	ldw	r3,128(sp)
 c002178:	d8801f17 	ldw	r2,124(sp)
 c00217c:	da000404 	addi	r8,sp,16
 c002180:	003fee06 	br	c00213c <__alt_data_end+0xfc00213c>
 c002184:	9088703a 	and	r4,r18,r2
 c002188:	203eab1e 	bne	r4,zero,c001c38 <__alt_data_end+0xfc001c38>
 c00218c:	dc401f17 	ldw	r17,124(sp)
 c002190:	40800115 	stw	r2,4(r8)
 c002194:	44000015 	stw	r16,0(r8)
 c002198:	8c400044 	addi	r17,r17,1
 c00219c:	d8c02015 	stw	r3,128(sp)
 c0021a0:	dc401f15 	stw	r17,124(sp)
 c0021a4:	008001c4 	movi	r2,7
 c0021a8:	14400e16 	blt	r2,r17,c0021e4 <___vfprintf_internal_r+0x168c>
 c0021ac:	45800204 	addi	r22,r8,8
 c0021b0:	003eca06 	br	c001cdc <__alt_data_end+0xfc001cdc>
 c0021b4:	01030074 	movhi	r4,3073
 c0021b8:	21009c84 	addi	r4,r4,626
 c0021bc:	d9002c15 	stw	r4,176(sp)
 c0021c0:	d8802c17 	ldw	r2,176(sp)
 c0021c4:	1c07883a 	add	r3,r3,r16
 c0021c8:	8c400044 	addi	r17,r17,1
 c0021cc:	b0800015 	stw	r2,0(r22)
 c0021d0:	b4000115 	stw	r16,4(r22)
 c0021d4:	d8c02015 	stw	r3,128(sp)
 c0021d8:	dc401f15 	stw	r17,124(sp)
 c0021dc:	008001c4 	movi	r2,7
 c0021e0:	147ebd0e 	bge	r2,r17,c001cd8 <__alt_data_end+0xfc001cd8>
 c0021e4:	d9002d17 	ldw	r4,180(sp)
 c0021e8:	d9801e04 	addi	r6,sp,120
 c0021ec:	b80b883a 	mov	r5,r23
 c0021f0:	c0077000 	call	c007700 <__sprint_r>
 c0021f4:	103b5c1e 	bne	r2,zero,c000f68 <__alt_data_end+0xfc000f68>
 c0021f8:	d8c02017 	ldw	r3,128(sp)
 c0021fc:	dc401f17 	ldw	r17,124(sp)
 c002200:	dd800404 	addi	r22,sp,16
 c002204:	003eb506 	br	c001cdc <__alt_data_end+0xfc001cdc>
 c002208:	d9002d17 	ldw	r4,180(sp)
 c00220c:	d9801e04 	addi	r6,sp,120
 c002210:	b80b883a 	mov	r5,r23
 c002214:	c0077000 	call	c007700 <__sprint_r>
 c002218:	103b531e 	bne	r2,zero,c000f68 <__alt_data_end+0xfc000f68>
 c00221c:	d8c02017 	ldw	r3,128(sp)
 c002220:	dc401f17 	ldw	r17,124(sp)
 c002224:	da000404 	addi	r8,sp,16
 c002228:	003e8d06 	br	c001c60 <__alt_data_end+0xfc001c60>
 c00222c:	d9002d17 	ldw	r4,180(sp)
 c002230:	d9801e04 	addi	r6,sp,120
 c002234:	b80b883a 	mov	r5,r23
 c002238:	c0077000 	call	c007700 <__sprint_r>
 c00223c:	103b4a1e 	bne	r2,zero,c000f68 <__alt_data_end+0xfc000f68>
 c002240:	d8c02017 	ldw	r3,128(sp)
 c002244:	dc401f17 	ldw	r17,124(sp)
 c002248:	dd800404 	addi	r22,sp,16
 c00224c:	003e8f06 	br	c001c8c <__alt_data_end+0xfc001c8c>
 c002250:	0027883a 	mov	r19,zero
 c002254:	003f4a06 	br	c001f80 <__alt_data_end+0xfc001f80>
 c002258:	d9002d17 	ldw	r4,180(sp)
 c00225c:	d9801e04 	addi	r6,sp,120
 c002260:	b80b883a 	mov	r5,r23
 c002264:	c0077000 	call	c007700 <__sprint_r>
 c002268:	103b3f1e 	bne	r2,zero,c000f68 <__alt_data_end+0xfc000f68>
 c00226c:	d8c02017 	ldw	r3,128(sp)
 c002270:	da000404 	addi	r8,sp,16
 c002274:	003c7b06 	br	c001464 <__alt_data_end+0xfc001464>
 c002278:	d9402a17 	ldw	r5,168(sp)
 c00227c:	04e7c83a 	sub	r19,zero,r19
 c002280:	07000b44 	movi	fp,45
 c002284:	9804c03a 	cmpne	r2,r19,zero
 c002288:	05adc83a 	sub	r22,zero,r22
 c00228c:	df002785 	stb	fp,158(sp)
 c002290:	b0adc83a 	sub	r22,r22,r2
 c002294:	28017b16 	blt	r5,zero,c002884 <___vfprintf_internal_r+0x1d2c>
 c002298:	00bfdfc4 	movi	r2,-129
 c00229c:	90a4703a 	and	r18,r18,r2
 c0022a0:	003b8906 	br	c0010c8 <__alt_data_end+0xfc0010c8>
 c0022a4:	d9003617 	ldw	r4,216(sp)
 c0022a8:	d9403817 	ldw	r5,224(sp)
 c0022ac:	da003d15 	stw	r8,244(sp)
 c0022b0:	c00728c0 	call	c00728c <__fpclassifyd>
 c0022b4:	da003d17 	ldw	r8,244(sp)
 c0022b8:	1000f026 	beq	r2,zero,c00267c <___vfprintf_internal_r+0x1b24>
 c0022bc:	d9002a17 	ldw	r4,168(sp)
 c0022c0:	05bff7c4 	movi	r22,-33
 c0022c4:	00bfffc4 	movi	r2,-1
 c0022c8:	8dac703a 	and	r22,r17,r22
 c0022cc:	20820026 	beq	r4,r2,c002ad0 <___vfprintf_internal_r+0x1f78>
 c0022d0:	008011c4 	movi	r2,71
 c0022d4:	b081f726 	beq	r22,r2,c002ab4 <___vfprintf_internal_r+0x1f5c>
 c0022d8:	d9003817 	ldw	r4,224(sp)
 c0022dc:	90c04014 	ori	r3,r18,256
 c0022e0:	d8c02c15 	stw	r3,176(sp)
 c0022e4:	20021516 	blt	r4,zero,c002b3c <___vfprintf_internal_r+0x1fe4>
 c0022e8:	dcc03817 	ldw	r19,224(sp)
 c0022ec:	d8002905 	stb	zero,164(sp)
 c0022f0:	00801984 	movi	r2,102
 c0022f4:	8881f926 	beq	r17,r2,c002adc <___vfprintf_internal_r+0x1f84>
 c0022f8:	00801184 	movi	r2,70
 c0022fc:	88821c26 	beq	r17,r2,c002b70 <___vfprintf_internal_r+0x2018>
 c002300:	00801144 	movi	r2,69
 c002304:	b081ef26 	beq	r22,r2,c002ac4 <___vfprintf_internal_r+0x1f6c>
 c002308:	d8c02a17 	ldw	r3,168(sp)
 c00230c:	d8802104 	addi	r2,sp,132
 c002310:	d8800315 	stw	r2,12(sp)
 c002314:	d9403617 	ldw	r5,216(sp)
 c002318:	d8802504 	addi	r2,sp,148
 c00231c:	d9002d17 	ldw	r4,180(sp)
 c002320:	d8800215 	stw	r2,8(sp)
 c002324:	d8802604 	addi	r2,sp,152
 c002328:	d8c00015 	stw	r3,0(sp)
 c00232c:	d8800115 	stw	r2,4(sp)
 c002330:	01c00084 	movi	r7,2
 c002334:	980d883a 	mov	r6,r19
 c002338:	d8c03c15 	stw	r3,240(sp)
 c00233c:	da003d15 	stw	r8,244(sp)
 c002340:	c0032880 	call	c003288 <_dtoa_r>
 c002344:	1021883a 	mov	r16,r2
 c002348:	008019c4 	movi	r2,103
 c00234c:	d8c03c17 	ldw	r3,240(sp)
 c002350:	da003d17 	ldw	r8,244(sp)
 c002354:	88817126 	beq	r17,r2,c00291c <___vfprintf_internal_r+0x1dc4>
 c002358:	008011c4 	movi	r2,71
 c00235c:	88829126 	beq	r17,r2,c002da4 <___vfprintf_internal_r+0x224c>
 c002360:	80f9883a 	add	fp,r16,r3
 c002364:	d9003617 	ldw	r4,216(sp)
 c002368:	000d883a 	mov	r6,zero
 c00236c:	000f883a 	mov	r7,zero
 c002370:	980b883a 	mov	r5,r19
 c002374:	da003d15 	stw	r8,244(sp)
 c002378:	c00c1c00 	call	c00c1c0 <__eqdf2>
 c00237c:	da003d17 	ldw	r8,244(sp)
 c002380:	10018d26 	beq	r2,zero,c0029b8 <___vfprintf_internal_r+0x1e60>
 c002384:	d8802117 	ldw	r2,132(sp)
 c002388:	1700062e 	bgeu	r2,fp,c0023a4 <___vfprintf_internal_r+0x184c>
 c00238c:	01000c04 	movi	r4,48
 c002390:	10c00044 	addi	r3,r2,1
 c002394:	d8c02115 	stw	r3,132(sp)
 c002398:	11000005 	stb	r4,0(r2)
 c00239c:	d8802117 	ldw	r2,132(sp)
 c0023a0:	173ffb36 	bltu	r2,fp,c002390 <__alt_data_end+0xfc002390>
 c0023a4:	1405c83a 	sub	r2,r2,r16
 c0023a8:	d8803315 	stw	r2,204(sp)
 c0023ac:	008011c4 	movi	r2,71
 c0023b0:	b0817626 	beq	r22,r2,c00298c <___vfprintf_internal_r+0x1e34>
 c0023b4:	00801944 	movi	r2,101
 c0023b8:	1442800e 	bge	r2,r17,c002dbc <___vfprintf_internal_r+0x2264>
 c0023bc:	d8c02617 	ldw	r3,152(sp)
 c0023c0:	00801984 	movi	r2,102
 c0023c4:	d8c03215 	stw	r3,200(sp)
 c0023c8:	8881fe26 	beq	r17,r2,c002bc4 <___vfprintf_internal_r+0x206c>
 c0023cc:	d8c03217 	ldw	r3,200(sp)
 c0023d0:	d9003317 	ldw	r4,204(sp)
 c0023d4:	1901dd16 	blt	r3,r4,c002b4c <___vfprintf_internal_r+0x1ff4>
 c0023d8:	9480004c 	andi	r18,r18,1
 c0023dc:	90022b1e 	bne	r18,zero,c002c8c <___vfprintf_internal_r+0x2134>
 c0023e0:	1805883a 	mov	r2,r3
 c0023e4:	18028316 	blt	r3,zero,c002df4 <___vfprintf_internal_r+0x229c>
 c0023e8:	d8c03217 	ldw	r3,200(sp)
 c0023ec:	044019c4 	movi	r17,103
 c0023f0:	d8c02b15 	stw	r3,172(sp)
 c0023f4:	df002907 	ldb	fp,164(sp)
 c0023f8:	e001531e 	bne	fp,zero,c002948 <___vfprintf_internal_r+0x1df0>
 c0023fc:	df002783 	ldbu	fp,158(sp)
 c002400:	d8802915 	stw	r2,164(sp)
 c002404:	dc802c17 	ldw	r18,176(sp)
 c002408:	d8002a15 	stw	zero,168(sp)
 c00240c:	003baf06 	br	c0012cc <__alt_data_end+0xfc0012cc>
 c002410:	d8c02e17 	ldw	r3,184(sp)
 c002414:	d9002e17 	ldw	r4,184(sp)
 c002418:	d9402e17 	ldw	r5,184(sp)
 c00241c:	18c00017 	ldw	r3,0(r3)
 c002420:	21000117 	ldw	r4,4(r4)
 c002424:	29400204 	addi	r5,r5,8
 c002428:	d8c03615 	stw	r3,216(sp)
 c00242c:	d9003815 	stw	r4,224(sp)
 c002430:	d9402e15 	stw	r5,184(sp)
 c002434:	003b5006 	br	c001178 <__alt_data_end+0xfc001178>
 c002438:	ac400007 	ldb	r17,0(r21)
 c00243c:	003a2806 	br	c000ce0 <__alt_data_end+0xfc000ce0>
 c002440:	9080100c 	andi	r2,r18,64
 c002444:	1000a826 	beq	r2,zero,c0026e8 <___vfprintf_internal_r+0x1b90>
 c002448:	d8c02e17 	ldw	r3,184(sp)
 c00244c:	002d883a 	mov	r22,zero
 c002450:	1cc0000b 	ldhu	r19,0(r3)
 c002454:	18c00104 	addi	r3,r3,4
 c002458:	d8c02e15 	stw	r3,184(sp)
 c00245c:	003caf06 	br	c00171c <__alt_data_end+0xfc00171c>
 c002460:	d9002e17 	ldw	r4,184(sp)
 c002464:	d9402a17 	ldw	r5,168(sp)
 c002468:	002d883a 	mov	r22,zero
 c00246c:	20800104 	addi	r2,r4,4
 c002470:	24c00017 	ldw	r19,0(r4)
 c002474:	283ebb0e 	bge	r5,zero,c001f64 <__alt_data_end+0xfc001f64>
 c002478:	003ef106 	br	c002040 <__alt_data_end+0xfc002040>
 c00247c:	9080040c 	andi	r2,r18,16
 c002480:	1000921e 	bne	r2,zero,c0026cc <___vfprintf_internal_r+0x1b74>
 c002484:	9480100c 	andi	r18,r18,64
 c002488:	90013926 	beq	r18,zero,c002970 <___vfprintf_internal_r+0x1e18>
 c00248c:	d9402e17 	ldw	r5,184(sp)
 c002490:	d8c02f17 	ldw	r3,188(sp)
 c002494:	28800017 	ldw	r2,0(r5)
 c002498:	29400104 	addi	r5,r5,4
 c00249c:	d9402e15 	stw	r5,184(sp)
 c0024a0:	10c0000d 	sth	r3,0(r2)
 c0024a4:	0039e406 	br	c000c38 <__alt_data_end+0xfc000c38>
 c0024a8:	9080100c 	andi	r2,r18,64
 c0024ac:	10008026 	beq	r2,zero,c0026b0 <___vfprintf_internal_r+0x1b58>
 c0024b0:	d8802e17 	ldw	r2,184(sp)
 c0024b4:	14c0000f 	ldh	r19,0(r2)
 c0024b8:	10800104 	addi	r2,r2,4
 c0024bc:	d8802e15 	stw	r2,184(sp)
 c0024c0:	982dd7fa 	srai	r22,r19,31
 c0024c4:	b005883a 	mov	r2,r22
 c0024c8:	003af706 	br	c0010a8 <__alt_data_end+0xfc0010a8>
 c0024cc:	9080100c 	andi	r2,r18,64
 c0024d0:	d8002785 	stb	zero,158(sp)
 c0024d4:	10008a1e 	bne	r2,zero,c002700 <___vfprintf_internal_r+0x1ba8>
 c0024d8:	d9002e17 	ldw	r4,184(sp)
 c0024dc:	d9402a17 	ldw	r5,168(sp)
 c0024e0:	002d883a 	mov	r22,zero
 c0024e4:	20800104 	addi	r2,r4,4
 c0024e8:	24c00017 	ldw	r19,0(r4)
 c0024ec:	283e4b0e 	bge	r5,zero,c001e1c <__alt_data_end+0xfc001e1c>
 c0024f0:	9d86b03a 	or	r3,r19,r22
 c0024f4:	d8802e15 	stw	r2,184(sp)
 c0024f8:	183e4c1e 	bne	r3,zero,c001e2c <__alt_data_end+0xfc001e2c>
 c0024fc:	0039883a 	mov	fp,zero
 c002500:	0005883a 	mov	r2,zero
 c002504:	003d4006 	br	c001a08 <__alt_data_end+0xfc001a08>
 c002508:	01430074 	movhi	r5,3073
 c00250c:	29409c84 	addi	r5,r5,626
 c002510:	d9402c15 	stw	r5,176(sp)
 c002514:	d9402c17 	ldw	r5,176(sp)
 c002518:	1c47883a 	add	r3,r3,r17
 c00251c:	10800044 	addi	r2,r2,1
 c002520:	41400015 	stw	r5,0(r8)
 c002524:	44400115 	stw	r17,4(r8)
 c002528:	d8c02015 	stw	r3,128(sp)
 c00252c:	d8801f15 	stw	r2,124(sp)
 c002530:	010001c4 	movi	r4,7
 c002534:	20bec816 	blt	r4,r2,c002058 <__alt_data_end+0xfc002058>
 c002538:	42000204 	addi	r8,r8,8
 c00253c:	003ecd06 	br	c002074 <__alt_data_end+0xfc002074>
 c002540:	d9002a17 	ldw	r4,168(sp)
 c002544:	d8002785 	stb	zero,158(sp)
 c002548:	203d2d16 	blt	r4,zero,c001a00 <__alt_data_end+0xfc001a00>
 c00254c:	00bfdfc4 	movi	r2,-129
 c002550:	90a4703a 	and	r18,r18,r2
 c002554:	003a6106 	br	c000edc <__alt_data_end+0xfc000edc>
 c002558:	01030074 	movhi	r4,3073
 c00255c:	21009c84 	addi	r4,r4,626
 c002560:	d9002c15 	stw	r4,176(sp)
 c002564:	003bea06 	br	c001510 <__alt_data_end+0xfc001510>
 c002568:	d9002d17 	ldw	r4,180(sp)
 c00256c:	d9801e04 	addi	r6,sp,120
 c002570:	b80b883a 	mov	r5,r23
 c002574:	c0077000 	call	c007700 <__sprint_r>
 c002578:	103a7b1e 	bne	r2,zero,c000f68 <__alt_data_end+0xfc000f68>
 c00257c:	d8c02017 	ldw	r3,128(sp)
 c002580:	da000404 	addi	r8,sp,16
 c002584:	003d4106 	br	c001a8c <__alt_data_end+0xfc001a8c>
 c002588:	d8801f17 	ldw	r2,124(sp)
 c00258c:	01430074 	movhi	r5,3073
 c002590:	01000044 	movi	r4,1
 c002594:	18c00044 	addi	r3,r3,1
 c002598:	10800044 	addi	r2,r2,1
 c00259c:	29409c04 	addi	r5,r5,624
 c0025a0:	41000115 	stw	r4,4(r8)
 c0025a4:	41400015 	stw	r5,0(r8)
 c0025a8:	d8c02015 	stw	r3,128(sp)
 c0025ac:	d8801f15 	stw	r2,124(sp)
 c0025b0:	010001c4 	movi	r4,7
 c0025b4:	20805c16 	blt	r4,r2,c002728 <___vfprintf_internal_r+0x1bd0>
 c0025b8:	42000204 	addi	r8,r8,8
 c0025bc:	8800041e 	bne	r17,zero,c0025d0 <___vfprintf_internal_r+0x1a78>
 c0025c0:	d8803317 	ldw	r2,204(sp)
 c0025c4:	1000021e 	bne	r2,zero,c0025d0 <___vfprintf_internal_r+0x1a78>
 c0025c8:	9080004c 	andi	r2,r18,1
 c0025cc:	103be726 	beq	r2,zero,c00156c <__alt_data_end+0xfc00156c>
 c0025d0:	d9003717 	ldw	r4,220(sp)
 c0025d4:	d8801f17 	ldw	r2,124(sp)
 c0025d8:	d9403417 	ldw	r5,208(sp)
 c0025dc:	20c7883a 	add	r3,r4,r3
 c0025e0:	10800044 	addi	r2,r2,1
 c0025e4:	41000115 	stw	r4,4(r8)
 c0025e8:	41400015 	stw	r5,0(r8)
 c0025ec:	d8c02015 	stw	r3,128(sp)
 c0025f0:	d8801f15 	stw	r2,124(sp)
 c0025f4:	010001c4 	movi	r4,7
 c0025f8:	20812116 	blt	r4,r2,c002a80 <___vfprintf_internal_r+0x1f28>
 c0025fc:	42000204 	addi	r8,r8,8
 c002600:	0463c83a 	sub	r17,zero,r17
 c002604:	0440730e 	bge	zero,r17,c0027d4 <___vfprintf_internal_r+0x1c7c>
 c002608:	05800404 	movi	r22,16
 c00260c:	b440860e 	bge	r22,r17,c002828 <___vfprintf_internal_r+0x1cd0>
 c002610:	01430074 	movhi	r5,3073
 c002614:	29409c84 	addi	r5,r5,626
 c002618:	d9402c15 	stw	r5,176(sp)
 c00261c:	070001c4 	movi	fp,7
 c002620:	dcc02d17 	ldw	r19,180(sp)
 c002624:	00000306 	br	c002634 <___vfprintf_internal_r+0x1adc>
 c002628:	42000204 	addi	r8,r8,8
 c00262c:	8c7ffc04 	addi	r17,r17,-16
 c002630:	b440800e 	bge	r22,r17,c002834 <___vfprintf_internal_r+0x1cdc>
 c002634:	18c00404 	addi	r3,r3,16
 c002638:	10800044 	addi	r2,r2,1
 c00263c:	45000015 	stw	r20,0(r8)
 c002640:	45800115 	stw	r22,4(r8)
 c002644:	d8c02015 	stw	r3,128(sp)
 c002648:	d8801f15 	stw	r2,124(sp)
 c00264c:	e0bff60e 	bge	fp,r2,c002628 <__alt_data_end+0xfc002628>
 c002650:	d9801e04 	addi	r6,sp,120
 c002654:	b80b883a 	mov	r5,r23
 c002658:	9809883a 	mov	r4,r19
 c00265c:	c0077000 	call	c007700 <__sprint_r>
 c002660:	103a411e 	bne	r2,zero,c000f68 <__alt_data_end+0xfc000f68>
 c002664:	d8c02017 	ldw	r3,128(sp)
 c002668:	d8801f17 	ldw	r2,124(sp)
 c00266c:	da000404 	addi	r8,sp,16
 c002670:	003fee06 	br	c00262c <__alt_data_end+0xfc00262c>
 c002674:	00bfffc4 	movi	r2,-1
 c002678:	003a3f06 	br	c000f78 <__alt_data_end+0xfc000f78>
 c00267c:	008011c4 	movi	r2,71
 c002680:	1440b816 	blt	r2,r17,c002964 <___vfprintf_internal_r+0x1e0c>
 c002684:	04030074 	movhi	r16,3073
 c002688:	84008e04 	addi	r16,r16,568
 c00268c:	00c000c4 	movi	r3,3
 c002690:	00bfdfc4 	movi	r2,-129
 c002694:	d8c02915 	stw	r3,164(sp)
 c002698:	90a4703a 	and	r18,r18,r2
 c00269c:	df002783 	ldbu	fp,158(sp)
 c0026a0:	d8c02b15 	stw	r3,172(sp)
 c0026a4:	d8002a15 	stw	zero,168(sp)
 c0026a8:	d8003215 	stw	zero,200(sp)
 c0026ac:	003b0706 	br	c0012cc <__alt_data_end+0xfc0012cc>
 c0026b0:	d8c02e17 	ldw	r3,184(sp)
 c0026b4:	1cc00017 	ldw	r19,0(r3)
 c0026b8:	18c00104 	addi	r3,r3,4
 c0026bc:	d8c02e15 	stw	r3,184(sp)
 c0026c0:	982dd7fa 	srai	r22,r19,31
 c0026c4:	b005883a 	mov	r2,r22
 c0026c8:	003a7706 	br	c0010a8 <__alt_data_end+0xfc0010a8>
 c0026cc:	d8c02e17 	ldw	r3,184(sp)
 c0026d0:	d9002f17 	ldw	r4,188(sp)
 c0026d4:	18800017 	ldw	r2,0(r3)
 c0026d8:	18c00104 	addi	r3,r3,4
 c0026dc:	d8c02e15 	stw	r3,184(sp)
 c0026e0:	11000015 	stw	r4,0(r2)
 c0026e4:	00395406 	br	c000c38 <__alt_data_end+0xfc000c38>
 c0026e8:	d9002e17 	ldw	r4,184(sp)
 c0026ec:	002d883a 	mov	r22,zero
 c0026f0:	24c00017 	ldw	r19,0(r4)
 c0026f4:	21000104 	addi	r4,r4,4
 c0026f8:	d9002e15 	stw	r4,184(sp)
 c0026fc:	003c0706 	br	c00171c <__alt_data_end+0xfc00171c>
 c002700:	d9402e17 	ldw	r5,184(sp)
 c002704:	d8c02a17 	ldw	r3,168(sp)
 c002708:	002d883a 	mov	r22,zero
 c00270c:	28800104 	addi	r2,r5,4
 c002710:	2cc0000b 	ldhu	r19,0(r5)
 c002714:	183dc10e 	bge	r3,zero,c001e1c <__alt_data_end+0xfc001e1c>
 c002718:	003f7506 	br	c0024f0 <__alt_data_end+0xfc0024f0>
 c00271c:	04030074 	movhi	r16,3073
 c002720:	84008c04 	addi	r16,r16,560
 c002724:	003aa706 	br	c0011c4 <__alt_data_end+0xfc0011c4>
 c002728:	d9002d17 	ldw	r4,180(sp)
 c00272c:	d9801e04 	addi	r6,sp,120
 c002730:	b80b883a 	mov	r5,r23
 c002734:	c0077000 	call	c007700 <__sprint_r>
 c002738:	103a0b1e 	bne	r2,zero,c000f68 <__alt_data_end+0xfc000f68>
 c00273c:	dc402617 	ldw	r17,152(sp)
 c002740:	d8c02017 	ldw	r3,128(sp)
 c002744:	da000404 	addi	r8,sp,16
 c002748:	003f9c06 	br	c0025bc <__alt_data_end+0xfc0025bc>
 c00274c:	ac400043 	ldbu	r17,1(r21)
 c002750:	84000814 	ori	r16,r16,32
 c002754:	ad400044 	addi	r21,r21,1
 c002758:	8c403fcc 	andi	r17,r17,255
 c00275c:	8c40201c 	xori	r17,r17,128
 c002760:	8c7fe004 	addi	r17,r17,-128
 c002764:	00395e06 	br	c000ce0 <__alt_data_end+0xfc000ce0>
 c002768:	d8c02e15 	stw	r3,184(sp)
 c00276c:	0039883a 	mov	fp,zero
 c002770:	003e3506 	br	c002048 <__alt_data_end+0xfc002048>
 c002774:	d9002d17 	ldw	r4,180(sp)
 c002778:	d9801e04 	addi	r6,sp,120
 c00277c:	b80b883a 	mov	r5,r23
 c002780:	c0077000 	call	c007700 <__sprint_r>
 c002784:	1039f81e 	bne	r2,zero,c000f68 <__alt_data_end+0xfc000f68>
 c002788:	d8c02017 	ldw	r3,128(sp)
 c00278c:	da000404 	addi	r8,sp,16
 c002790:	003cd006 	br	c001ad4 <__alt_data_end+0xfc001ad4>
 c002794:	8009883a 	mov	r4,r16
 c002798:	df003d15 	stw	fp,244(sp)
 c00279c:	c00756c0 	call	c00756c <strlen>
 c0027a0:	d8802b15 	stw	r2,172(sp)
 c0027a4:	da003d17 	ldw	r8,244(sp)
 c0027a8:	103c200e 	bge	r2,zero,c00182c <__alt_data_end+0xfc00182c>
 c0027ac:	0005883a 	mov	r2,zero
 c0027b0:	003c1e06 	br	c00182c <__alt_data_end+0xfc00182c>
 c0027b4:	d9002d17 	ldw	r4,180(sp)
 c0027b8:	d9801e04 	addi	r6,sp,120
 c0027bc:	b80b883a 	mov	r5,r23
 c0027c0:	c0077000 	call	c007700 <__sprint_r>
 c0027c4:	1039e81e 	bne	r2,zero,c000f68 <__alt_data_end+0xfc000f68>
 c0027c8:	d8c02017 	ldw	r3,128(sp)
 c0027cc:	d8801f17 	ldw	r2,124(sp)
 c0027d0:	da000404 	addi	r8,sp,16
 c0027d4:	d9403317 	ldw	r5,204(sp)
 c0027d8:	10800044 	addi	r2,r2,1
 c0027dc:	44000015 	stw	r16,0(r8)
 c0027e0:	28c7883a 	add	r3,r5,r3
 c0027e4:	003b5b06 	br	c001554 <__alt_data_end+0xfc001554>
 c0027e8:	01030074 	movhi	r4,3073
 c0027ec:	2100a084 	addi	r4,r4,642
 c0027f0:	d9003515 	stw	r4,212(sp)
 c0027f4:	003af206 	br	c0013c0 <__alt_data_end+0xfc0013c0>
 c0027f8:	013fffc4 	movi	r4,-1
 c0027fc:	003a0806 	br	c001020 <__alt_data_end+0xfc001020>
 c002800:	0023883a 	mov	r17,zero
 c002804:	003d9d06 	br	c001e7c <__alt_data_end+0xfc001e7c>
 c002808:	d9002d17 	ldw	r4,180(sp)
 c00280c:	d9801e04 	addi	r6,sp,120
 c002810:	b80b883a 	mov	r5,r23
 c002814:	c0077000 	call	c007700 <__sprint_r>
 c002818:	1039d31e 	bne	r2,zero,c000f68 <__alt_data_end+0xfc000f68>
 c00281c:	d8c02017 	ldw	r3,128(sp)
 c002820:	da000404 	addi	r8,sp,16
 c002824:	003d9406 	br	c001e78 <__alt_data_end+0xfc001e78>
 c002828:	01030074 	movhi	r4,3073
 c00282c:	21009c84 	addi	r4,r4,626
 c002830:	d9002c15 	stw	r4,176(sp)
 c002834:	d9002c17 	ldw	r4,176(sp)
 c002838:	1c47883a 	add	r3,r3,r17
 c00283c:	10800044 	addi	r2,r2,1
 c002840:	41000015 	stw	r4,0(r8)
 c002844:	44400115 	stw	r17,4(r8)
 c002848:	d8c02015 	stw	r3,128(sp)
 c00284c:	d8801f15 	stw	r2,124(sp)
 c002850:	010001c4 	movi	r4,7
 c002854:	20bfd716 	blt	r4,r2,c0027b4 <__alt_data_end+0xfc0027b4>
 c002858:	42000204 	addi	r8,r8,8
 c00285c:	003fdd06 	br	c0027d4 <__alt_data_end+0xfc0027d4>
 c002860:	d9002d17 	ldw	r4,180(sp)
 c002864:	d9801e04 	addi	r6,sp,120
 c002868:	b80b883a 	mov	r5,r23
 c00286c:	c0077000 	call	c007700 <__sprint_r>
 c002870:	1039bd1e 	bne	r2,zero,c000f68 <__alt_data_end+0xfc000f68>
 c002874:	d8802617 	ldw	r2,152(sp)
 c002878:	d8c02017 	ldw	r3,128(sp)
 c00287c:	da000404 	addi	r8,sp,16
 c002880:	003e1006 	br	c0020c4 <__alt_data_end+0xfc0020c4>
 c002884:	00800044 	movi	r2,1
 c002888:	10803fcc 	andi	r2,r2,255
 c00288c:	00c00044 	movi	r3,1
 c002890:	10fa0d26 	beq	r2,r3,c0010c8 <__alt_data_end+0xfc0010c8>
 c002894:	00c00084 	movi	r3,2
 c002898:	10fbaf26 	beq	r2,r3,c001758 <__alt_data_end+0xfc001758>
 c00289c:	003a6d06 	br	c001254 <__alt_data_end+0xfc001254>
 c0028a0:	01030074 	movhi	r4,3073
 c0028a4:	2100a084 	addi	r4,r4,642
 c0028a8:	d9003515 	stw	r4,212(sp)
 c0028ac:	003b5406 	br	c001600 <__alt_data_end+0xfc001600>
 c0028b0:	d8802a17 	ldw	r2,168(sp)
 c0028b4:	00c00184 	movi	r3,6
 c0028b8:	1880012e 	bgeu	r3,r2,c0028c0 <___vfprintf_internal_r+0x1d68>
 c0028bc:	1805883a 	mov	r2,r3
 c0028c0:	d8802b15 	stw	r2,172(sp)
 c0028c4:	1000ef16 	blt	r2,zero,c002c84 <___vfprintf_internal_r+0x212c>
 c0028c8:	04030074 	movhi	r16,3073
 c0028cc:	d8802915 	stw	r2,164(sp)
 c0028d0:	dcc02e15 	stw	r19,184(sp)
 c0028d4:	d8002a15 	stw	zero,168(sp)
 c0028d8:	d8003215 	stw	zero,200(sp)
 c0028dc:	84009a04 	addi	r16,r16,616
 c0028e0:	0039883a 	mov	fp,zero
 c0028e4:	003a8006 	br	c0012e8 <__alt_data_end+0xfc0012e8>
 c0028e8:	0021883a 	mov	r16,zero
 c0028ec:	003e0706 	br	c00210c <__alt_data_end+0xfc00210c>
 c0028f0:	d9002d17 	ldw	r4,180(sp)
 c0028f4:	d9801e04 	addi	r6,sp,120
 c0028f8:	b80b883a 	mov	r5,r23
 c0028fc:	c0077000 	call	c007700 <__sprint_r>
 c002900:	1039991e 	bne	r2,zero,c000f68 <__alt_data_end+0xfc000f68>
 c002904:	d8802617 	ldw	r2,152(sp)
 c002908:	d9403317 	ldw	r5,204(sp)
 c00290c:	d8c02017 	ldw	r3,128(sp)
 c002910:	da000404 	addi	r8,sp,16
 c002914:	2885c83a 	sub	r2,r5,r2
 c002918:	003dfb06 	br	c002108 <__alt_data_end+0xfc002108>
 c00291c:	9080004c 	andi	r2,r18,1
 c002920:	103e8f1e 	bne	r2,zero,c002360 <__alt_data_end+0xfc002360>
 c002924:	d8802117 	ldw	r2,132(sp)
 c002928:	003e9e06 	br	c0023a4 <__alt_data_end+0xfc0023a4>
 c00292c:	1025883a 	mov	r18,r2
 c002930:	0039883a 	mov	fp,zero
 c002934:	00800084 	movi	r2,2
 c002938:	003fd306 	br	c002888 <__alt_data_end+0xfc002888>
 c00293c:	07000b44 	movi	fp,45
 c002940:	df002785 	stb	fp,158(sp)
 c002944:	003a1b06 	br	c0011b4 <__alt_data_end+0xfc0011b4>
 c002948:	00c00b44 	movi	r3,45
 c00294c:	d8c02785 	stb	r3,158(sp)
 c002950:	d8802915 	stw	r2,164(sp)
 c002954:	dc802c17 	ldw	r18,176(sp)
 c002958:	d8002a15 	stw	zero,168(sp)
 c00295c:	07000b44 	movi	fp,45
 c002960:	003a5e06 	br	c0012dc <__alt_data_end+0xfc0012dc>
 c002964:	04030074 	movhi	r16,3073
 c002968:	84008f04 	addi	r16,r16,572
 c00296c:	003f4706 	br	c00268c <__alt_data_end+0xfc00268c>
 c002970:	d9002e17 	ldw	r4,184(sp)
 c002974:	d9402f17 	ldw	r5,188(sp)
 c002978:	20800017 	ldw	r2,0(r4)
 c00297c:	21000104 	addi	r4,r4,4
 c002980:	d9002e15 	stw	r4,184(sp)
 c002984:	11400015 	stw	r5,0(r2)
 c002988:	0038ab06 	br	c000c38 <__alt_data_end+0xfc000c38>
 c00298c:	dd802617 	ldw	r22,152(sp)
 c002990:	00bfff44 	movi	r2,-3
 c002994:	b0801c16 	blt	r22,r2,c002a08 <___vfprintf_internal_r+0x1eb0>
 c002998:	d9402a17 	ldw	r5,168(sp)
 c00299c:	2d801a16 	blt	r5,r22,c002a08 <___vfprintf_internal_r+0x1eb0>
 c0029a0:	dd803215 	stw	r22,200(sp)
 c0029a4:	003e8906 	br	c0023cc <__alt_data_end+0xfc0023cc>
 c0029a8:	01030074 	movhi	r4,3073
 c0029ac:	21009c84 	addi	r4,r4,626
 c0029b0:	d9002c15 	stw	r4,176(sp)
 c0029b4:	003c9106 	br	c001bfc <__alt_data_end+0xfc001bfc>
 c0029b8:	e005883a 	mov	r2,fp
 c0029bc:	003e7906 	br	c0023a4 <__alt_data_end+0xfc0023a4>
 c0029c0:	d9002a17 	ldw	r4,168(sp)
 c0029c4:	df002783 	ldbu	fp,158(sp)
 c0029c8:	dcc02e15 	stw	r19,184(sp)
 c0029cc:	d9002915 	stw	r4,164(sp)
 c0029d0:	d9002b15 	stw	r4,172(sp)
 c0029d4:	d8002a15 	stw	zero,168(sp)
 c0029d8:	d8003215 	stw	zero,200(sp)
 c0029dc:	003a3b06 	br	c0012cc <__alt_data_end+0xfc0012cc>
 c0029e0:	9080004c 	andi	r2,r18,1
 c0029e4:	0039883a 	mov	fp,zero
 c0029e8:	10000426 	beq	r2,zero,c0029fc <___vfprintf_internal_r+0x1ea4>
 c0029ec:	00800c04 	movi	r2,48
 c0029f0:	dc001dc4 	addi	r16,sp,119
 c0029f4:	d8801dc5 	stb	r2,119(sp)
 c0029f8:	003b6406 	br	c00178c <__alt_data_end+0xfc00178c>
 c0029fc:	d8002b15 	stw	zero,172(sp)
 c002a00:	dc001e04 	addi	r16,sp,120
 c002a04:	003a2b06 	br	c0012b4 <__alt_data_end+0xfc0012b4>
 c002a08:	8c7fff84 	addi	r17,r17,-2
 c002a0c:	b5bfffc4 	addi	r22,r22,-1
 c002a10:	dd802615 	stw	r22,152(sp)
 c002a14:	dc4022c5 	stb	r17,139(sp)
 c002a18:	b000bf16 	blt	r22,zero,c002d18 <___vfprintf_internal_r+0x21c0>
 c002a1c:	00800ac4 	movi	r2,43
 c002a20:	d8802305 	stb	r2,140(sp)
 c002a24:	00800244 	movi	r2,9
 c002a28:	15807016 	blt	r2,r22,c002bec <___vfprintf_internal_r+0x2094>
 c002a2c:	00800c04 	movi	r2,48
 c002a30:	b5800c04 	addi	r22,r22,48
 c002a34:	d8802345 	stb	r2,141(sp)
 c002a38:	dd802385 	stb	r22,142(sp)
 c002a3c:	d88023c4 	addi	r2,sp,143
 c002a40:	df0022c4 	addi	fp,sp,139
 c002a44:	d8c03317 	ldw	r3,204(sp)
 c002a48:	1739c83a 	sub	fp,r2,fp
 c002a4c:	d9003317 	ldw	r4,204(sp)
 c002a50:	e0c7883a 	add	r3,fp,r3
 c002a54:	df003a15 	stw	fp,232(sp)
 c002a58:	d8c02b15 	stw	r3,172(sp)
 c002a5c:	00800044 	movi	r2,1
 c002a60:	1100b30e 	bge	r2,r4,c002d30 <___vfprintf_internal_r+0x21d8>
 c002a64:	d8c02b17 	ldw	r3,172(sp)
 c002a68:	18c00044 	addi	r3,r3,1
 c002a6c:	d8c02b15 	stw	r3,172(sp)
 c002a70:	1805883a 	mov	r2,r3
 c002a74:	1800ac16 	blt	r3,zero,c002d28 <___vfprintf_internal_r+0x21d0>
 c002a78:	d8003215 	stw	zero,200(sp)
 c002a7c:	003e5d06 	br	c0023f4 <__alt_data_end+0xfc0023f4>
 c002a80:	d9002d17 	ldw	r4,180(sp)
 c002a84:	d9801e04 	addi	r6,sp,120
 c002a88:	b80b883a 	mov	r5,r23
 c002a8c:	c0077000 	call	c007700 <__sprint_r>
 c002a90:	1039351e 	bne	r2,zero,c000f68 <__alt_data_end+0xfc000f68>
 c002a94:	dc402617 	ldw	r17,152(sp)
 c002a98:	d8c02017 	ldw	r3,128(sp)
 c002a9c:	d8801f17 	ldw	r2,124(sp)
 c002aa0:	da000404 	addi	r8,sp,16
 c002aa4:	003ed606 	br	c002600 <__alt_data_end+0xfc002600>
 c002aa8:	182b883a 	mov	r21,r3
 c002aac:	d8002a15 	stw	zero,168(sp)
 c002ab0:	00388c06 	br	c000ce4 <__alt_data_end+0xfc000ce4>
 c002ab4:	d8802a17 	ldw	r2,168(sp)
 c002ab8:	103e071e 	bne	r2,zero,c0022d8 <__alt_data_end+0xfc0022d8>
 c002abc:	dc002a15 	stw	r16,168(sp)
 c002ac0:	003e0506 	br	c0022d8 <__alt_data_end+0xfc0022d8>
 c002ac4:	d9002a17 	ldw	r4,168(sp)
 c002ac8:	20c00044 	addi	r3,r4,1
 c002acc:	003e0f06 	br	c00230c <__alt_data_end+0xfc00230c>
 c002ad0:	01400184 	movi	r5,6
 c002ad4:	d9402a15 	stw	r5,168(sp)
 c002ad8:	003dff06 	br	c0022d8 <__alt_data_end+0xfc0022d8>
 c002adc:	d8802104 	addi	r2,sp,132
 c002ae0:	d8800315 	stw	r2,12(sp)
 c002ae4:	d8802504 	addi	r2,sp,148
 c002ae8:	d8800215 	stw	r2,8(sp)
 c002aec:	d8802604 	addi	r2,sp,152
 c002af0:	d8800115 	stw	r2,4(sp)
 c002af4:	d8802a17 	ldw	r2,168(sp)
 c002af8:	d9403617 	ldw	r5,216(sp)
 c002afc:	d9002d17 	ldw	r4,180(sp)
 c002b00:	d8800015 	stw	r2,0(sp)
 c002b04:	01c000c4 	movi	r7,3
 c002b08:	980d883a 	mov	r6,r19
 c002b0c:	da003d15 	stw	r8,244(sp)
 c002b10:	c0032880 	call	c003288 <_dtoa_r>
 c002b14:	d8c02a17 	ldw	r3,168(sp)
 c002b18:	da003d17 	ldw	r8,244(sp)
 c002b1c:	1021883a 	mov	r16,r2
 c002b20:	10f9883a 	add	fp,r2,r3
 c002b24:	81000007 	ldb	r4,0(r16)
 c002b28:	00800c04 	movi	r2,48
 c002b2c:	20805e26 	beq	r4,r2,c002ca8 <___vfprintf_internal_r+0x2150>
 c002b30:	d8c02617 	ldw	r3,152(sp)
 c002b34:	e0f9883a 	add	fp,fp,r3
 c002b38:	003e0a06 	br	c002364 <__alt_data_end+0xfc002364>
 c002b3c:	00c00b44 	movi	r3,45
 c002b40:	24e0003c 	xorhi	r19,r4,32768
 c002b44:	d8c02905 	stb	r3,164(sp)
 c002b48:	003de906 	br	c0022f0 <__alt_data_end+0xfc0022f0>
 c002b4c:	d8c03217 	ldw	r3,200(sp)
 c002b50:	00c07a0e 	bge	zero,r3,c002d3c <___vfprintf_internal_r+0x21e4>
 c002b54:	00800044 	movi	r2,1
 c002b58:	d9003317 	ldw	r4,204(sp)
 c002b5c:	1105883a 	add	r2,r2,r4
 c002b60:	d8802b15 	stw	r2,172(sp)
 c002b64:	10004e16 	blt	r2,zero,c002ca0 <___vfprintf_internal_r+0x2148>
 c002b68:	044019c4 	movi	r17,103
 c002b6c:	003e2106 	br	c0023f4 <__alt_data_end+0xfc0023f4>
 c002b70:	d9002a17 	ldw	r4,168(sp)
 c002b74:	d8802104 	addi	r2,sp,132
 c002b78:	d8800315 	stw	r2,12(sp)
 c002b7c:	d9000015 	stw	r4,0(sp)
 c002b80:	d8802504 	addi	r2,sp,148
 c002b84:	d9403617 	ldw	r5,216(sp)
 c002b88:	d9002d17 	ldw	r4,180(sp)
 c002b8c:	d8800215 	stw	r2,8(sp)
 c002b90:	d8802604 	addi	r2,sp,152
 c002b94:	d8800115 	stw	r2,4(sp)
 c002b98:	01c000c4 	movi	r7,3
 c002b9c:	980d883a 	mov	r6,r19
 c002ba0:	da003d15 	stw	r8,244(sp)
 c002ba4:	c0032880 	call	c003288 <_dtoa_r>
 c002ba8:	d8c02a17 	ldw	r3,168(sp)
 c002bac:	da003d17 	ldw	r8,244(sp)
 c002bb0:	1021883a 	mov	r16,r2
 c002bb4:	00801184 	movi	r2,70
 c002bb8:	80f9883a 	add	fp,r16,r3
 c002bbc:	88bfd926 	beq	r17,r2,c002b24 <__alt_data_end+0xfc002b24>
 c002bc0:	003de806 	br	c002364 <__alt_data_end+0xfc002364>
 c002bc4:	d9002a17 	ldw	r4,168(sp)
 c002bc8:	00c04d0e 	bge	zero,r3,c002d00 <___vfprintf_internal_r+0x21a8>
 c002bcc:	2000441e 	bne	r4,zero,c002ce0 <___vfprintf_internal_r+0x2188>
 c002bd0:	9480004c 	andi	r18,r18,1
 c002bd4:	9000421e 	bne	r18,zero,c002ce0 <___vfprintf_internal_r+0x2188>
 c002bd8:	1805883a 	mov	r2,r3
 c002bdc:	18006f16 	blt	r3,zero,c002d9c <___vfprintf_internal_r+0x2244>
 c002be0:	d8c03217 	ldw	r3,200(sp)
 c002be4:	d8c02b15 	stw	r3,172(sp)
 c002be8:	003e0206 	br	c0023f4 <__alt_data_end+0xfc0023f4>
 c002bec:	df0022c4 	addi	fp,sp,139
 c002bf0:	dc002a15 	stw	r16,168(sp)
 c002bf4:	4027883a 	mov	r19,r8
 c002bf8:	e021883a 	mov	r16,fp
 c002bfc:	b009883a 	mov	r4,r22
 c002c00:	01400284 	movi	r5,10
 c002c04:	c00ae140 	call	c00ae14 <__modsi3>
 c002c08:	10800c04 	addi	r2,r2,48
 c002c0c:	843fffc4 	addi	r16,r16,-1
 c002c10:	b009883a 	mov	r4,r22
 c002c14:	01400284 	movi	r5,10
 c002c18:	80800005 	stb	r2,0(r16)
 c002c1c:	c00ad900 	call	c00ad90 <__divsi3>
 c002c20:	102d883a 	mov	r22,r2
 c002c24:	00800244 	movi	r2,9
 c002c28:	15bff416 	blt	r2,r22,c002bfc <__alt_data_end+0xfc002bfc>
 c002c2c:	9811883a 	mov	r8,r19
 c002c30:	b0800c04 	addi	r2,r22,48
 c002c34:	8027883a 	mov	r19,r16
 c002c38:	997fffc4 	addi	r5,r19,-1
 c002c3c:	98bfffc5 	stb	r2,-1(r19)
 c002c40:	dc002a17 	ldw	r16,168(sp)
 c002c44:	2f006d2e 	bgeu	r5,fp,c002dfc <___vfprintf_internal_r+0x22a4>
 c002c48:	d9c02384 	addi	r7,sp,142
 c002c4c:	3ccfc83a 	sub	r7,r7,r19
 c002c50:	d9002344 	addi	r4,sp,141
 c002c54:	e1cf883a 	add	r7,fp,r7
 c002c58:	00000106 	br	c002c60 <___vfprintf_internal_r+0x2108>
 c002c5c:	28800003 	ldbu	r2,0(r5)
 c002c60:	20800005 	stb	r2,0(r4)
 c002c64:	21000044 	addi	r4,r4,1
 c002c68:	29400044 	addi	r5,r5,1
 c002c6c:	393ffb1e 	bne	r7,r4,c002c5c <__alt_data_end+0xfc002c5c>
 c002c70:	d8802304 	addi	r2,sp,140
 c002c74:	14c5c83a 	sub	r2,r2,r19
 c002c78:	d8c02344 	addi	r3,sp,141
 c002c7c:	1885883a 	add	r2,r3,r2
 c002c80:	003f7006 	br	c002a44 <__alt_data_end+0xfc002a44>
 c002c84:	0005883a 	mov	r2,zero
 c002c88:	003f0f06 	br	c0028c8 <__alt_data_end+0xfc0028c8>
 c002c8c:	d8c03217 	ldw	r3,200(sp)
 c002c90:	18c00044 	addi	r3,r3,1
 c002c94:	d8c02b15 	stw	r3,172(sp)
 c002c98:	1805883a 	mov	r2,r3
 c002c9c:	183fb20e 	bge	r3,zero,c002b68 <__alt_data_end+0xfc002b68>
 c002ca0:	0005883a 	mov	r2,zero
 c002ca4:	003fb006 	br	c002b68 <__alt_data_end+0xfc002b68>
 c002ca8:	d9003617 	ldw	r4,216(sp)
 c002cac:	000d883a 	mov	r6,zero
 c002cb0:	000f883a 	mov	r7,zero
 c002cb4:	980b883a 	mov	r5,r19
 c002cb8:	d8c03c15 	stw	r3,240(sp)
 c002cbc:	da003d15 	stw	r8,244(sp)
 c002cc0:	c00c1c00 	call	c00c1c0 <__eqdf2>
 c002cc4:	d8c03c17 	ldw	r3,240(sp)
 c002cc8:	da003d17 	ldw	r8,244(sp)
 c002ccc:	103f9826 	beq	r2,zero,c002b30 <__alt_data_end+0xfc002b30>
 c002cd0:	00800044 	movi	r2,1
 c002cd4:	10c7c83a 	sub	r3,r2,r3
 c002cd8:	d8c02615 	stw	r3,152(sp)
 c002cdc:	003f9506 	br	c002b34 <__alt_data_end+0xfc002b34>
 c002ce0:	d9002a17 	ldw	r4,168(sp)
 c002ce4:	d8c03217 	ldw	r3,200(sp)
 c002ce8:	20800044 	addi	r2,r4,1
 c002cec:	1885883a 	add	r2,r3,r2
 c002cf0:	d8802b15 	stw	r2,172(sp)
 c002cf4:	103dbf0e 	bge	r2,zero,c0023f4 <__alt_data_end+0xfc0023f4>
 c002cf8:	0005883a 	mov	r2,zero
 c002cfc:	003dbd06 	br	c0023f4 <__alt_data_end+0xfc0023f4>
 c002d00:	2000201e 	bne	r4,zero,c002d84 <___vfprintf_internal_r+0x222c>
 c002d04:	9480004c 	andi	r18,r18,1
 c002d08:	90001e1e 	bne	r18,zero,c002d84 <___vfprintf_internal_r+0x222c>
 c002d0c:	00800044 	movi	r2,1
 c002d10:	d8802b15 	stw	r2,172(sp)
 c002d14:	003db706 	br	c0023f4 <__alt_data_end+0xfc0023f4>
 c002d18:	00800b44 	movi	r2,45
 c002d1c:	05adc83a 	sub	r22,zero,r22
 c002d20:	d8802305 	stb	r2,140(sp)
 c002d24:	003f3f06 	br	c002a24 <__alt_data_end+0xfc002a24>
 c002d28:	0005883a 	mov	r2,zero
 c002d2c:	003f5206 	br	c002a78 <__alt_data_end+0xfc002a78>
 c002d30:	90a4703a 	and	r18,r18,r2
 c002d34:	903f4e26 	beq	r18,zero,c002a70 <__alt_data_end+0xfc002a70>
 c002d38:	003f4a06 	br	c002a64 <__alt_data_end+0xfc002a64>
 c002d3c:	00800084 	movi	r2,2
 c002d40:	10c5c83a 	sub	r2,r2,r3
 c002d44:	003f8406 	br	c002b58 <__alt_data_end+0xfc002b58>
 c002d48:	d9402e17 	ldw	r5,184(sp)
 c002d4c:	d9002e17 	ldw	r4,184(sp)
 c002d50:	ac400043 	ldbu	r17,1(r21)
 c002d54:	29400017 	ldw	r5,0(r5)
 c002d58:	20800104 	addi	r2,r4,4
 c002d5c:	d8802e15 	stw	r2,184(sp)
 c002d60:	d9402a15 	stw	r5,168(sp)
 c002d64:	182b883a 	mov	r21,r3
 c002d68:	283e7b0e 	bge	r5,zero,c002758 <__alt_data_end+0xfc002758>
 c002d6c:	8c403fcc 	andi	r17,r17,255
 c002d70:	017fffc4 	movi	r5,-1
 c002d74:	8c40201c 	xori	r17,r17,128
 c002d78:	d9402a15 	stw	r5,168(sp)
 c002d7c:	8c7fe004 	addi	r17,r17,-128
 c002d80:	0037d706 	br	c000ce0 <__alt_data_end+0xfc000ce0>
 c002d84:	d8c02a17 	ldw	r3,168(sp)
 c002d88:	18c00084 	addi	r3,r3,2
 c002d8c:	d8c02b15 	stw	r3,172(sp)
 c002d90:	1805883a 	mov	r2,r3
 c002d94:	183d970e 	bge	r3,zero,c0023f4 <__alt_data_end+0xfc0023f4>
 c002d98:	003fd706 	br	c002cf8 <__alt_data_end+0xfc002cf8>
 c002d9c:	0005883a 	mov	r2,zero
 c002da0:	003f8f06 	br	c002be0 <__alt_data_end+0xfc002be0>
 c002da4:	9080004c 	andi	r2,r18,1
 c002da8:	103f821e 	bne	r2,zero,c002bb4 <__alt_data_end+0xfc002bb4>
 c002dac:	d8802117 	ldw	r2,132(sp)
 c002db0:	1405c83a 	sub	r2,r2,r16
 c002db4:	d8803315 	stw	r2,204(sp)
 c002db8:	b47ef426 	beq	r22,r17,c00298c <__alt_data_end+0xfc00298c>
 c002dbc:	dd802617 	ldw	r22,152(sp)
 c002dc0:	003f1206 	br	c002a0c <__alt_data_end+0xfc002a0c>
 c002dc4:	d8c02b03 	ldbu	r3,172(sp)
 c002dc8:	d8c02785 	stb	r3,158(sp)
 c002dcc:	0038df06 	br	c00114c <__alt_data_end+0xfc00114c>
 c002dd0:	d8c02b03 	ldbu	r3,172(sp)
 c002dd4:	d8c02785 	stb	r3,158(sp)
 c002dd8:	0038aa06 	br	c001084 <__alt_data_end+0xfc001084>
 c002ddc:	d8c02b03 	ldbu	r3,172(sp)
 c002de0:	d8c02785 	stb	r3,158(sp)
 c002de4:	003a4306 	br	c0016f4 <__alt_data_end+0xfc0016f4>
 c002de8:	d8c02b03 	ldbu	r3,172(sp)
 c002dec:	d8c02785 	stb	r3,158(sp)
 c002df0:	003af506 	br	c0019c8 <__alt_data_end+0xfc0019c8>
 c002df4:	0005883a 	mov	r2,zero
 c002df8:	003d7b06 	br	c0023e8 <__alt_data_end+0xfc0023e8>
 c002dfc:	d8802344 	addi	r2,sp,141
 c002e00:	003f1006 	br	c002a44 <__alt_data_end+0xfc002a44>
 c002e04:	d8c02b03 	ldbu	r3,172(sp)
 c002e08:	d8c02785 	stb	r3,158(sp)
 c002e0c:	0038fd06 	br	c001204 <__alt_data_end+0xfc001204>
 c002e10:	d8c02b03 	ldbu	r3,172(sp)
 c002e14:	d8c02785 	stb	r3,158(sp)
 c002e18:	003a9706 	br	c001878 <__alt_data_end+0xfc001878>
 c002e1c:	d8c02b03 	ldbu	r3,172(sp)
 c002e20:	d8c02785 	stb	r3,158(sp)
 c002e24:	003a1806 	br	c001688 <__alt_data_end+0xfc001688>
 c002e28:	d8c02b03 	ldbu	r3,172(sp)
 c002e2c:	d8c02785 	stb	r3,158(sp)
 c002e30:	003abe06 	br	c00192c <__alt_data_end+0xfc00192c>

0c002e34 <__vfprintf_internal>:
 c002e34:	00830074 	movhi	r2,3073
 c002e38:	1087f904 	addi	r2,r2,8164
 c002e3c:	300f883a 	mov	r7,r6
 c002e40:	280d883a 	mov	r6,r5
 c002e44:	200b883a 	mov	r5,r4
 c002e48:	11000017 	ldw	r4,0(r2)
 c002e4c:	c000b581 	jmpi	c000b58 <___vfprintf_internal_r>

0c002e50 <__sbprintf>:
 c002e50:	2880030b 	ldhu	r2,12(r5)
 c002e54:	2ac01917 	ldw	r11,100(r5)
 c002e58:	2a80038b 	ldhu	r10,14(r5)
 c002e5c:	2a400717 	ldw	r9,28(r5)
 c002e60:	2a000917 	ldw	r8,36(r5)
 c002e64:	defee204 	addi	sp,sp,-1144
 c002e68:	00c10004 	movi	r3,1024
 c002e6c:	dc011a15 	stw	r16,1128(sp)
 c002e70:	10bfff4c 	andi	r2,r2,65533
 c002e74:	2821883a 	mov	r16,r5
 c002e78:	d8cb883a 	add	r5,sp,r3
 c002e7c:	dc811c15 	stw	r18,1136(sp)
 c002e80:	dc411b15 	stw	r17,1132(sp)
 c002e84:	dfc11d15 	stw	ra,1140(sp)
 c002e88:	2025883a 	mov	r18,r4
 c002e8c:	d881030d 	sth	r2,1036(sp)
 c002e90:	dac11915 	stw	r11,1124(sp)
 c002e94:	da81038d 	sth	r10,1038(sp)
 c002e98:	da410715 	stw	r9,1052(sp)
 c002e9c:	da010915 	stw	r8,1060(sp)
 c002ea0:	dec10015 	stw	sp,1024(sp)
 c002ea4:	dec10415 	stw	sp,1040(sp)
 c002ea8:	d8c10215 	stw	r3,1032(sp)
 c002eac:	d8c10515 	stw	r3,1044(sp)
 c002eb0:	d8010615 	stw	zero,1048(sp)
 c002eb4:	c000b580 	call	c000b58 <___vfprintf_internal_r>
 c002eb8:	1023883a 	mov	r17,r2
 c002ebc:	10000416 	blt	r2,zero,c002ed0 <__sbprintf+0x80>
 c002ec0:	d9410004 	addi	r5,sp,1024
 c002ec4:	9009883a 	mov	r4,r18
 c002ec8:	c004b2c0 	call	c004b2c <_fflush_r>
 c002ecc:	10000d1e 	bne	r2,zero,c002f04 <__sbprintf+0xb4>
 c002ed0:	d881030b 	ldhu	r2,1036(sp)
 c002ed4:	1080100c 	andi	r2,r2,64
 c002ed8:	10000326 	beq	r2,zero,c002ee8 <__sbprintf+0x98>
 c002edc:	8080030b 	ldhu	r2,12(r16)
 c002ee0:	10801014 	ori	r2,r2,64
 c002ee4:	8080030d 	sth	r2,12(r16)
 c002ee8:	8805883a 	mov	r2,r17
 c002eec:	dfc11d17 	ldw	ra,1140(sp)
 c002ef0:	dc811c17 	ldw	r18,1136(sp)
 c002ef4:	dc411b17 	ldw	r17,1132(sp)
 c002ef8:	dc011a17 	ldw	r16,1128(sp)
 c002efc:	dec11e04 	addi	sp,sp,1144
 c002f00:	f800283a 	ret
 c002f04:	047fffc4 	movi	r17,-1
 c002f08:	003ff106 	br	c002ed0 <__alt_data_end+0xfc002ed0>

0c002f0c <__swsetup_r>:
 c002f0c:	00830074 	movhi	r2,3073
 c002f10:	defffd04 	addi	sp,sp,-12
 c002f14:	1087f904 	addi	r2,r2,8164
 c002f18:	dc400115 	stw	r17,4(sp)
 c002f1c:	2023883a 	mov	r17,r4
 c002f20:	11000017 	ldw	r4,0(r2)
 c002f24:	dc000015 	stw	r16,0(sp)
 c002f28:	dfc00215 	stw	ra,8(sp)
 c002f2c:	2821883a 	mov	r16,r5
 c002f30:	20000226 	beq	r4,zero,c002f3c <__swsetup_r+0x30>
 c002f34:	20800e17 	ldw	r2,56(r4)
 c002f38:	10003126 	beq	r2,zero,c003000 <__swsetup_r+0xf4>
 c002f3c:	8080030b 	ldhu	r2,12(r16)
 c002f40:	10c0020c 	andi	r3,r2,8
 c002f44:	1009883a 	mov	r4,r2
 c002f48:	18000f26 	beq	r3,zero,c002f88 <__swsetup_r+0x7c>
 c002f4c:	80c00417 	ldw	r3,16(r16)
 c002f50:	18001526 	beq	r3,zero,c002fa8 <__swsetup_r+0x9c>
 c002f54:	1100004c 	andi	r4,r2,1
 c002f58:	20001c1e 	bne	r4,zero,c002fcc <__swsetup_r+0xc0>
 c002f5c:	1080008c 	andi	r2,r2,2
 c002f60:	1000291e 	bne	r2,zero,c003008 <__swsetup_r+0xfc>
 c002f64:	80800517 	ldw	r2,20(r16)
 c002f68:	80800215 	stw	r2,8(r16)
 c002f6c:	18001c26 	beq	r3,zero,c002fe0 <__swsetup_r+0xd4>
 c002f70:	0005883a 	mov	r2,zero
 c002f74:	dfc00217 	ldw	ra,8(sp)
 c002f78:	dc400117 	ldw	r17,4(sp)
 c002f7c:	dc000017 	ldw	r16,0(sp)
 c002f80:	dec00304 	addi	sp,sp,12
 c002f84:	f800283a 	ret
 c002f88:	2080040c 	andi	r2,r4,16
 c002f8c:	10002e26 	beq	r2,zero,c003048 <__swsetup_r+0x13c>
 c002f90:	2080010c 	andi	r2,r4,4
 c002f94:	10001e1e 	bne	r2,zero,c003010 <__swsetup_r+0x104>
 c002f98:	80c00417 	ldw	r3,16(r16)
 c002f9c:	20800214 	ori	r2,r4,8
 c002fa0:	8080030d 	sth	r2,12(r16)
 c002fa4:	183feb1e 	bne	r3,zero,c002f54 <__alt_data_end+0xfc002f54>
 c002fa8:	1100a00c 	andi	r4,r2,640
 c002fac:	01408004 	movi	r5,512
 c002fb0:	217fe826 	beq	r4,r5,c002f54 <__alt_data_end+0xfc002f54>
 c002fb4:	800b883a 	mov	r5,r16
 c002fb8:	8809883a 	mov	r4,r17
 c002fbc:	c0056000 	call	c005600 <__smakebuf_r>
 c002fc0:	8080030b 	ldhu	r2,12(r16)
 c002fc4:	80c00417 	ldw	r3,16(r16)
 c002fc8:	003fe206 	br	c002f54 <__alt_data_end+0xfc002f54>
 c002fcc:	80800517 	ldw	r2,20(r16)
 c002fd0:	80000215 	stw	zero,8(r16)
 c002fd4:	0085c83a 	sub	r2,zero,r2
 c002fd8:	80800615 	stw	r2,24(r16)
 c002fdc:	183fe41e 	bne	r3,zero,c002f70 <__alt_data_end+0xfc002f70>
 c002fe0:	80c0030b 	ldhu	r3,12(r16)
 c002fe4:	0005883a 	mov	r2,zero
 c002fe8:	1900200c 	andi	r4,r3,128
 c002fec:	203fe126 	beq	r4,zero,c002f74 <__alt_data_end+0xfc002f74>
 c002ff0:	18c01014 	ori	r3,r3,64
 c002ff4:	80c0030d 	sth	r3,12(r16)
 c002ff8:	00bfffc4 	movi	r2,-1
 c002ffc:	003fdd06 	br	c002f74 <__alt_data_end+0xfc002f74>
 c003000:	c004f180 	call	c004f18 <__sinit>
 c003004:	003fcd06 	br	c002f3c <__alt_data_end+0xfc002f3c>
 c003008:	0005883a 	mov	r2,zero
 c00300c:	003fd606 	br	c002f68 <__alt_data_end+0xfc002f68>
 c003010:	81400c17 	ldw	r5,48(r16)
 c003014:	28000626 	beq	r5,zero,c003030 <__swsetup_r+0x124>
 c003018:	80801004 	addi	r2,r16,64
 c00301c:	28800326 	beq	r5,r2,c00302c <__swsetup_r+0x120>
 c003020:	8809883a 	mov	r4,r17
 c003024:	c00508c0 	call	c00508c <_free_r>
 c003028:	8100030b 	ldhu	r4,12(r16)
 c00302c:	80000c15 	stw	zero,48(r16)
 c003030:	80c00417 	ldw	r3,16(r16)
 c003034:	00bff6c4 	movi	r2,-37
 c003038:	1108703a 	and	r4,r2,r4
 c00303c:	80000115 	stw	zero,4(r16)
 c003040:	80c00015 	stw	r3,0(r16)
 c003044:	003fd506 	br	c002f9c <__alt_data_end+0xfc002f9c>
 c003048:	00800244 	movi	r2,9
 c00304c:	88800015 	stw	r2,0(r17)
 c003050:	20801014 	ori	r2,r4,64
 c003054:	8080030d 	sth	r2,12(r16)
 c003058:	00bfffc4 	movi	r2,-1
 c00305c:	003fc506 	br	c002f74 <__alt_data_end+0xfc002f74>

0c003060 <quorem>:
 c003060:	defff204 	addi	sp,sp,-56
 c003064:	ddc00b15 	stw	r23,44(sp)
 c003068:	20800417 	ldw	r2,16(r4)
 c00306c:	2dc00417 	ldw	r23,16(r5)
 c003070:	dfc00d15 	stw	ra,52(sp)
 c003074:	df000c15 	stw	fp,48(sp)
 c003078:	dd800a15 	stw	r22,40(sp)
 c00307c:	dd400915 	stw	r21,36(sp)
 c003080:	dd000815 	stw	r20,32(sp)
 c003084:	dcc00715 	stw	r19,28(sp)
 c003088:	dc800615 	stw	r18,24(sp)
 c00308c:	dc400515 	stw	r17,20(sp)
 c003090:	dc000415 	stw	r16,16(sp)
 c003094:	15c07a16 	blt	r2,r23,c003280 <quorem+0x220>
 c003098:	bdffffc4 	addi	r23,r23,-1
 c00309c:	bde9883a 	add	r20,r23,r23
 c0030a0:	28c00504 	addi	r3,r5,20
 c0030a4:	a529883a 	add	r20,r20,r20
 c0030a8:	1d39883a 	add	fp,r3,r20
 c0030ac:	24c00504 	addi	r19,r4,20
 c0030b0:	d9400215 	stw	r5,8(sp)
 c0030b4:	9d29883a 	add	r20,r19,r20
 c0030b8:	e1400017 	ldw	r5,0(fp)
 c0030bc:	d9000015 	stw	r4,0(sp)
 c0030c0:	a1000017 	ldw	r4,0(r20)
 c0030c4:	29400044 	addi	r5,r5,1
 c0030c8:	d8c00115 	stw	r3,4(sp)
 c0030cc:	dd000315 	stw	r20,12(sp)
 c0030d0:	c00ae880 	call	c00ae88 <__udivsi3>
 c0030d4:	1025883a 	mov	r18,r2
 c0030d8:	10003026 	beq	r2,zero,c00319c <quorem+0x13c>
 c0030dc:	dc400117 	ldw	r17,4(sp)
 c0030e0:	9829883a 	mov	r20,r19
 c0030e4:	002d883a 	mov	r22,zero
 c0030e8:	0021883a 	mov	r16,zero
 c0030ec:	8d400017 	ldw	r21,0(r17)
 c0030f0:	900b883a 	mov	r5,r18
 c0030f4:	8c400104 	addi	r17,r17,4
 c0030f8:	a93fffcc 	andi	r4,r21,65535
 c0030fc:	c00097c0 	call	c00097c <__mulsi3>
 c003100:	a808d43a 	srli	r4,r21,16
 c003104:	900b883a 	mov	r5,r18
 c003108:	15ad883a 	add	r22,r2,r22
 c00310c:	c00097c0 	call	c00097c <__mulsi3>
 c003110:	a1000017 	ldw	r4,0(r20)
 c003114:	b00cd43a 	srli	r6,r22,16
 c003118:	b0ffffcc 	andi	r3,r22,65535
 c00311c:	217fffcc 	andi	r5,r4,65535
 c003120:	2c21883a 	add	r16,r5,r16
 c003124:	80c7c83a 	sub	r3,r16,r3
 c003128:	2008d43a 	srli	r4,r4,16
 c00312c:	1185883a 	add	r2,r2,r6
 c003130:	1821d43a 	srai	r16,r3,16
 c003134:	117fffcc 	andi	r5,r2,65535
 c003138:	2149c83a 	sub	r4,r4,r5
 c00313c:	2421883a 	add	r16,r4,r16
 c003140:	8008943a 	slli	r4,r16,16
 c003144:	18ffffcc 	andi	r3,r3,65535
 c003148:	102cd43a 	srli	r22,r2,16
 c00314c:	20c8b03a 	or	r4,r4,r3
 c003150:	a1000015 	stw	r4,0(r20)
 c003154:	8021d43a 	srai	r16,r16,16
 c003158:	a5000104 	addi	r20,r20,4
 c00315c:	e47fe32e 	bgeu	fp,r17,c0030ec <__alt_data_end+0xfc0030ec>
 c003160:	d8c00317 	ldw	r3,12(sp)
 c003164:	18800017 	ldw	r2,0(r3)
 c003168:	10000c1e 	bne	r2,zero,c00319c <quorem+0x13c>
 c00316c:	18bfff04 	addi	r2,r3,-4
 c003170:	9880082e 	bgeu	r19,r2,c003194 <quorem+0x134>
 c003174:	18ffff17 	ldw	r3,-4(r3)
 c003178:	18000326 	beq	r3,zero,c003188 <quorem+0x128>
 c00317c:	00000506 	br	c003194 <quorem+0x134>
 c003180:	10c00017 	ldw	r3,0(r2)
 c003184:	1800031e 	bne	r3,zero,c003194 <quorem+0x134>
 c003188:	10bfff04 	addi	r2,r2,-4
 c00318c:	bdffffc4 	addi	r23,r23,-1
 c003190:	98bffb36 	bltu	r19,r2,c003180 <__alt_data_end+0xfc003180>
 c003194:	d8c00017 	ldw	r3,0(sp)
 c003198:	1dc00415 	stw	r23,16(r3)
 c00319c:	d9400217 	ldw	r5,8(sp)
 c0031a0:	d9000017 	ldw	r4,0(sp)
 c0031a4:	c006b580 	call	c006b58 <__mcmp>
 c0031a8:	10002816 	blt	r2,zero,c00324c <quorem+0x1ec>
 c0031ac:	dc400117 	ldw	r17,4(sp)
 c0031b0:	94800044 	addi	r18,r18,1
 c0031b4:	980d883a 	mov	r6,r19
 c0031b8:	0007883a 	mov	r3,zero
 c0031bc:	31000017 	ldw	r4,0(r6)
 c0031c0:	89400017 	ldw	r5,0(r17)
 c0031c4:	31800104 	addi	r6,r6,4
 c0031c8:	20bfffcc 	andi	r2,r4,65535
 c0031cc:	10c7883a 	add	r3,r2,r3
 c0031d0:	28bfffcc 	andi	r2,r5,65535
 c0031d4:	1885c83a 	sub	r2,r3,r2
 c0031d8:	280ad43a 	srli	r5,r5,16
 c0031dc:	2008d43a 	srli	r4,r4,16
 c0031e0:	1007d43a 	srai	r3,r2,16
 c0031e4:	10bfffcc 	andi	r2,r2,65535
 c0031e8:	2149c83a 	sub	r4,r4,r5
 c0031ec:	20c9883a 	add	r4,r4,r3
 c0031f0:	200a943a 	slli	r5,r4,16
 c0031f4:	8c400104 	addi	r17,r17,4
 c0031f8:	2007d43a 	srai	r3,r4,16
 c0031fc:	2884b03a 	or	r2,r5,r2
 c003200:	30bfff15 	stw	r2,-4(r6)
 c003204:	e47fed2e 	bgeu	fp,r17,c0031bc <__alt_data_end+0xfc0031bc>
 c003208:	bdc5883a 	add	r2,r23,r23
 c00320c:	1085883a 	add	r2,r2,r2
 c003210:	9887883a 	add	r3,r19,r2
 c003214:	18800017 	ldw	r2,0(r3)
 c003218:	10000c1e 	bne	r2,zero,c00324c <quorem+0x1ec>
 c00321c:	18bfff04 	addi	r2,r3,-4
 c003220:	9880082e 	bgeu	r19,r2,c003244 <quorem+0x1e4>
 c003224:	18ffff17 	ldw	r3,-4(r3)
 c003228:	18000326 	beq	r3,zero,c003238 <quorem+0x1d8>
 c00322c:	00000506 	br	c003244 <quorem+0x1e4>
 c003230:	10c00017 	ldw	r3,0(r2)
 c003234:	1800031e 	bne	r3,zero,c003244 <quorem+0x1e4>
 c003238:	10bfff04 	addi	r2,r2,-4
 c00323c:	bdffffc4 	addi	r23,r23,-1
 c003240:	98bffb36 	bltu	r19,r2,c003230 <__alt_data_end+0xfc003230>
 c003244:	d8c00017 	ldw	r3,0(sp)
 c003248:	1dc00415 	stw	r23,16(r3)
 c00324c:	9005883a 	mov	r2,r18
 c003250:	dfc00d17 	ldw	ra,52(sp)
 c003254:	df000c17 	ldw	fp,48(sp)
 c003258:	ddc00b17 	ldw	r23,44(sp)
 c00325c:	dd800a17 	ldw	r22,40(sp)
 c003260:	dd400917 	ldw	r21,36(sp)
 c003264:	dd000817 	ldw	r20,32(sp)
 c003268:	dcc00717 	ldw	r19,28(sp)
 c00326c:	dc800617 	ldw	r18,24(sp)
 c003270:	dc400517 	ldw	r17,20(sp)
 c003274:	dc000417 	ldw	r16,16(sp)
 c003278:	dec00e04 	addi	sp,sp,56
 c00327c:	f800283a 	ret
 c003280:	0005883a 	mov	r2,zero
 c003284:	003ff206 	br	c003250 <__alt_data_end+0xfc003250>

0c003288 <_dtoa_r>:
 c003288:	20801017 	ldw	r2,64(r4)
 c00328c:	deffde04 	addi	sp,sp,-136
 c003290:	df002015 	stw	fp,128(sp)
 c003294:	dcc01b15 	stw	r19,108(sp)
 c003298:	dc801a15 	stw	r18,104(sp)
 c00329c:	dc401915 	stw	r17,100(sp)
 c0032a0:	dc001815 	stw	r16,96(sp)
 c0032a4:	dfc02115 	stw	ra,132(sp)
 c0032a8:	ddc01f15 	stw	r23,124(sp)
 c0032ac:	dd801e15 	stw	r22,120(sp)
 c0032b0:	dd401d15 	stw	r21,116(sp)
 c0032b4:	dd001c15 	stw	r20,112(sp)
 c0032b8:	d9c00315 	stw	r7,12(sp)
 c0032bc:	2039883a 	mov	fp,r4
 c0032c0:	3023883a 	mov	r17,r6
 c0032c4:	2825883a 	mov	r18,r5
 c0032c8:	dc002417 	ldw	r16,144(sp)
 c0032cc:	3027883a 	mov	r19,r6
 c0032d0:	10000826 	beq	r2,zero,c0032f4 <_dtoa_r+0x6c>
 c0032d4:	21801117 	ldw	r6,68(r4)
 c0032d8:	00c00044 	movi	r3,1
 c0032dc:	100b883a 	mov	r5,r2
 c0032e0:	1986983a 	sll	r3,r3,r6
 c0032e4:	11800115 	stw	r6,4(r2)
 c0032e8:	10c00215 	stw	r3,8(r2)
 c0032ec:	c00627c0 	call	c00627c <_Bfree>
 c0032f0:	e0001015 	stw	zero,64(fp)
 c0032f4:	88002e16 	blt	r17,zero,c0033b0 <_dtoa_r+0x128>
 c0032f8:	80000015 	stw	zero,0(r16)
 c0032fc:	889ffc2c 	andhi	r2,r17,32752
 c003300:	00dffc34 	movhi	r3,32752
 c003304:	10c01c26 	beq	r2,r3,c003378 <_dtoa_r+0xf0>
 c003308:	000d883a 	mov	r6,zero
 c00330c:	000f883a 	mov	r7,zero
 c003310:	9009883a 	mov	r4,r18
 c003314:	980b883a 	mov	r5,r19
 c003318:	c00c1c00 	call	c00c1c0 <__eqdf2>
 c00331c:	10002b1e 	bne	r2,zero,c0033cc <_dtoa_r+0x144>
 c003320:	d9c02317 	ldw	r7,140(sp)
 c003324:	00800044 	movi	r2,1
 c003328:	38800015 	stw	r2,0(r7)
 c00332c:	d8802517 	ldw	r2,148(sp)
 c003330:	10019e26 	beq	r2,zero,c0039ac <_dtoa_r+0x724>
 c003334:	d8c02517 	ldw	r3,148(sp)
 c003338:	00830074 	movhi	r2,3073
 c00333c:	10809c44 	addi	r2,r2,625
 c003340:	18800015 	stw	r2,0(r3)
 c003344:	10bfffc4 	addi	r2,r2,-1
 c003348:	dfc02117 	ldw	ra,132(sp)
 c00334c:	df002017 	ldw	fp,128(sp)
 c003350:	ddc01f17 	ldw	r23,124(sp)
 c003354:	dd801e17 	ldw	r22,120(sp)
 c003358:	dd401d17 	ldw	r21,116(sp)
 c00335c:	dd001c17 	ldw	r20,112(sp)
 c003360:	dcc01b17 	ldw	r19,108(sp)
 c003364:	dc801a17 	ldw	r18,104(sp)
 c003368:	dc401917 	ldw	r17,100(sp)
 c00336c:	dc001817 	ldw	r16,96(sp)
 c003370:	dec02204 	addi	sp,sp,136
 c003374:	f800283a 	ret
 c003378:	d8c02317 	ldw	r3,140(sp)
 c00337c:	0089c3c4 	movi	r2,9999
 c003380:	18800015 	stw	r2,0(r3)
 c003384:	90017726 	beq	r18,zero,c003964 <_dtoa_r+0x6dc>
 c003388:	00830074 	movhi	r2,3073
 c00338c:	1080a804 	addi	r2,r2,672
 c003390:	d9002517 	ldw	r4,148(sp)
 c003394:	203fec26 	beq	r4,zero,c003348 <__alt_data_end+0xfc003348>
 c003398:	10c000c7 	ldb	r3,3(r2)
 c00339c:	1801781e 	bne	r3,zero,c003980 <_dtoa_r+0x6f8>
 c0033a0:	10c000c4 	addi	r3,r2,3
 c0033a4:	d9802517 	ldw	r6,148(sp)
 c0033a8:	30c00015 	stw	r3,0(r6)
 c0033ac:	003fe606 	br	c003348 <__alt_data_end+0xfc003348>
 c0033b0:	04e00034 	movhi	r19,32768
 c0033b4:	9cffffc4 	addi	r19,r19,-1
 c0033b8:	00800044 	movi	r2,1
 c0033bc:	8ce6703a 	and	r19,r17,r19
 c0033c0:	80800015 	stw	r2,0(r16)
 c0033c4:	9823883a 	mov	r17,r19
 c0033c8:	003fcc06 	br	c0032fc <__alt_data_end+0xfc0032fc>
 c0033cc:	d8800204 	addi	r2,sp,8
 c0033d0:	d8800015 	stw	r2,0(sp)
 c0033d4:	d9c00104 	addi	r7,sp,4
 c0033d8:	900b883a 	mov	r5,r18
 c0033dc:	980d883a 	mov	r6,r19
 c0033e0:	e009883a 	mov	r4,fp
 c0033e4:	8820d53a 	srli	r16,r17,20
 c0033e8:	c006f240 	call	c006f24 <__d2b>
 c0033ec:	d8800915 	stw	r2,36(sp)
 c0033f0:	8001651e 	bne	r16,zero,c003988 <_dtoa_r+0x700>
 c0033f4:	dd800217 	ldw	r22,8(sp)
 c0033f8:	dc000117 	ldw	r16,4(sp)
 c0033fc:	00800804 	movi	r2,32
 c003400:	b421883a 	add	r16,r22,r16
 c003404:	80c10c84 	addi	r3,r16,1074
 c003408:	10c2d10e 	bge	r2,r3,c003f50 <_dtoa_r+0xcc8>
 c00340c:	00801004 	movi	r2,64
 c003410:	81010484 	addi	r4,r16,1042
 c003414:	10c7c83a 	sub	r3,r2,r3
 c003418:	9108d83a 	srl	r4,r18,r4
 c00341c:	88e2983a 	sll	r17,r17,r3
 c003420:	2448b03a 	or	r4,r4,r17
 c003424:	c00d6dc0 	call	c00d6dc <__floatunsidf>
 c003428:	017f8434 	movhi	r5,65040
 c00342c:	01800044 	movi	r6,1
 c003430:	1009883a 	mov	r4,r2
 c003434:	194b883a 	add	r5,r3,r5
 c003438:	843fffc4 	addi	r16,r16,-1
 c00343c:	d9801115 	stw	r6,68(sp)
 c003440:	000d883a 	mov	r6,zero
 c003444:	01cffe34 	movhi	r7,16376
 c003448:	c00cc840 	call	c00cc84 <__subdf3>
 c00344c:	0198dbf4 	movhi	r6,25455
 c003450:	01cff4f4 	movhi	r7,16339
 c003454:	3190d844 	addi	r6,r6,17249
 c003458:	39e1e9c4 	addi	r7,r7,-30809
 c00345c:	1009883a 	mov	r4,r2
 c003460:	180b883a 	mov	r5,r3
 c003464:	c00c4180 	call	c00c418 <__muldf3>
 c003468:	01a2d874 	movhi	r6,35681
 c00346c:	01cff1f4 	movhi	r7,16327
 c003470:	31b22cc4 	addi	r6,r6,-14157
 c003474:	39e28a04 	addi	r7,r7,-30168
 c003478:	180b883a 	mov	r5,r3
 c00347c:	1009883a 	mov	r4,r2
 c003480:	c00af440 	call	c00af44 <__adddf3>
 c003484:	8009883a 	mov	r4,r16
 c003488:	1029883a 	mov	r20,r2
 c00348c:	1823883a 	mov	r17,r3
 c003490:	c00d6000 	call	c00d600 <__floatsidf>
 c003494:	019427f4 	movhi	r6,20639
 c003498:	01cff4f4 	movhi	r7,16339
 c00349c:	319e7ec4 	addi	r6,r6,31227
 c0034a0:	39d104c4 	addi	r7,r7,17427
 c0034a4:	1009883a 	mov	r4,r2
 c0034a8:	180b883a 	mov	r5,r3
 c0034ac:	c00c4180 	call	c00c418 <__muldf3>
 c0034b0:	100d883a 	mov	r6,r2
 c0034b4:	180f883a 	mov	r7,r3
 c0034b8:	a009883a 	mov	r4,r20
 c0034bc:	880b883a 	mov	r5,r17
 c0034c0:	c00af440 	call	c00af44 <__adddf3>
 c0034c4:	1009883a 	mov	r4,r2
 c0034c8:	180b883a 	mov	r5,r3
 c0034cc:	1029883a 	mov	r20,r2
 c0034d0:	1823883a 	mov	r17,r3
 c0034d4:	c00d5800 	call	c00d580 <__fixdfsi>
 c0034d8:	000d883a 	mov	r6,zero
 c0034dc:	000f883a 	mov	r7,zero
 c0034e0:	a009883a 	mov	r4,r20
 c0034e4:	880b883a 	mov	r5,r17
 c0034e8:	d8800515 	stw	r2,20(sp)
 c0034ec:	c00c3240 	call	c00c324 <__ledf2>
 c0034f0:	10028716 	blt	r2,zero,c003f10 <_dtoa_r+0xc88>
 c0034f4:	d8c00517 	ldw	r3,20(sp)
 c0034f8:	00800584 	movi	r2,22
 c0034fc:	10c27536 	bltu	r2,r3,c003ed4 <_dtoa_r+0xc4c>
 c003500:	180490fa 	slli	r2,r3,3
 c003504:	00c30074 	movhi	r3,3073
 c003508:	18c0c404 	addi	r3,r3,784
 c00350c:	1885883a 	add	r2,r3,r2
 c003510:	11000017 	ldw	r4,0(r2)
 c003514:	11400117 	ldw	r5,4(r2)
 c003518:	900d883a 	mov	r6,r18
 c00351c:	980f883a 	mov	r7,r19
 c003520:	c00c2480 	call	c00c248 <__gedf2>
 c003524:	00828d0e 	bge	zero,r2,c003f5c <_dtoa_r+0xcd4>
 c003528:	d9000517 	ldw	r4,20(sp)
 c00352c:	d8000e15 	stw	zero,56(sp)
 c003530:	213fffc4 	addi	r4,r4,-1
 c003534:	d9000515 	stw	r4,20(sp)
 c003538:	b42dc83a 	sub	r22,r22,r16
 c00353c:	b5bfffc4 	addi	r22,r22,-1
 c003540:	b0026f16 	blt	r22,zero,c003f00 <_dtoa_r+0xc78>
 c003544:	d8000815 	stw	zero,32(sp)
 c003548:	d9c00517 	ldw	r7,20(sp)
 c00354c:	38026416 	blt	r7,zero,c003ee0 <_dtoa_r+0xc58>
 c003550:	b1ed883a 	add	r22,r22,r7
 c003554:	d9c00d15 	stw	r7,52(sp)
 c003558:	d8000a15 	stw	zero,40(sp)
 c00355c:	d9800317 	ldw	r6,12(sp)
 c003560:	00800244 	movi	r2,9
 c003564:	11811436 	bltu	r2,r6,c0039b8 <_dtoa_r+0x730>
 c003568:	00800144 	movi	r2,5
 c00356c:	1184e10e 	bge	r2,r6,c0048f4 <_dtoa_r+0x166c>
 c003570:	31bfff04 	addi	r6,r6,-4
 c003574:	d9800315 	stw	r6,12(sp)
 c003578:	0023883a 	mov	r17,zero
 c00357c:	d9800317 	ldw	r6,12(sp)
 c003580:	008000c4 	movi	r2,3
 c003584:	30836726 	beq	r6,r2,c004324 <_dtoa_r+0x109c>
 c003588:	1183410e 	bge	r2,r6,c004290 <_dtoa_r+0x1008>
 c00358c:	d9c00317 	ldw	r7,12(sp)
 c003590:	00800104 	movi	r2,4
 c003594:	38827c26 	beq	r7,r2,c003f88 <_dtoa_r+0xd00>
 c003598:	00800144 	movi	r2,5
 c00359c:	3884c41e 	bne	r7,r2,c0048b0 <_dtoa_r+0x1628>
 c0035a0:	00800044 	movi	r2,1
 c0035a4:	d8800b15 	stw	r2,44(sp)
 c0035a8:	d8c00517 	ldw	r3,20(sp)
 c0035ac:	d9002217 	ldw	r4,136(sp)
 c0035b0:	1907883a 	add	r3,r3,r4
 c0035b4:	19800044 	addi	r6,r3,1
 c0035b8:	d8c00c15 	stw	r3,48(sp)
 c0035bc:	d9800615 	stw	r6,24(sp)
 c0035c0:	0183a40e 	bge	zero,r6,c004454 <_dtoa_r+0x11cc>
 c0035c4:	d9800617 	ldw	r6,24(sp)
 c0035c8:	3021883a 	mov	r16,r6
 c0035cc:	e0001115 	stw	zero,68(fp)
 c0035d0:	008005c4 	movi	r2,23
 c0035d4:	1184c92e 	bgeu	r2,r6,c0048fc <_dtoa_r+0x1674>
 c0035d8:	00c00044 	movi	r3,1
 c0035dc:	00800104 	movi	r2,4
 c0035e0:	1085883a 	add	r2,r2,r2
 c0035e4:	11000504 	addi	r4,r2,20
 c0035e8:	180b883a 	mov	r5,r3
 c0035ec:	18c00044 	addi	r3,r3,1
 c0035f0:	313ffb2e 	bgeu	r6,r4,c0035e0 <__alt_data_end+0xfc0035e0>
 c0035f4:	e1401115 	stw	r5,68(fp)
 c0035f8:	e009883a 	mov	r4,fp
 c0035fc:	c0061d40 	call	c0061d4 <_Balloc>
 c003600:	d8800715 	stw	r2,28(sp)
 c003604:	e0801015 	stw	r2,64(fp)
 c003608:	00800384 	movi	r2,14
 c00360c:	1400f736 	bltu	r2,r16,c0039ec <_dtoa_r+0x764>
 c003610:	8800f626 	beq	r17,zero,c0039ec <_dtoa_r+0x764>
 c003614:	d9c00517 	ldw	r7,20(sp)
 c003618:	01c39a0e 	bge	zero,r7,c004484 <_dtoa_r+0x11fc>
 c00361c:	388003cc 	andi	r2,r7,15
 c003620:	100490fa 	slli	r2,r2,3
 c003624:	382bd13a 	srai	r21,r7,4
 c003628:	00c30074 	movhi	r3,3073
 c00362c:	18c0c404 	addi	r3,r3,784
 c003630:	1885883a 	add	r2,r3,r2
 c003634:	a8c0040c 	andi	r3,r21,16
 c003638:	12400017 	ldw	r9,0(r2)
 c00363c:	12000117 	ldw	r8,4(r2)
 c003640:	18037926 	beq	r3,zero,c004428 <_dtoa_r+0x11a0>
 c003644:	00830074 	movhi	r2,3073
 c003648:	1080ba04 	addi	r2,r2,744
 c00364c:	11800817 	ldw	r6,32(r2)
 c003650:	11c00917 	ldw	r7,36(r2)
 c003654:	9009883a 	mov	r4,r18
 c003658:	980b883a 	mov	r5,r19
 c00365c:	da001715 	stw	r8,92(sp)
 c003660:	da401615 	stw	r9,88(sp)
 c003664:	c00b7f00 	call	c00b7f0 <__divdf3>
 c003668:	da001717 	ldw	r8,92(sp)
 c00366c:	da401617 	ldw	r9,88(sp)
 c003670:	ad4003cc 	andi	r21,r21,15
 c003674:	040000c4 	movi	r16,3
 c003678:	1023883a 	mov	r17,r2
 c00367c:	1829883a 	mov	r20,r3
 c003680:	a8001126 	beq	r21,zero,c0036c8 <_dtoa_r+0x440>
 c003684:	05c30074 	movhi	r23,3073
 c003688:	bdc0ba04 	addi	r23,r23,744
 c00368c:	4805883a 	mov	r2,r9
 c003690:	4007883a 	mov	r3,r8
 c003694:	a980004c 	andi	r6,r21,1
 c003698:	1009883a 	mov	r4,r2
 c00369c:	a82bd07a 	srai	r21,r21,1
 c0036a0:	180b883a 	mov	r5,r3
 c0036a4:	30000426 	beq	r6,zero,c0036b8 <_dtoa_r+0x430>
 c0036a8:	b9800017 	ldw	r6,0(r23)
 c0036ac:	b9c00117 	ldw	r7,4(r23)
 c0036b0:	84000044 	addi	r16,r16,1
 c0036b4:	c00c4180 	call	c00c418 <__muldf3>
 c0036b8:	bdc00204 	addi	r23,r23,8
 c0036bc:	a83ff51e 	bne	r21,zero,c003694 <__alt_data_end+0xfc003694>
 c0036c0:	1013883a 	mov	r9,r2
 c0036c4:	1811883a 	mov	r8,r3
 c0036c8:	480d883a 	mov	r6,r9
 c0036cc:	400f883a 	mov	r7,r8
 c0036d0:	8809883a 	mov	r4,r17
 c0036d4:	a00b883a 	mov	r5,r20
 c0036d8:	c00b7f00 	call	c00b7f0 <__divdf3>
 c0036dc:	d8800f15 	stw	r2,60(sp)
 c0036e0:	d8c01015 	stw	r3,64(sp)
 c0036e4:	d8c00e17 	ldw	r3,56(sp)
 c0036e8:	18000626 	beq	r3,zero,c003704 <_dtoa_r+0x47c>
 c0036ec:	d9000f17 	ldw	r4,60(sp)
 c0036f0:	d9401017 	ldw	r5,64(sp)
 c0036f4:	000d883a 	mov	r6,zero
 c0036f8:	01cffc34 	movhi	r7,16368
 c0036fc:	c00c3240 	call	c00c324 <__ledf2>
 c003700:	10040b16 	blt	r2,zero,c004730 <_dtoa_r+0x14a8>
 c003704:	8009883a 	mov	r4,r16
 c003708:	c00d6000 	call	c00d600 <__floatsidf>
 c00370c:	d9800f17 	ldw	r6,60(sp)
 c003710:	d9c01017 	ldw	r7,64(sp)
 c003714:	1009883a 	mov	r4,r2
 c003718:	180b883a 	mov	r5,r3
 c00371c:	c00c4180 	call	c00c418 <__muldf3>
 c003720:	000d883a 	mov	r6,zero
 c003724:	01d00734 	movhi	r7,16412
 c003728:	1009883a 	mov	r4,r2
 c00372c:	180b883a 	mov	r5,r3
 c003730:	c00af440 	call	c00af44 <__adddf3>
 c003734:	1021883a 	mov	r16,r2
 c003738:	d8800617 	ldw	r2,24(sp)
 c00373c:	047f3034 	movhi	r17,64704
 c003740:	1c63883a 	add	r17,r3,r17
 c003744:	10031826 	beq	r2,zero,c0043a8 <_dtoa_r+0x1120>
 c003748:	d8c00517 	ldw	r3,20(sp)
 c00374c:	db000617 	ldw	r12,24(sp)
 c003750:	d8c01315 	stw	r3,76(sp)
 c003754:	d9000b17 	ldw	r4,44(sp)
 c003758:	20038f26 	beq	r4,zero,c004598 <_dtoa_r+0x1310>
 c00375c:	60bfffc4 	addi	r2,r12,-1
 c003760:	100490fa 	slli	r2,r2,3
 c003764:	00c30074 	movhi	r3,3073
 c003768:	18c0c404 	addi	r3,r3,784
 c00376c:	1885883a 	add	r2,r3,r2
 c003770:	11800017 	ldw	r6,0(r2)
 c003774:	11c00117 	ldw	r7,4(r2)
 c003778:	d8800717 	ldw	r2,28(sp)
 c00377c:	0009883a 	mov	r4,zero
 c003780:	014ff834 	movhi	r5,16352
 c003784:	db001615 	stw	r12,88(sp)
 c003788:	15c00044 	addi	r23,r2,1
 c00378c:	c00b7f00 	call	c00b7f0 <__divdf3>
 c003790:	800d883a 	mov	r6,r16
 c003794:	880f883a 	mov	r7,r17
 c003798:	1009883a 	mov	r4,r2
 c00379c:	180b883a 	mov	r5,r3
 c0037a0:	c00cc840 	call	c00cc84 <__subdf3>
 c0037a4:	d9401017 	ldw	r5,64(sp)
 c0037a8:	d9000f17 	ldw	r4,60(sp)
 c0037ac:	102b883a 	mov	r21,r2
 c0037b0:	d8c01215 	stw	r3,72(sp)
 c0037b4:	c00d5800 	call	c00d580 <__fixdfsi>
 c0037b8:	1009883a 	mov	r4,r2
 c0037bc:	1029883a 	mov	r20,r2
 c0037c0:	c00d6000 	call	c00d600 <__floatsidf>
 c0037c4:	d9000f17 	ldw	r4,60(sp)
 c0037c8:	d9401017 	ldw	r5,64(sp)
 c0037cc:	100d883a 	mov	r6,r2
 c0037d0:	180f883a 	mov	r7,r3
 c0037d4:	c00cc840 	call	c00cc84 <__subdf3>
 c0037d8:	1823883a 	mov	r17,r3
 c0037dc:	d8c00717 	ldw	r3,28(sp)
 c0037e0:	d9401217 	ldw	r5,72(sp)
 c0037e4:	a2000c04 	addi	r8,r20,48
 c0037e8:	1021883a 	mov	r16,r2
 c0037ec:	1a000005 	stb	r8,0(r3)
 c0037f0:	800d883a 	mov	r6,r16
 c0037f4:	880f883a 	mov	r7,r17
 c0037f8:	a809883a 	mov	r4,r21
 c0037fc:	4029883a 	mov	r20,r8
 c003800:	c00c2480 	call	c00c248 <__gedf2>
 c003804:	00841d16 	blt	zero,r2,c00487c <_dtoa_r+0x15f4>
 c003808:	800d883a 	mov	r6,r16
 c00380c:	880f883a 	mov	r7,r17
 c003810:	0009883a 	mov	r4,zero
 c003814:	014ffc34 	movhi	r5,16368
 c003818:	c00cc840 	call	c00cc84 <__subdf3>
 c00381c:	d9401217 	ldw	r5,72(sp)
 c003820:	100d883a 	mov	r6,r2
 c003824:	180f883a 	mov	r7,r3
 c003828:	a809883a 	mov	r4,r21
 c00382c:	c00c2480 	call	c00c248 <__gedf2>
 c003830:	db001617 	ldw	r12,88(sp)
 c003834:	00840e16 	blt	zero,r2,c004870 <_dtoa_r+0x15e8>
 c003838:	00800044 	movi	r2,1
 c00383c:	13006b0e 	bge	r2,r12,c0039ec <_dtoa_r+0x764>
 c003840:	d9000717 	ldw	r4,28(sp)
 c003844:	dd800f15 	stw	r22,60(sp)
 c003848:	dcc01015 	stw	r19,64(sp)
 c00384c:	2319883a 	add	r12,r4,r12
 c003850:	dcc01217 	ldw	r19,72(sp)
 c003854:	602d883a 	mov	r22,r12
 c003858:	dc801215 	stw	r18,72(sp)
 c00385c:	b825883a 	mov	r18,r23
 c003860:	00000906 	br	c003888 <_dtoa_r+0x600>
 c003864:	c00cc840 	call	c00cc84 <__subdf3>
 c003868:	a80d883a 	mov	r6,r21
 c00386c:	980f883a 	mov	r7,r19
 c003870:	1009883a 	mov	r4,r2
 c003874:	180b883a 	mov	r5,r3
 c003878:	c00c3240 	call	c00c324 <__ledf2>
 c00387c:	1003e816 	blt	r2,zero,c004820 <_dtoa_r+0x1598>
 c003880:	b825883a 	mov	r18,r23
 c003884:	bd83e926 	beq	r23,r22,c00482c <_dtoa_r+0x15a4>
 c003888:	a809883a 	mov	r4,r21
 c00388c:	980b883a 	mov	r5,r19
 c003890:	000d883a 	mov	r6,zero
 c003894:	01d00934 	movhi	r7,16420
 c003898:	c00c4180 	call	c00c418 <__muldf3>
 c00389c:	000d883a 	mov	r6,zero
 c0038a0:	01d00934 	movhi	r7,16420
 c0038a4:	8009883a 	mov	r4,r16
 c0038a8:	880b883a 	mov	r5,r17
 c0038ac:	102b883a 	mov	r21,r2
 c0038b0:	1827883a 	mov	r19,r3
 c0038b4:	c00c4180 	call	c00c418 <__muldf3>
 c0038b8:	180b883a 	mov	r5,r3
 c0038bc:	1009883a 	mov	r4,r2
 c0038c0:	1821883a 	mov	r16,r3
 c0038c4:	1023883a 	mov	r17,r2
 c0038c8:	c00d5800 	call	c00d580 <__fixdfsi>
 c0038cc:	1009883a 	mov	r4,r2
 c0038d0:	1029883a 	mov	r20,r2
 c0038d4:	c00d6000 	call	c00d600 <__floatsidf>
 c0038d8:	8809883a 	mov	r4,r17
 c0038dc:	800b883a 	mov	r5,r16
 c0038e0:	100d883a 	mov	r6,r2
 c0038e4:	180f883a 	mov	r7,r3
 c0038e8:	c00cc840 	call	c00cc84 <__subdf3>
 c0038ec:	a5000c04 	addi	r20,r20,48
 c0038f0:	a80d883a 	mov	r6,r21
 c0038f4:	980f883a 	mov	r7,r19
 c0038f8:	1009883a 	mov	r4,r2
 c0038fc:	180b883a 	mov	r5,r3
 c003900:	95000005 	stb	r20,0(r18)
 c003904:	1021883a 	mov	r16,r2
 c003908:	1823883a 	mov	r17,r3
 c00390c:	c00c3240 	call	c00c324 <__ledf2>
 c003910:	bdc00044 	addi	r23,r23,1
 c003914:	800d883a 	mov	r6,r16
 c003918:	880f883a 	mov	r7,r17
 c00391c:	0009883a 	mov	r4,zero
 c003920:	014ffc34 	movhi	r5,16368
 c003924:	103fcf0e 	bge	r2,zero,c003864 <__alt_data_end+0xfc003864>
 c003928:	d8c01317 	ldw	r3,76(sp)
 c00392c:	d8c00515 	stw	r3,20(sp)
 c003930:	d9400917 	ldw	r5,36(sp)
 c003934:	e009883a 	mov	r4,fp
 c003938:	c00627c0 	call	c00627c <_Bfree>
 c00393c:	d9000517 	ldw	r4,20(sp)
 c003940:	d9802317 	ldw	r6,140(sp)
 c003944:	d9c02517 	ldw	r7,148(sp)
 c003948:	b8000005 	stb	zero,0(r23)
 c00394c:	20800044 	addi	r2,r4,1
 c003950:	30800015 	stw	r2,0(r6)
 c003954:	3802aa26 	beq	r7,zero,c004400 <_dtoa_r+0x1178>
 c003958:	3dc00015 	stw	r23,0(r7)
 c00395c:	d8800717 	ldw	r2,28(sp)
 c003960:	003e7906 	br	c003348 <__alt_data_end+0xfc003348>
 c003964:	00800434 	movhi	r2,16
 c003968:	10bfffc4 	addi	r2,r2,-1
 c00396c:	88a2703a 	and	r17,r17,r2
 c003970:	883e851e 	bne	r17,zero,c003388 <__alt_data_end+0xfc003388>
 c003974:	00830074 	movhi	r2,3073
 c003978:	1080a504 	addi	r2,r2,660
 c00397c:	003e8406 	br	c003390 <__alt_data_end+0xfc003390>
 c003980:	10c00204 	addi	r3,r2,8
 c003984:	003e8706 	br	c0033a4 <__alt_data_end+0xfc0033a4>
 c003988:	01400434 	movhi	r5,16
 c00398c:	297fffc4 	addi	r5,r5,-1
 c003990:	994a703a 	and	r5,r19,r5
 c003994:	9009883a 	mov	r4,r18
 c003998:	843f0044 	addi	r16,r16,-1023
 c00399c:	294ffc34 	orhi	r5,r5,16368
 c0039a0:	dd800217 	ldw	r22,8(sp)
 c0039a4:	d8001115 	stw	zero,68(sp)
 c0039a8:	003ea506 	br	c003440 <__alt_data_end+0xfc003440>
 c0039ac:	00830074 	movhi	r2,3073
 c0039b0:	10809c04 	addi	r2,r2,624
 c0039b4:	003e6406 	br	c003348 <__alt_data_end+0xfc003348>
 c0039b8:	e0001115 	stw	zero,68(fp)
 c0039bc:	000b883a 	mov	r5,zero
 c0039c0:	e009883a 	mov	r4,fp
 c0039c4:	c0061d40 	call	c0061d4 <_Balloc>
 c0039c8:	01bfffc4 	movi	r6,-1
 c0039cc:	01c00044 	movi	r7,1
 c0039d0:	d8800715 	stw	r2,28(sp)
 c0039d4:	d9800c15 	stw	r6,48(sp)
 c0039d8:	e0801015 	stw	r2,64(fp)
 c0039dc:	d8000315 	stw	zero,12(sp)
 c0039e0:	d9c00b15 	stw	r7,44(sp)
 c0039e4:	d9800615 	stw	r6,24(sp)
 c0039e8:	d8002215 	stw	zero,136(sp)
 c0039ec:	d8800117 	ldw	r2,4(sp)
 c0039f0:	10008916 	blt	r2,zero,c003c18 <_dtoa_r+0x990>
 c0039f4:	d9000517 	ldw	r4,20(sp)
 c0039f8:	00c00384 	movi	r3,14
 c0039fc:	19008616 	blt	r3,r4,c003c18 <_dtoa_r+0x990>
 c003a00:	200490fa 	slli	r2,r4,3
 c003a04:	00c30074 	movhi	r3,3073
 c003a08:	d9802217 	ldw	r6,136(sp)
 c003a0c:	18c0c404 	addi	r3,r3,784
 c003a10:	1885883a 	add	r2,r3,r2
 c003a14:	14000017 	ldw	r16,0(r2)
 c003a18:	14400117 	ldw	r17,4(r2)
 c003a1c:	30016316 	blt	r6,zero,c003fac <_dtoa_r+0xd24>
 c003a20:	800d883a 	mov	r6,r16
 c003a24:	880f883a 	mov	r7,r17
 c003a28:	9009883a 	mov	r4,r18
 c003a2c:	980b883a 	mov	r5,r19
 c003a30:	c00b7f00 	call	c00b7f0 <__divdf3>
 c003a34:	180b883a 	mov	r5,r3
 c003a38:	1009883a 	mov	r4,r2
 c003a3c:	c00d5800 	call	c00d580 <__fixdfsi>
 c003a40:	1009883a 	mov	r4,r2
 c003a44:	102b883a 	mov	r21,r2
 c003a48:	c00d6000 	call	c00d600 <__floatsidf>
 c003a4c:	800d883a 	mov	r6,r16
 c003a50:	880f883a 	mov	r7,r17
 c003a54:	1009883a 	mov	r4,r2
 c003a58:	180b883a 	mov	r5,r3
 c003a5c:	c00c4180 	call	c00c418 <__muldf3>
 c003a60:	100d883a 	mov	r6,r2
 c003a64:	180f883a 	mov	r7,r3
 c003a68:	9009883a 	mov	r4,r18
 c003a6c:	980b883a 	mov	r5,r19
 c003a70:	c00cc840 	call	c00cc84 <__subdf3>
 c003a74:	d9c00717 	ldw	r7,28(sp)
 c003a78:	1009883a 	mov	r4,r2
 c003a7c:	a8800c04 	addi	r2,r21,48
 c003a80:	38800005 	stb	r2,0(r7)
 c003a84:	3dc00044 	addi	r23,r7,1
 c003a88:	d9c00617 	ldw	r7,24(sp)
 c003a8c:	01800044 	movi	r6,1
 c003a90:	180b883a 	mov	r5,r3
 c003a94:	2005883a 	mov	r2,r4
 c003a98:	39803826 	beq	r7,r6,c003b7c <_dtoa_r+0x8f4>
 c003a9c:	000d883a 	mov	r6,zero
 c003aa0:	01d00934 	movhi	r7,16420
 c003aa4:	c00c4180 	call	c00c418 <__muldf3>
 c003aa8:	000d883a 	mov	r6,zero
 c003aac:	000f883a 	mov	r7,zero
 c003ab0:	1009883a 	mov	r4,r2
 c003ab4:	180b883a 	mov	r5,r3
 c003ab8:	1025883a 	mov	r18,r2
 c003abc:	1827883a 	mov	r19,r3
 c003ac0:	c00c1c00 	call	c00c1c0 <__eqdf2>
 c003ac4:	103f9a26 	beq	r2,zero,c003930 <__alt_data_end+0xfc003930>
 c003ac8:	d9c00617 	ldw	r7,24(sp)
 c003acc:	d8c00717 	ldw	r3,28(sp)
 c003ad0:	b829883a 	mov	r20,r23
 c003ad4:	38bfffc4 	addi	r2,r7,-1
 c003ad8:	18ad883a 	add	r22,r3,r2
 c003adc:	00000a06 	br	c003b08 <_dtoa_r+0x880>
 c003ae0:	c00c4180 	call	c00c418 <__muldf3>
 c003ae4:	000d883a 	mov	r6,zero
 c003ae8:	000f883a 	mov	r7,zero
 c003aec:	1009883a 	mov	r4,r2
 c003af0:	180b883a 	mov	r5,r3
 c003af4:	1025883a 	mov	r18,r2
 c003af8:	1827883a 	mov	r19,r3
 c003afc:	b829883a 	mov	r20,r23
 c003b00:	c00c1c00 	call	c00c1c0 <__eqdf2>
 c003b04:	103f8a26 	beq	r2,zero,c003930 <__alt_data_end+0xfc003930>
 c003b08:	800d883a 	mov	r6,r16
 c003b0c:	880f883a 	mov	r7,r17
 c003b10:	9009883a 	mov	r4,r18
 c003b14:	980b883a 	mov	r5,r19
 c003b18:	c00b7f00 	call	c00b7f0 <__divdf3>
 c003b1c:	180b883a 	mov	r5,r3
 c003b20:	1009883a 	mov	r4,r2
 c003b24:	c00d5800 	call	c00d580 <__fixdfsi>
 c003b28:	1009883a 	mov	r4,r2
 c003b2c:	102b883a 	mov	r21,r2
 c003b30:	c00d6000 	call	c00d600 <__floatsidf>
 c003b34:	800d883a 	mov	r6,r16
 c003b38:	880f883a 	mov	r7,r17
 c003b3c:	1009883a 	mov	r4,r2
 c003b40:	180b883a 	mov	r5,r3
 c003b44:	c00c4180 	call	c00c418 <__muldf3>
 c003b48:	100d883a 	mov	r6,r2
 c003b4c:	180f883a 	mov	r7,r3
 c003b50:	9009883a 	mov	r4,r18
 c003b54:	980b883a 	mov	r5,r19
 c003b58:	c00cc840 	call	c00cc84 <__subdf3>
 c003b5c:	aa000c04 	addi	r8,r21,48
 c003b60:	a2000005 	stb	r8,0(r20)
 c003b64:	000d883a 	mov	r6,zero
 c003b68:	01d00934 	movhi	r7,16420
 c003b6c:	1009883a 	mov	r4,r2
 c003b70:	180b883a 	mov	r5,r3
 c003b74:	a5c00044 	addi	r23,r20,1
 c003b78:	b53fd91e 	bne	r22,r20,c003ae0 <__alt_data_end+0xfc003ae0>
 c003b7c:	100d883a 	mov	r6,r2
 c003b80:	180f883a 	mov	r7,r3
 c003b84:	1009883a 	mov	r4,r2
 c003b88:	180b883a 	mov	r5,r3
 c003b8c:	c00af440 	call	c00af44 <__adddf3>
 c003b90:	100d883a 	mov	r6,r2
 c003b94:	180f883a 	mov	r7,r3
 c003b98:	8009883a 	mov	r4,r16
 c003b9c:	880b883a 	mov	r5,r17
 c003ba0:	1027883a 	mov	r19,r2
 c003ba4:	1825883a 	mov	r18,r3
 c003ba8:	c00c3240 	call	c00c324 <__ledf2>
 c003bac:	10000816 	blt	r2,zero,c003bd0 <_dtoa_r+0x948>
 c003bb0:	980d883a 	mov	r6,r19
 c003bb4:	900f883a 	mov	r7,r18
 c003bb8:	8009883a 	mov	r4,r16
 c003bbc:	880b883a 	mov	r5,r17
 c003bc0:	c00c1c00 	call	c00c1c0 <__eqdf2>
 c003bc4:	103f5a1e 	bne	r2,zero,c003930 <__alt_data_end+0xfc003930>
 c003bc8:	ad40004c 	andi	r21,r21,1
 c003bcc:	a83f5826 	beq	r21,zero,c003930 <__alt_data_end+0xfc003930>
 c003bd0:	bd3fffc3 	ldbu	r20,-1(r23)
 c003bd4:	b8bfffc4 	addi	r2,r23,-1
 c003bd8:	1007883a 	mov	r3,r2
 c003bdc:	01400e44 	movi	r5,57
 c003be0:	d9800717 	ldw	r6,28(sp)
 c003be4:	00000506 	br	c003bfc <_dtoa_r+0x974>
 c003be8:	18ffffc4 	addi	r3,r3,-1
 c003bec:	11824726 	beq	r2,r6,c00450c <_dtoa_r+0x1284>
 c003bf0:	1d000003 	ldbu	r20,0(r3)
 c003bf4:	102f883a 	mov	r23,r2
 c003bf8:	10bfffc4 	addi	r2,r2,-1
 c003bfc:	a1003fcc 	andi	r4,r20,255
 c003c00:	2100201c 	xori	r4,r4,128
 c003c04:	213fe004 	addi	r4,r4,-128
 c003c08:	217ff726 	beq	r4,r5,c003be8 <__alt_data_end+0xfc003be8>
 c003c0c:	a2000044 	addi	r8,r20,1
 c003c10:	12000005 	stb	r8,0(r2)
 c003c14:	003f4606 	br	c003930 <__alt_data_end+0xfc003930>
 c003c18:	d9000b17 	ldw	r4,44(sp)
 c003c1c:	2000c826 	beq	r4,zero,c003f40 <_dtoa_r+0xcb8>
 c003c20:	d9800317 	ldw	r6,12(sp)
 c003c24:	00c00044 	movi	r3,1
 c003c28:	1980f90e 	bge	r3,r6,c004010 <_dtoa_r+0xd88>
 c003c2c:	d8800617 	ldw	r2,24(sp)
 c003c30:	d8c00a17 	ldw	r3,40(sp)
 c003c34:	157fffc4 	addi	r21,r2,-1
 c003c38:	1d41f316 	blt	r3,r21,c004408 <_dtoa_r+0x1180>
 c003c3c:	1d6bc83a 	sub	r21,r3,r21
 c003c40:	d9c00617 	ldw	r7,24(sp)
 c003c44:	3802aa16 	blt	r7,zero,c0046f0 <_dtoa_r+0x1468>
 c003c48:	dd000817 	ldw	r20,32(sp)
 c003c4c:	d8800617 	ldw	r2,24(sp)
 c003c50:	d8c00817 	ldw	r3,32(sp)
 c003c54:	01400044 	movi	r5,1
 c003c58:	e009883a 	mov	r4,fp
 c003c5c:	1887883a 	add	r3,r3,r2
 c003c60:	d8c00815 	stw	r3,32(sp)
 c003c64:	b0ad883a 	add	r22,r22,r2
 c003c68:	c0066080 	call	c006608 <__i2b>
 c003c6c:	1023883a 	mov	r17,r2
 c003c70:	a0000826 	beq	r20,zero,c003c94 <_dtoa_r+0xa0c>
 c003c74:	0580070e 	bge	zero,r22,c003c94 <_dtoa_r+0xa0c>
 c003c78:	a005883a 	mov	r2,r20
 c003c7c:	b500b916 	blt	r22,r20,c003f64 <_dtoa_r+0xcdc>
 c003c80:	d9000817 	ldw	r4,32(sp)
 c003c84:	a0a9c83a 	sub	r20,r20,r2
 c003c88:	b0adc83a 	sub	r22,r22,r2
 c003c8c:	2089c83a 	sub	r4,r4,r2
 c003c90:	d9000815 	stw	r4,32(sp)
 c003c94:	d9800a17 	ldw	r6,40(sp)
 c003c98:	0181810e 	bge	zero,r6,c0042a0 <_dtoa_r+0x1018>
 c003c9c:	d9c00b17 	ldw	r7,44(sp)
 c003ca0:	3800b326 	beq	r7,zero,c003f70 <_dtoa_r+0xce8>
 c003ca4:	a800b226 	beq	r21,zero,c003f70 <_dtoa_r+0xce8>
 c003ca8:	880b883a 	mov	r5,r17
 c003cac:	a80d883a 	mov	r6,r21
 c003cb0:	e009883a 	mov	r4,fp
 c003cb4:	c0068d00 	call	c0068d0 <__pow5mult>
 c003cb8:	d9800917 	ldw	r6,36(sp)
 c003cbc:	100b883a 	mov	r5,r2
 c003cc0:	e009883a 	mov	r4,fp
 c003cc4:	1023883a 	mov	r17,r2
 c003cc8:	c0066440 	call	c006644 <__multiply>
 c003ccc:	1021883a 	mov	r16,r2
 c003cd0:	d8800a17 	ldw	r2,40(sp)
 c003cd4:	d9400917 	ldw	r5,36(sp)
 c003cd8:	e009883a 	mov	r4,fp
 c003cdc:	1545c83a 	sub	r2,r2,r21
 c003ce0:	d8800a15 	stw	r2,40(sp)
 c003ce4:	c00627c0 	call	c00627c <_Bfree>
 c003ce8:	d8c00a17 	ldw	r3,40(sp)
 c003cec:	18009f1e 	bne	r3,zero,c003f6c <_dtoa_r+0xce4>
 c003cf0:	05c00044 	movi	r23,1
 c003cf4:	e009883a 	mov	r4,fp
 c003cf8:	b80b883a 	mov	r5,r23
 c003cfc:	c0066080 	call	c006608 <__i2b>
 c003d00:	d9000d17 	ldw	r4,52(sp)
 c003d04:	102b883a 	mov	r21,r2
 c003d08:	2000ce26 	beq	r4,zero,c004044 <_dtoa_r+0xdbc>
 c003d0c:	200d883a 	mov	r6,r4
 c003d10:	100b883a 	mov	r5,r2
 c003d14:	e009883a 	mov	r4,fp
 c003d18:	c0068d00 	call	c0068d0 <__pow5mult>
 c003d1c:	d9800317 	ldw	r6,12(sp)
 c003d20:	102b883a 	mov	r21,r2
 c003d24:	b981810e 	bge	r23,r6,c00432c <_dtoa_r+0x10a4>
 c003d28:	0027883a 	mov	r19,zero
 c003d2c:	a8800417 	ldw	r2,16(r21)
 c003d30:	05c00804 	movi	r23,32
 c003d34:	10800104 	addi	r2,r2,4
 c003d38:	1085883a 	add	r2,r2,r2
 c003d3c:	1085883a 	add	r2,r2,r2
 c003d40:	a885883a 	add	r2,r21,r2
 c003d44:	11000017 	ldw	r4,0(r2)
 c003d48:	c0064f00 	call	c0064f0 <__hi0bits>
 c003d4c:	b885c83a 	sub	r2,r23,r2
 c003d50:	1585883a 	add	r2,r2,r22
 c003d54:	108007cc 	andi	r2,r2,31
 c003d58:	1000b326 	beq	r2,zero,c004028 <_dtoa_r+0xda0>
 c003d5c:	00c00804 	movi	r3,32
 c003d60:	1887c83a 	sub	r3,r3,r2
 c003d64:	01000104 	movi	r4,4
 c003d68:	20c2cd0e 	bge	r4,r3,c0048a0 <_dtoa_r+0x1618>
 c003d6c:	00c00704 	movi	r3,28
 c003d70:	1885c83a 	sub	r2,r3,r2
 c003d74:	d8c00817 	ldw	r3,32(sp)
 c003d78:	a0a9883a 	add	r20,r20,r2
 c003d7c:	b0ad883a 	add	r22,r22,r2
 c003d80:	1887883a 	add	r3,r3,r2
 c003d84:	d8c00815 	stw	r3,32(sp)
 c003d88:	d9800817 	ldw	r6,32(sp)
 c003d8c:	0180040e 	bge	zero,r6,c003da0 <_dtoa_r+0xb18>
 c003d90:	800b883a 	mov	r5,r16
 c003d94:	e009883a 	mov	r4,fp
 c003d98:	c006a100 	call	c006a10 <__lshift>
 c003d9c:	1021883a 	mov	r16,r2
 c003da0:	0580050e 	bge	zero,r22,c003db8 <_dtoa_r+0xb30>
 c003da4:	a80b883a 	mov	r5,r21
 c003da8:	b00d883a 	mov	r6,r22
 c003dac:	e009883a 	mov	r4,fp
 c003db0:	c006a100 	call	c006a10 <__lshift>
 c003db4:	102b883a 	mov	r21,r2
 c003db8:	d9c00e17 	ldw	r7,56(sp)
 c003dbc:	3801211e 	bne	r7,zero,c004244 <_dtoa_r+0xfbc>
 c003dc0:	d9800617 	ldw	r6,24(sp)
 c003dc4:	0181380e 	bge	zero,r6,c0042a8 <_dtoa_r+0x1020>
 c003dc8:	d8c00b17 	ldw	r3,44(sp)
 c003dcc:	1800ab1e 	bne	r3,zero,c00407c <_dtoa_r+0xdf4>
 c003dd0:	dc800717 	ldw	r18,28(sp)
 c003dd4:	dcc00617 	ldw	r19,24(sp)
 c003dd8:	9029883a 	mov	r20,r18
 c003ddc:	00000206 	br	c003de8 <_dtoa_r+0xb60>
 c003de0:	c0062a40 	call	c0062a4 <__multadd>
 c003de4:	1021883a 	mov	r16,r2
 c003de8:	a80b883a 	mov	r5,r21
 c003dec:	8009883a 	mov	r4,r16
 c003df0:	c0030600 	call	c003060 <quorem>
 c003df4:	10800c04 	addi	r2,r2,48
 c003df8:	90800005 	stb	r2,0(r18)
 c003dfc:	94800044 	addi	r18,r18,1
 c003e00:	9507c83a 	sub	r3,r18,r20
 c003e04:	000f883a 	mov	r7,zero
 c003e08:	01800284 	movi	r6,10
 c003e0c:	800b883a 	mov	r5,r16
 c003e10:	e009883a 	mov	r4,fp
 c003e14:	1cfff216 	blt	r3,r19,c003de0 <__alt_data_end+0xfc003de0>
 c003e18:	1011883a 	mov	r8,r2
 c003e1c:	d8800617 	ldw	r2,24(sp)
 c003e20:	0082370e 	bge	zero,r2,c004700 <_dtoa_r+0x1478>
 c003e24:	d9000717 	ldw	r4,28(sp)
 c003e28:	0025883a 	mov	r18,zero
 c003e2c:	20af883a 	add	r23,r4,r2
 c003e30:	01800044 	movi	r6,1
 c003e34:	800b883a 	mov	r5,r16
 c003e38:	e009883a 	mov	r4,fp
 c003e3c:	da001715 	stw	r8,92(sp)
 c003e40:	c006a100 	call	c006a10 <__lshift>
 c003e44:	a80b883a 	mov	r5,r21
 c003e48:	1009883a 	mov	r4,r2
 c003e4c:	d8800915 	stw	r2,36(sp)
 c003e50:	c006b580 	call	c006b58 <__mcmp>
 c003e54:	da001717 	ldw	r8,92(sp)
 c003e58:	0081800e 	bge	zero,r2,c00445c <_dtoa_r+0x11d4>
 c003e5c:	b93fffc3 	ldbu	r4,-1(r23)
 c003e60:	b8bfffc4 	addi	r2,r23,-1
 c003e64:	1007883a 	mov	r3,r2
 c003e68:	01800e44 	movi	r6,57
 c003e6c:	d9c00717 	ldw	r7,28(sp)
 c003e70:	00000506 	br	c003e88 <_dtoa_r+0xc00>
 c003e74:	18ffffc4 	addi	r3,r3,-1
 c003e78:	11c12326 	beq	r2,r7,c004308 <_dtoa_r+0x1080>
 c003e7c:	19000003 	ldbu	r4,0(r3)
 c003e80:	102f883a 	mov	r23,r2
 c003e84:	10bfffc4 	addi	r2,r2,-1
 c003e88:	21403fcc 	andi	r5,r4,255
 c003e8c:	2940201c 	xori	r5,r5,128
 c003e90:	297fe004 	addi	r5,r5,-128
 c003e94:	29bff726 	beq	r5,r6,c003e74 <__alt_data_end+0xfc003e74>
 c003e98:	21000044 	addi	r4,r4,1
 c003e9c:	11000005 	stb	r4,0(r2)
 c003ea0:	a80b883a 	mov	r5,r21
 c003ea4:	e009883a 	mov	r4,fp
 c003ea8:	c00627c0 	call	c00627c <_Bfree>
 c003eac:	883ea026 	beq	r17,zero,c003930 <__alt_data_end+0xfc003930>
 c003eb0:	90000426 	beq	r18,zero,c003ec4 <_dtoa_r+0xc3c>
 c003eb4:	94400326 	beq	r18,r17,c003ec4 <_dtoa_r+0xc3c>
 c003eb8:	900b883a 	mov	r5,r18
 c003ebc:	e009883a 	mov	r4,fp
 c003ec0:	c00627c0 	call	c00627c <_Bfree>
 c003ec4:	880b883a 	mov	r5,r17
 c003ec8:	e009883a 	mov	r4,fp
 c003ecc:	c00627c0 	call	c00627c <_Bfree>
 c003ed0:	003e9706 	br	c003930 <__alt_data_end+0xfc003930>
 c003ed4:	01800044 	movi	r6,1
 c003ed8:	d9800e15 	stw	r6,56(sp)
 c003edc:	003d9606 	br	c003538 <__alt_data_end+0xfc003538>
 c003ee0:	d8800817 	ldw	r2,32(sp)
 c003ee4:	d8c00517 	ldw	r3,20(sp)
 c003ee8:	d8000d15 	stw	zero,52(sp)
 c003eec:	10c5c83a 	sub	r2,r2,r3
 c003ef0:	00c9c83a 	sub	r4,zero,r3
 c003ef4:	d8800815 	stw	r2,32(sp)
 c003ef8:	d9000a15 	stw	r4,40(sp)
 c003efc:	003d9706 	br	c00355c <__alt_data_end+0xfc00355c>
 c003f00:	05adc83a 	sub	r22,zero,r22
 c003f04:	dd800815 	stw	r22,32(sp)
 c003f08:	002d883a 	mov	r22,zero
 c003f0c:	003d8e06 	br	c003548 <__alt_data_end+0xfc003548>
 c003f10:	d9000517 	ldw	r4,20(sp)
 c003f14:	c00d6000 	call	c00d600 <__floatsidf>
 c003f18:	100d883a 	mov	r6,r2
 c003f1c:	180f883a 	mov	r7,r3
 c003f20:	a009883a 	mov	r4,r20
 c003f24:	880b883a 	mov	r5,r17
 c003f28:	c00c1c00 	call	c00c1c0 <__eqdf2>
 c003f2c:	103d7126 	beq	r2,zero,c0034f4 <__alt_data_end+0xfc0034f4>
 c003f30:	d9c00517 	ldw	r7,20(sp)
 c003f34:	39ffffc4 	addi	r7,r7,-1
 c003f38:	d9c00515 	stw	r7,20(sp)
 c003f3c:	003d6d06 	br	c0034f4 <__alt_data_end+0xfc0034f4>
 c003f40:	dd400a17 	ldw	r21,40(sp)
 c003f44:	dd000817 	ldw	r20,32(sp)
 c003f48:	0023883a 	mov	r17,zero
 c003f4c:	003f4806 	br	c003c70 <__alt_data_end+0xfc003c70>
 c003f50:	10e3c83a 	sub	r17,r2,r3
 c003f54:	9448983a 	sll	r4,r18,r17
 c003f58:	003d3206 	br	c003424 <__alt_data_end+0xfc003424>
 c003f5c:	d8000e15 	stw	zero,56(sp)
 c003f60:	003d7506 	br	c003538 <__alt_data_end+0xfc003538>
 c003f64:	b005883a 	mov	r2,r22
 c003f68:	003f4506 	br	c003c80 <__alt_data_end+0xfc003c80>
 c003f6c:	dc000915 	stw	r16,36(sp)
 c003f70:	d9800a17 	ldw	r6,40(sp)
 c003f74:	d9400917 	ldw	r5,36(sp)
 c003f78:	e009883a 	mov	r4,fp
 c003f7c:	c0068d00 	call	c0068d0 <__pow5mult>
 c003f80:	1021883a 	mov	r16,r2
 c003f84:	003f5a06 	br	c003cf0 <__alt_data_end+0xfc003cf0>
 c003f88:	01c00044 	movi	r7,1
 c003f8c:	d9c00b15 	stw	r7,44(sp)
 c003f90:	d8802217 	ldw	r2,136(sp)
 c003f94:	0081280e 	bge	zero,r2,c004438 <_dtoa_r+0x11b0>
 c003f98:	100d883a 	mov	r6,r2
 c003f9c:	1021883a 	mov	r16,r2
 c003fa0:	d8800c15 	stw	r2,48(sp)
 c003fa4:	d8800615 	stw	r2,24(sp)
 c003fa8:	003d8806 	br	c0035cc <__alt_data_end+0xfc0035cc>
 c003fac:	d8800617 	ldw	r2,24(sp)
 c003fb0:	00be9b16 	blt	zero,r2,c003a20 <__alt_data_end+0xfc003a20>
 c003fb4:	10010f1e 	bne	r2,zero,c0043f4 <_dtoa_r+0x116c>
 c003fb8:	880b883a 	mov	r5,r17
 c003fbc:	000d883a 	mov	r6,zero
 c003fc0:	01d00534 	movhi	r7,16404
 c003fc4:	8009883a 	mov	r4,r16
 c003fc8:	c00c4180 	call	c00c418 <__muldf3>
 c003fcc:	900d883a 	mov	r6,r18
 c003fd0:	980f883a 	mov	r7,r19
 c003fd4:	1009883a 	mov	r4,r2
 c003fd8:	180b883a 	mov	r5,r3
 c003fdc:	c00c2480 	call	c00c248 <__gedf2>
 c003fe0:	002b883a 	mov	r21,zero
 c003fe4:	0023883a 	mov	r17,zero
 c003fe8:	1000bf16 	blt	r2,zero,c0042e8 <_dtoa_r+0x1060>
 c003fec:	d9802217 	ldw	r6,136(sp)
 c003ff0:	ddc00717 	ldw	r23,28(sp)
 c003ff4:	018c303a 	nor	r6,zero,r6
 c003ff8:	d9800515 	stw	r6,20(sp)
 c003ffc:	a80b883a 	mov	r5,r21
 c004000:	e009883a 	mov	r4,fp
 c004004:	c00627c0 	call	c00627c <_Bfree>
 c004008:	883e4926 	beq	r17,zero,c003930 <__alt_data_end+0xfc003930>
 c00400c:	003fad06 	br	c003ec4 <__alt_data_end+0xfc003ec4>
 c004010:	d9c01117 	ldw	r7,68(sp)
 c004014:	3801bc26 	beq	r7,zero,c004708 <_dtoa_r+0x1480>
 c004018:	10810cc4 	addi	r2,r2,1075
 c00401c:	dd400a17 	ldw	r21,40(sp)
 c004020:	dd000817 	ldw	r20,32(sp)
 c004024:	003f0a06 	br	c003c50 <__alt_data_end+0xfc003c50>
 c004028:	00800704 	movi	r2,28
 c00402c:	d9000817 	ldw	r4,32(sp)
 c004030:	a0a9883a 	add	r20,r20,r2
 c004034:	b0ad883a 	add	r22,r22,r2
 c004038:	2089883a 	add	r4,r4,r2
 c00403c:	d9000815 	stw	r4,32(sp)
 c004040:	003f5106 	br	c003d88 <__alt_data_end+0xfc003d88>
 c004044:	d8c00317 	ldw	r3,12(sp)
 c004048:	b8c1fc0e 	bge	r23,r3,c00483c <_dtoa_r+0x15b4>
 c00404c:	0027883a 	mov	r19,zero
 c004050:	b805883a 	mov	r2,r23
 c004054:	003f3e06 	br	c003d50 <__alt_data_end+0xfc003d50>
 c004058:	880b883a 	mov	r5,r17
 c00405c:	e009883a 	mov	r4,fp
 c004060:	000f883a 	mov	r7,zero
 c004064:	01800284 	movi	r6,10
 c004068:	c0062a40 	call	c0062a4 <__multadd>
 c00406c:	d9000c17 	ldw	r4,48(sp)
 c004070:	1023883a 	mov	r17,r2
 c004074:	0102040e 	bge	zero,r4,c004888 <_dtoa_r+0x1600>
 c004078:	d9000615 	stw	r4,24(sp)
 c00407c:	0500050e 	bge	zero,r20,c004094 <_dtoa_r+0xe0c>
 c004080:	880b883a 	mov	r5,r17
 c004084:	a00d883a 	mov	r6,r20
 c004088:	e009883a 	mov	r4,fp
 c00408c:	c006a100 	call	c006a10 <__lshift>
 c004090:	1023883a 	mov	r17,r2
 c004094:	9801241e 	bne	r19,zero,c004528 <_dtoa_r+0x12a0>
 c004098:	8829883a 	mov	r20,r17
 c00409c:	d9000617 	ldw	r4,24(sp)
 c0040a0:	dcc00717 	ldw	r19,28(sp)
 c0040a4:	9480004c 	andi	r18,r18,1
 c0040a8:	20bfffc4 	addi	r2,r4,-1
 c0040ac:	9885883a 	add	r2,r19,r2
 c0040b0:	d8800415 	stw	r2,16(sp)
 c0040b4:	dc800615 	stw	r18,24(sp)
 c0040b8:	a80b883a 	mov	r5,r21
 c0040bc:	8009883a 	mov	r4,r16
 c0040c0:	c0030600 	call	c003060 <quorem>
 c0040c4:	880b883a 	mov	r5,r17
 c0040c8:	8009883a 	mov	r4,r16
 c0040cc:	102f883a 	mov	r23,r2
 c0040d0:	c006b580 	call	c006b58 <__mcmp>
 c0040d4:	a80b883a 	mov	r5,r21
 c0040d8:	a00d883a 	mov	r6,r20
 c0040dc:	e009883a 	mov	r4,fp
 c0040e0:	102d883a 	mov	r22,r2
 c0040e4:	c006bb80 	call	c006bb8 <__mdiff>
 c0040e8:	1007883a 	mov	r3,r2
 c0040ec:	10800317 	ldw	r2,12(r2)
 c0040f0:	bc800c04 	addi	r18,r23,48
 c0040f4:	180b883a 	mov	r5,r3
 c0040f8:	10004e1e 	bne	r2,zero,c004234 <_dtoa_r+0xfac>
 c0040fc:	8009883a 	mov	r4,r16
 c004100:	d8c01615 	stw	r3,88(sp)
 c004104:	c006b580 	call	c006b58 <__mcmp>
 c004108:	d8c01617 	ldw	r3,88(sp)
 c00410c:	e009883a 	mov	r4,fp
 c004110:	d8801615 	stw	r2,88(sp)
 c004114:	180b883a 	mov	r5,r3
 c004118:	c00627c0 	call	c00627c <_Bfree>
 c00411c:	d8801617 	ldw	r2,88(sp)
 c004120:	1000041e 	bne	r2,zero,c004134 <_dtoa_r+0xeac>
 c004124:	d9800317 	ldw	r6,12(sp)
 c004128:	3000021e 	bne	r6,zero,c004134 <_dtoa_r+0xeac>
 c00412c:	d8c00617 	ldw	r3,24(sp)
 c004130:	18003726 	beq	r3,zero,c004210 <_dtoa_r+0xf88>
 c004134:	b0002016 	blt	r22,zero,c0041b8 <_dtoa_r+0xf30>
 c004138:	b000041e 	bne	r22,zero,c00414c <_dtoa_r+0xec4>
 c00413c:	d9000317 	ldw	r4,12(sp)
 c004140:	2000021e 	bne	r4,zero,c00414c <_dtoa_r+0xec4>
 c004144:	d8c00617 	ldw	r3,24(sp)
 c004148:	18001b26 	beq	r3,zero,c0041b8 <_dtoa_r+0xf30>
 c00414c:	00810716 	blt	zero,r2,c00456c <_dtoa_r+0x12e4>
 c004150:	d8c00417 	ldw	r3,16(sp)
 c004154:	9d800044 	addi	r22,r19,1
 c004158:	9c800005 	stb	r18,0(r19)
 c00415c:	b02f883a 	mov	r23,r22
 c004160:	98c10626 	beq	r19,r3,c00457c <_dtoa_r+0x12f4>
 c004164:	800b883a 	mov	r5,r16
 c004168:	000f883a 	mov	r7,zero
 c00416c:	01800284 	movi	r6,10
 c004170:	e009883a 	mov	r4,fp
 c004174:	c0062a40 	call	c0062a4 <__multadd>
 c004178:	1021883a 	mov	r16,r2
 c00417c:	000f883a 	mov	r7,zero
 c004180:	01800284 	movi	r6,10
 c004184:	880b883a 	mov	r5,r17
 c004188:	e009883a 	mov	r4,fp
 c00418c:	8d002526 	beq	r17,r20,c004224 <_dtoa_r+0xf9c>
 c004190:	c0062a40 	call	c0062a4 <__multadd>
 c004194:	a00b883a 	mov	r5,r20
 c004198:	000f883a 	mov	r7,zero
 c00419c:	01800284 	movi	r6,10
 c0041a0:	e009883a 	mov	r4,fp
 c0041a4:	1023883a 	mov	r17,r2
 c0041a8:	c0062a40 	call	c0062a4 <__multadd>
 c0041ac:	1029883a 	mov	r20,r2
 c0041b0:	b027883a 	mov	r19,r22
 c0041b4:	003fc006 	br	c0040b8 <__alt_data_end+0xfc0040b8>
 c0041b8:	9011883a 	mov	r8,r18
 c0041bc:	00800e0e 	bge	zero,r2,c0041f8 <_dtoa_r+0xf70>
 c0041c0:	800b883a 	mov	r5,r16
 c0041c4:	01800044 	movi	r6,1
 c0041c8:	e009883a 	mov	r4,fp
 c0041cc:	da001715 	stw	r8,92(sp)
 c0041d0:	c006a100 	call	c006a10 <__lshift>
 c0041d4:	a80b883a 	mov	r5,r21
 c0041d8:	1009883a 	mov	r4,r2
 c0041dc:	1021883a 	mov	r16,r2
 c0041e0:	c006b580 	call	c006b58 <__mcmp>
 c0041e4:	da001717 	ldw	r8,92(sp)
 c0041e8:	0081960e 	bge	zero,r2,c004844 <_dtoa_r+0x15bc>
 c0041ec:	00800e44 	movi	r2,57
 c0041f0:	40817026 	beq	r8,r2,c0047b4 <_dtoa_r+0x152c>
 c0041f4:	ba000c44 	addi	r8,r23,49
 c0041f8:	8825883a 	mov	r18,r17
 c0041fc:	9dc00044 	addi	r23,r19,1
 c004200:	9a000005 	stb	r8,0(r19)
 c004204:	a023883a 	mov	r17,r20
 c004208:	dc000915 	stw	r16,36(sp)
 c00420c:	003f2406 	br	c003ea0 <__alt_data_end+0xfc003ea0>
 c004210:	00800e44 	movi	r2,57
 c004214:	9011883a 	mov	r8,r18
 c004218:	90816626 	beq	r18,r2,c0047b4 <_dtoa_r+0x152c>
 c00421c:	05bff516 	blt	zero,r22,c0041f4 <__alt_data_end+0xfc0041f4>
 c004220:	003ff506 	br	c0041f8 <__alt_data_end+0xfc0041f8>
 c004224:	c0062a40 	call	c0062a4 <__multadd>
 c004228:	1023883a 	mov	r17,r2
 c00422c:	1029883a 	mov	r20,r2
 c004230:	003fdf06 	br	c0041b0 <__alt_data_end+0xfc0041b0>
 c004234:	e009883a 	mov	r4,fp
 c004238:	c00627c0 	call	c00627c <_Bfree>
 c00423c:	00800044 	movi	r2,1
 c004240:	003fbc06 	br	c004134 <__alt_data_end+0xfc004134>
 c004244:	a80b883a 	mov	r5,r21
 c004248:	8009883a 	mov	r4,r16
 c00424c:	c006b580 	call	c006b58 <__mcmp>
 c004250:	103edb0e 	bge	r2,zero,c003dc0 <__alt_data_end+0xfc003dc0>
 c004254:	800b883a 	mov	r5,r16
 c004258:	000f883a 	mov	r7,zero
 c00425c:	01800284 	movi	r6,10
 c004260:	e009883a 	mov	r4,fp
 c004264:	c0062a40 	call	c0062a4 <__multadd>
 c004268:	1021883a 	mov	r16,r2
 c00426c:	d8800517 	ldw	r2,20(sp)
 c004270:	d8c00b17 	ldw	r3,44(sp)
 c004274:	10bfffc4 	addi	r2,r2,-1
 c004278:	d8800515 	stw	r2,20(sp)
 c00427c:	183f761e 	bne	r3,zero,c004058 <__alt_data_end+0xfc004058>
 c004280:	d9000c17 	ldw	r4,48(sp)
 c004284:	0101730e 	bge	zero,r4,c004854 <_dtoa_r+0x15cc>
 c004288:	d9000615 	stw	r4,24(sp)
 c00428c:	003ed006 	br	c003dd0 <__alt_data_end+0xfc003dd0>
 c004290:	00800084 	movi	r2,2
 c004294:	3081861e 	bne	r6,r2,c0048b0 <_dtoa_r+0x1628>
 c004298:	d8000b15 	stw	zero,44(sp)
 c00429c:	003f3c06 	br	c003f90 <__alt_data_end+0xfc003f90>
 c0042a0:	dc000917 	ldw	r16,36(sp)
 c0042a4:	003e9206 	br	c003cf0 <__alt_data_end+0xfc003cf0>
 c0042a8:	d9c00317 	ldw	r7,12(sp)
 c0042ac:	00800084 	movi	r2,2
 c0042b0:	11fec50e 	bge	r2,r7,c003dc8 <__alt_data_end+0xfc003dc8>
 c0042b4:	d9000617 	ldw	r4,24(sp)
 c0042b8:	20013c1e 	bne	r4,zero,c0047ac <_dtoa_r+0x1524>
 c0042bc:	a80b883a 	mov	r5,r21
 c0042c0:	000f883a 	mov	r7,zero
 c0042c4:	01800144 	movi	r6,5
 c0042c8:	e009883a 	mov	r4,fp
 c0042cc:	c0062a40 	call	c0062a4 <__multadd>
 c0042d0:	100b883a 	mov	r5,r2
 c0042d4:	8009883a 	mov	r4,r16
 c0042d8:	102b883a 	mov	r21,r2
 c0042dc:	c006b580 	call	c006b58 <__mcmp>
 c0042e0:	dc000915 	stw	r16,36(sp)
 c0042e4:	00bf410e 	bge	zero,r2,c003fec <__alt_data_end+0xfc003fec>
 c0042e8:	d9c00717 	ldw	r7,28(sp)
 c0042ec:	00800c44 	movi	r2,49
 c0042f0:	38800005 	stb	r2,0(r7)
 c0042f4:	d8800517 	ldw	r2,20(sp)
 c0042f8:	3dc00044 	addi	r23,r7,1
 c0042fc:	10800044 	addi	r2,r2,1
 c004300:	d8800515 	stw	r2,20(sp)
 c004304:	003f3d06 	br	c003ffc <__alt_data_end+0xfc003ffc>
 c004308:	d9800517 	ldw	r6,20(sp)
 c00430c:	d9c00717 	ldw	r7,28(sp)
 c004310:	00800c44 	movi	r2,49
 c004314:	31800044 	addi	r6,r6,1
 c004318:	d9800515 	stw	r6,20(sp)
 c00431c:	38800005 	stb	r2,0(r7)
 c004320:	003edf06 	br	c003ea0 <__alt_data_end+0xfc003ea0>
 c004324:	d8000b15 	stw	zero,44(sp)
 c004328:	003c9f06 	br	c0035a8 <__alt_data_end+0xfc0035a8>
 c00432c:	903e7e1e 	bne	r18,zero,c003d28 <__alt_data_end+0xfc003d28>
 c004330:	00800434 	movhi	r2,16
 c004334:	10bfffc4 	addi	r2,r2,-1
 c004338:	9884703a 	and	r2,r19,r2
 c00433c:	1000ea1e 	bne	r2,zero,c0046e8 <_dtoa_r+0x1460>
 c004340:	9cdffc2c 	andhi	r19,r19,32752
 c004344:	9800e826 	beq	r19,zero,c0046e8 <_dtoa_r+0x1460>
 c004348:	d9c00817 	ldw	r7,32(sp)
 c00434c:	b5800044 	addi	r22,r22,1
 c004350:	04c00044 	movi	r19,1
 c004354:	39c00044 	addi	r7,r7,1
 c004358:	d9c00815 	stw	r7,32(sp)
 c00435c:	d8800d17 	ldw	r2,52(sp)
 c004360:	103e721e 	bne	r2,zero,c003d2c <__alt_data_end+0xfc003d2c>
 c004364:	00800044 	movi	r2,1
 c004368:	003e7906 	br	c003d50 <__alt_data_end+0xfc003d50>
 c00436c:	8009883a 	mov	r4,r16
 c004370:	c00d6000 	call	c00d600 <__floatsidf>
 c004374:	d9800f17 	ldw	r6,60(sp)
 c004378:	d9c01017 	ldw	r7,64(sp)
 c00437c:	1009883a 	mov	r4,r2
 c004380:	180b883a 	mov	r5,r3
 c004384:	c00c4180 	call	c00c418 <__muldf3>
 c004388:	000d883a 	mov	r6,zero
 c00438c:	01d00734 	movhi	r7,16412
 c004390:	1009883a 	mov	r4,r2
 c004394:	180b883a 	mov	r5,r3
 c004398:	c00af440 	call	c00af44 <__adddf3>
 c00439c:	047f3034 	movhi	r17,64704
 c0043a0:	1021883a 	mov	r16,r2
 c0043a4:	1c63883a 	add	r17,r3,r17
 c0043a8:	d9000f17 	ldw	r4,60(sp)
 c0043ac:	d9401017 	ldw	r5,64(sp)
 c0043b0:	000d883a 	mov	r6,zero
 c0043b4:	01d00534 	movhi	r7,16404
 c0043b8:	c00cc840 	call	c00cc84 <__subdf3>
 c0043bc:	800d883a 	mov	r6,r16
 c0043c0:	880f883a 	mov	r7,r17
 c0043c4:	1009883a 	mov	r4,r2
 c0043c8:	180b883a 	mov	r5,r3
 c0043cc:	102b883a 	mov	r21,r2
 c0043d0:	1829883a 	mov	r20,r3
 c0043d4:	c00c2480 	call	c00c248 <__gedf2>
 c0043d8:	00806c16 	blt	zero,r2,c00458c <_dtoa_r+0x1304>
 c0043dc:	89e0003c 	xorhi	r7,r17,32768
 c0043e0:	800d883a 	mov	r6,r16
 c0043e4:	a809883a 	mov	r4,r21
 c0043e8:	a00b883a 	mov	r5,r20
 c0043ec:	c00c3240 	call	c00c324 <__ledf2>
 c0043f0:	103d7e0e 	bge	r2,zero,c0039ec <__alt_data_end+0xfc0039ec>
 c0043f4:	002b883a 	mov	r21,zero
 c0043f8:	0023883a 	mov	r17,zero
 c0043fc:	003efb06 	br	c003fec <__alt_data_end+0xfc003fec>
 c004400:	d8800717 	ldw	r2,28(sp)
 c004404:	003bd006 	br	c003348 <__alt_data_end+0xfc003348>
 c004408:	d9000a17 	ldw	r4,40(sp)
 c00440c:	d9800d17 	ldw	r6,52(sp)
 c004410:	dd400a15 	stw	r21,40(sp)
 c004414:	a905c83a 	sub	r2,r21,r4
 c004418:	308d883a 	add	r6,r6,r2
 c00441c:	d9800d15 	stw	r6,52(sp)
 c004420:	002b883a 	mov	r21,zero
 c004424:	003e0606 	br	c003c40 <__alt_data_end+0xfc003c40>
 c004428:	9023883a 	mov	r17,r18
 c00442c:	9829883a 	mov	r20,r19
 c004430:	04000084 	movi	r16,2
 c004434:	003c9206 	br	c003680 <__alt_data_end+0xfc003680>
 c004438:	04000044 	movi	r16,1
 c00443c:	dc000c15 	stw	r16,48(sp)
 c004440:	dc000615 	stw	r16,24(sp)
 c004444:	dc002215 	stw	r16,136(sp)
 c004448:	e0001115 	stw	zero,68(fp)
 c00444c:	000b883a 	mov	r5,zero
 c004450:	003c6906 	br	c0035f8 <__alt_data_end+0xfc0035f8>
 c004454:	3021883a 	mov	r16,r6
 c004458:	003ffb06 	br	c004448 <__alt_data_end+0xfc004448>
 c00445c:	1000021e 	bne	r2,zero,c004468 <_dtoa_r+0x11e0>
 c004460:	4200004c 	andi	r8,r8,1
 c004464:	403e7d1e 	bne	r8,zero,c003e5c <__alt_data_end+0xfc003e5c>
 c004468:	01000c04 	movi	r4,48
 c00446c:	00000106 	br	c004474 <_dtoa_r+0x11ec>
 c004470:	102f883a 	mov	r23,r2
 c004474:	b8bfffc4 	addi	r2,r23,-1
 c004478:	10c00007 	ldb	r3,0(r2)
 c00447c:	193ffc26 	beq	r3,r4,c004470 <__alt_data_end+0xfc004470>
 c004480:	003e8706 	br	c003ea0 <__alt_data_end+0xfc003ea0>
 c004484:	d8800517 	ldw	r2,20(sp)
 c004488:	00a3c83a 	sub	r17,zero,r2
 c00448c:	8800a426 	beq	r17,zero,c004720 <_dtoa_r+0x1498>
 c004490:	888003cc 	andi	r2,r17,15
 c004494:	100490fa 	slli	r2,r2,3
 c004498:	00c30074 	movhi	r3,3073
 c00449c:	18c0c404 	addi	r3,r3,784
 c0044a0:	1885883a 	add	r2,r3,r2
 c0044a4:	11800017 	ldw	r6,0(r2)
 c0044a8:	11c00117 	ldw	r7,4(r2)
 c0044ac:	9009883a 	mov	r4,r18
 c0044b0:	980b883a 	mov	r5,r19
 c0044b4:	8823d13a 	srai	r17,r17,4
 c0044b8:	c00c4180 	call	c00c418 <__muldf3>
 c0044bc:	d8800f15 	stw	r2,60(sp)
 c0044c0:	d8c01015 	stw	r3,64(sp)
 c0044c4:	8800e826 	beq	r17,zero,c004868 <_dtoa_r+0x15e0>
 c0044c8:	05030074 	movhi	r20,3073
 c0044cc:	a500ba04 	addi	r20,r20,744
 c0044d0:	04000084 	movi	r16,2
 c0044d4:	8980004c 	andi	r6,r17,1
 c0044d8:	1009883a 	mov	r4,r2
 c0044dc:	8823d07a 	srai	r17,r17,1
 c0044e0:	180b883a 	mov	r5,r3
 c0044e4:	30000426 	beq	r6,zero,c0044f8 <_dtoa_r+0x1270>
 c0044e8:	a1800017 	ldw	r6,0(r20)
 c0044ec:	a1c00117 	ldw	r7,4(r20)
 c0044f0:	84000044 	addi	r16,r16,1
 c0044f4:	c00c4180 	call	c00c418 <__muldf3>
 c0044f8:	a5000204 	addi	r20,r20,8
 c0044fc:	883ff51e 	bne	r17,zero,c0044d4 <__alt_data_end+0xfc0044d4>
 c004500:	d8800f15 	stw	r2,60(sp)
 c004504:	d8c01015 	stw	r3,64(sp)
 c004508:	003c7606 	br	c0036e4 <__alt_data_end+0xfc0036e4>
 c00450c:	00c00c04 	movi	r3,48
 c004510:	10c00005 	stb	r3,0(r2)
 c004514:	d8c00517 	ldw	r3,20(sp)
 c004518:	bd3fffc3 	ldbu	r20,-1(r23)
 c00451c:	18c00044 	addi	r3,r3,1
 c004520:	d8c00515 	stw	r3,20(sp)
 c004524:	003db906 	br	c003c0c <__alt_data_end+0xfc003c0c>
 c004528:	89400117 	ldw	r5,4(r17)
 c00452c:	e009883a 	mov	r4,fp
 c004530:	c0061d40 	call	c0061d4 <_Balloc>
 c004534:	89800417 	ldw	r6,16(r17)
 c004538:	89400304 	addi	r5,r17,12
 c00453c:	11000304 	addi	r4,r2,12
 c004540:	31800084 	addi	r6,r6,2
 c004544:	318d883a 	add	r6,r6,r6
 c004548:	318d883a 	add	r6,r6,r6
 c00454c:	1027883a 	mov	r19,r2
 c004550:	c0009a40 	call	c0009a4 <memcpy>
 c004554:	01800044 	movi	r6,1
 c004558:	980b883a 	mov	r5,r19
 c00455c:	e009883a 	mov	r4,fp
 c004560:	c006a100 	call	c006a10 <__lshift>
 c004564:	1029883a 	mov	r20,r2
 c004568:	003ecc06 	br	c00409c <__alt_data_end+0xfc00409c>
 c00456c:	00800e44 	movi	r2,57
 c004570:	90809026 	beq	r18,r2,c0047b4 <_dtoa_r+0x152c>
 c004574:	92000044 	addi	r8,r18,1
 c004578:	003f1f06 	br	c0041f8 <__alt_data_end+0xfc0041f8>
 c00457c:	9011883a 	mov	r8,r18
 c004580:	8825883a 	mov	r18,r17
 c004584:	a023883a 	mov	r17,r20
 c004588:	003e2906 	br	c003e30 <__alt_data_end+0xfc003e30>
 c00458c:	002b883a 	mov	r21,zero
 c004590:	0023883a 	mov	r17,zero
 c004594:	003f5406 	br	c0042e8 <__alt_data_end+0xfc0042e8>
 c004598:	61bfffc4 	addi	r6,r12,-1
 c00459c:	300490fa 	slli	r2,r6,3
 c0045a0:	00c30074 	movhi	r3,3073
 c0045a4:	18c0c404 	addi	r3,r3,784
 c0045a8:	1885883a 	add	r2,r3,r2
 c0045ac:	11000017 	ldw	r4,0(r2)
 c0045b0:	11400117 	ldw	r5,4(r2)
 c0045b4:	d8800717 	ldw	r2,28(sp)
 c0045b8:	880f883a 	mov	r7,r17
 c0045bc:	d9801215 	stw	r6,72(sp)
 c0045c0:	800d883a 	mov	r6,r16
 c0045c4:	db001615 	stw	r12,88(sp)
 c0045c8:	15c00044 	addi	r23,r2,1
 c0045cc:	c00c4180 	call	c00c418 <__muldf3>
 c0045d0:	d9401017 	ldw	r5,64(sp)
 c0045d4:	d9000f17 	ldw	r4,60(sp)
 c0045d8:	d8c01515 	stw	r3,84(sp)
 c0045dc:	d8801415 	stw	r2,80(sp)
 c0045e0:	c00d5800 	call	c00d580 <__fixdfsi>
 c0045e4:	1009883a 	mov	r4,r2
 c0045e8:	1021883a 	mov	r16,r2
 c0045ec:	c00d6000 	call	c00d600 <__floatsidf>
 c0045f0:	d9000f17 	ldw	r4,60(sp)
 c0045f4:	d9401017 	ldw	r5,64(sp)
 c0045f8:	100d883a 	mov	r6,r2
 c0045fc:	180f883a 	mov	r7,r3
 c004600:	c00cc840 	call	c00cc84 <__subdf3>
 c004604:	1829883a 	mov	r20,r3
 c004608:	d8c00717 	ldw	r3,28(sp)
 c00460c:	84000c04 	addi	r16,r16,48
 c004610:	1023883a 	mov	r17,r2
 c004614:	1c000005 	stb	r16,0(r3)
 c004618:	db001617 	ldw	r12,88(sp)
 c00461c:	00800044 	movi	r2,1
 c004620:	60802226 	beq	r12,r2,c0046ac <_dtoa_r+0x1424>
 c004624:	d9c00717 	ldw	r7,28(sp)
 c004628:	8805883a 	mov	r2,r17
 c00462c:	b82b883a 	mov	r21,r23
 c004630:	3b19883a 	add	r12,r7,r12
 c004634:	6023883a 	mov	r17,r12
 c004638:	a007883a 	mov	r3,r20
 c00463c:	dc800f15 	stw	r18,60(sp)
 c004640:	000d883a 	mov	r6,zero
 c004644:	01d00934 	movhi	r7,16420
 c004648:	1009883a 	mov	r4,r2
 c00464c:	180b883a 	mov	r5,r3
 c004650:	c00c4180 	call	c00c418 <__muldf3>
 c004654:	180b883a 	mov	r5,r3
 c004658:	1009883a 	mov	r4,r2
 c00465c:	1829883a 	mov	r20,r3
 c004660:	1025883a 	mov	r18,r2
 c004664:	c00d5800 	call	c00d580 <__fixdfsi>
 c004668:	1009883a 	mov	r4,r2
 c00466c:	1021883a 	mov	r16,r2
 c004670:	c00d6000 	call	c00d600 <__floatsidf>
 c004674:	100d883a 	mov	r6,r2
 c004678:	180f883a 	mov	r7,r3
 c00467c:	9009883a 	mov	r4,r18
 c004680:	a00b883a 	mov	r5,r20
 c004684:	84000c04 	addi	r16,r16,48
 c004688:	c00cc840 	call	c00cc84 <__subdf3>
 c00468c:	ad400044 	addi	r21,r21,1
 c004690:	ac3fffc5 	stb	r16,-1(r21)
 c004694:	ac7fea1e 	bne	r21,r17,c004640 <__alt_data_end+0xfc004640>
 c004698:	1023883a 	mov	r17,r2
 c00469c:	d8801217 	ldw	r2,72(sp)
 c0046a0:	dc800f17 	ldw	r18,60(sp)
 c0046a4:	1829883a 	mov	r20,r3
 c0046a8:	b8af883a 	add	r23,r23,r2
 c0046ac:	d9001417 	ldw	r4,80(sp)
 c0046b0:	d9401517 	ldw	r5,84(sp)
 c0046b4:	000d883a 	mov	r6,zero
 c0046b8:	01cff834 	movhi	r7,16352
 c0046bc:	c00af440 	call	c00af44 <__adddf3>
 c0046c0:	880d883a 	mov	r6,r17
 c0046c4:	a00f883a 	mov	r7,r20
 c0046c8:	1009883a 	mov	r4,r2
 c0046cc:	180b883a 	mov	r5,r3
 c0046d0:	c00c3240 	call	c00c324 <__ledf2>
 c0046d4:	10003e0e 	bge	r2,zero,c0047d0 <_dtoa_r+0x1548>
 c0046d8:	d9001317 	ldw	r4,76(sp)
 c0046dc:	bd3fffc3 	ldbu	r20,-1(r23)
 c0046e0:	d9000515 	stw	r4,20(sp)
 c0046e4:	003d3b06 	br	c003bd4 <__alt_data_end+0xfc003bd4>
 c0046e8:	0027883a 	mov	r19,zero
 c0046ec:	003f1b06 	br	c00435c <__alt_data_end+0xfc00435c>
 c0046f0:	d8800817 	ldw	r2,32(sp)
 c0046f4:	11e9c83a 	sub	r20,r2,r7
 c0046f8:	0005883a 	mov	r2,zero
 c0046fc:	003d5406 	br	c003c50 <__alt_data_end+0xfc003c50>
 c004700:	00800044 	movi	r2,1
 c004704:	003dc706 	br	c003e24 <__alt_data_end+0xfc003e24>
 c004708:	d8c00217 	ldw	r3,8(sp)
 c00470c:	00800d84 	movi	r2,54
 c004710:	dd400a17 	ldw	r21,40(sp)
 c004714:	10c5c83a 	sub	r2,r2,r3
 c004718:	dd000817 	ldw	r20,32(sp)
 c00471c:	003d4c06 	br	c003c50 <__alt_data_end+0xfc003c50>
 c004720:	dc800f15 	stw	r18,60(sp)
 c004724:	dcc01015 	stw	r19,64(sp)
 c004728:	04000084 	movi	r16,2
 c00472c:	003bed06 	br	c0036e4 <__alt_data_end+0xfc0036e4>
 c004730:	d9000617 	ldw	r4,24(sp)
 c004734:	203f0d26 	beq	r4,zero,c00436c <__alt_data_end+0xfc00436c>
 c004738:	d9800c17 	ldw	r6,48(sp)
 c00473c:	01bcab0e 	bge	zero,r6,c0039ec <__alt_data_end+0xfc0039ec>
 c004740:	d9401017 	ldw	r5,64(sp)
 c004744:	d9000f17 	ldw	r4,60(sp)
 c004748:	000d883a 	mov	r6,zero
 c00474c:	01d00934 	movhi	r7,16420
 c004750:	c00c4180 	call	c00c418 <__muldf3>
 c004754:	81000044 	addi	r4,r16,1
 c004758:	d8800f15 	stw	r2,60(sp)
 c00475c:	d8c01015 	stw	r3,64(sp)
 c004760:	c00d6000 	call	c00d600 <__floatsidf>
 c004764:	d9800f17 	ldw	r6,60(sp)
 c004768:	d9c01017 	ldw	r7,64(sp)
 c00476c:	1009883a 	mov	r4,r2
 c004770:	180b883a 	mov	r5,r3
 c004774:	c00c4180 	call	c00c418 <__muldf3>
 c004778:	01d00734 	movhi	r7,16412
 c00477c:	000d883a 	mov	r6,zero
 c004780:	1009883a 	mov	r4,r2
 c004784:	180b883a 	mov	r5,r3
 c004788:	c00af440 	call	c00af44 <__adddf3>
 c00478c:	d9c00517 	ldw	r7,20(sp)
 c004790:	047f3034 	movhi	r17,64704
 c004794:	1021883a 	mov	r16,r2
 c004798:	39ffffc4 	addi	r7,r7,-1
 c00479c:	d9c01315 	stw	r7,76(sp)
 c0047a0:	1c63883a 	add	r17,r3,r17
 c0047a4:	db000c17 	ldw	r12,48(sp)
 c0047a8:	003bea06 	br	c003754 <__alt_data_end+0xfc003754>
 c0047ac:	dc000915 	stw	r16,36(sp)
 c0047b0:	003e0e06 	br	c003fec <__alt_data_end+0xfc003fec>
 c0047b4:	01000e44 	movi	r4,57
 c0047b8:	8825883a 	mov	r18,r17
 c0047bc:	9dc00044 	addi	r23,r19,1
 c0047c0:	99000005 	stb	r4,0(r19)
 c0047c4:	a023883a 	mov	r17,r20
 c0047c8:	dc000915 	stw	r16,36(sp)
 c0047cc:	003da406 	br	c003e60 <__alt_data_end+0xfc003e60>
 c0047d0:	d9801417 	ldw	r6,80(sp)
 c0047d4:	d9c01517 	ldw	r7,84(sp)
 c0047d8:	0009883a 	mov	r4,zero
 c0047dc:	014ff834 	movhi	r5,16352
 c0047e0:	c00cc840 	call	c00cc84 <__subdf3>
 c0047e4:	880d883a 	mov	r6,r17
 c0047e8:	a00f883a 	mov	r7,r20
 c0047ec:	1009883a 	mov	r4,r2
 c0047f0:	180b883a 	mov	r5,r3
 c0047f4:	c00c2480 	call	c00c248 <__gedf2>
 c0047f8:	00bc7c0e 	bge	zero,r2,c0039ec <__alt_data_end+0xfc0039ec>
 c0047fc:	01000c04 	movi	r4,48
 c004800:	00000106 	br	c004808 <_dtoa_r+0x1580>
 c004804:	102f883a 	mov	r23,r2
 c004808:	b8bfffc4 	addi	r2,r23,-1
 c00480c:	10c00007 	ldb	r3,0(r2)
 c004810:	193ffc26 	beq	r3,r4,c004804 <__alt_data_end+0xfc004804>
 c004814:	d9801317 	ldw	r6,76(sp)
 c004818:	d9800515 	stw	r6,20(sp)
 c00481c:	003c4406 	br	c003930 <__alt_data_end+0xfc003930>
 c004820:	d9801317 	ldw	r6,76(sp)
 c004824:	d9800515 	stw	r6,20(sp)
 c004828:	003cea06 	br	c003bd4 <__alt_data_end+0xfc003bd4>
 c00482c:	dd800f17 	ldw	r22,60(sp)
 c004830:	dcc01017 	ldw	r19,64(sp)
 c004834:	dc801217 	ldw	r18,72(sp)
 c004838:	003c6c06 	br	c0039ec <__alt_data_end+0xfc0039ec>
 c00483c:	903e031e 	bne	r18,zero,c00404c <__alt_data_end+0xfc00404c>
 c004840:	003ebb06 	br	c004330 <__alt_data_end+0xfc004330>
 c004844:	103e6c1e 	bne	r2,zero,c0041f8 <__alt_data_end+0xfc0041f8>
 c004848:	4080004c 	andi	r2,r8,1
 c00484c:	103e6a26 	beq	r2,zero,c0041f8 <__alt_data_end+0xfc0041f8>
 c004850:	003e6606 	br	c0041ec <__alt_data_end+0xfc0041ec>
 c004854:	d8c00317 	ldw	r3,12(sp)
 c004858:	00800084 	movi	r2,2
 c00485c:	10c02916 	blt	r2,r3,c004904 <_dtoa_r+0x167c>
 c004860:	d9000c17 	ldw	r4,48(sp)
 c004864:	003e8806 	br	c004288 <__alt_data_end+0xfc004288>
 c004868:	04000084 	movi	r16,2
 c00486c:	003b9d06 	br	c0036e4 <__alt_data_end+0xfc0036e4>
 c004870:	d9001317 	ldw	r4,76(sp)
 c004874:	d9000515 	stw	r4,20(sp)
 c004878:	003cd606 	br	c003bd4 <__alt_data_end+0xfc003bd4>
 c00487c:	d8801317 	ldw	r2,76(sp)
 c004880:	d8800515 	stw	r2,20(sp)
 c004884:	003c2a06 	br	c003930 <__alt_data_end+0xfc003930>
 c004888:	d9800317 	ldw	r6,12(sp)
 c00488c:	00800084 	movi	r2,2
 c004890:	11801516 	blt	r2,r6,c0048e8 <_dtoa_r+0x1660>
 c004894:	d9c00c17 	ldw	r7,48(sp)
 c004898:	d9c00615 	stw	r7,24(sp)
 c00489c:	003df706 	br	c00407c <__alt_data_end+0xfc00407c>
 c0048a0:	193d3926 	beq	r3,r4,c003d88 <__alt_data_end+0xfc003d88>
 c0048a4:	00c00f04 	movi	r3,60
 c0048a8:	1885c83a 	sub	r2,r3,r2
 c0048ac:	003ddf06 	br	c00402c <__alt_data_end+0xfc00402c>
 c0048b0:	e009883a 	mov	r4,fp
 c0048b4:	e0001115 	stw	zero,68(fp)
 c0048b8:	000b883a 	mov	r5,zero
 c0048bc:	c0061d40 	call	c0061d4 <_Balloc>
 c0048c0:	d8800715 	stw	r2,28(sp)
 c0048c4:	d8c00717 	ldw	r3,28(sp)
 c0048c8:	00bfffc4 	movi	r2,-1
 c0048cc:	01000044 	movi	r4,1
 c0048d0:	d8800c15 	stw	r2,48(sp)
 c0048d4:	e0c01015 	stw	r3,64(fp)
 c0048d8:	d9000b15 	stw	r4,44(sp)
 c0048dc:	d8800615 	stw	r2,24(sp)
 c0048e0:	d8002215 	stw	zero,136(sp)
 c0048e4:	003c4106 	br	c0039ec <__alt_data_end+0xfc0039ec>
 c0048e8:	d8c00c17 	ldw	r3,48(sp)
 c0048ec:	d8c00615 	stw	r3,24(sp)
 c0048f0:	003e7006 	br	c0042b4 <__alt_data_end+0xfc0042b4>
 c0048f4:	04400044 	movi	r17,1
 c0048f8:	003b2006 	br	c00357c <__alt_data_end+0xfc00357c>
 c0048fc:	000b883a 	mov	r5,zero
 c004900:	003b3d06 	br	c0035f8 <__alt_data_end+0xfc0035f8>
 c004904:	d8800c17 	ldw	r2,48(sp)
 c004908:	d8800615 	stw	r2,24(sp)
 c00490c:	003e6906 	br	c0042b4 <__alt_data_end+0xfc0042b4>

0c004910 <__sflush_r>:
 c004910:	2880030b 	ldhu	r2,12(r5)
 c004914:	defffb04 	addi	sp,sp,-20
 c004918:	dcc00315 	stw	r19,12(sp)
 c00491c:	dc400115 	stw	r17,4(sp)
 c004920:	dfc00415 	stw	ra,16(sp)
 c004924:	dc800215 	stw	r18,8(sp)
 c004928:	dc000015 	stw	r16,0(sp)
 c00492c:	10c0020c 	andi	r3,r2,8
 c004930:	2823883a 	mov	r17,r5
 c004934:	2027883a 	mov	r19,r4
 c004938:	1800311e 	bne	r3,zero,c004a00 <__sflush_r+0xf0>
 c00493c:	28c00117 	ldw	r3,4(r5)
 c004940:	10820014 	ori	r2,r2,2048
 c004944:	2880030d 	sth	r2,12(r5)
 c004948:	00c04b0e 	bge	zero,r3,c004a78 <__sflush_r+0x168>
 c00494c:	8a000a17 	ldw	r8,40(r17)
 c004950:	40002326 	beq	r8,zero,c0049e0 <__sflush_r+0xd0>
 c004954:	9c000017 	ldw	r16,0(r19)
 c004958:	10c4000c 	andi	r3,r2,4096
 c00495c:	98000015 	stw	zero,0(r19)
 c004960:	18004826 	beq	r3,zero,c004a84 <__sflush_r+0x174>
 c004964:	89801417 	ldw	r6,80(r17)
 c004968:	10c0010c 	andi	r3,r2,4
 c00496c:	18000626 	beq	r3,zero,c004988 <__sflush_r+0x78>
 c004970:	88c00117 	ldw	r3,4(r17)
 c004974:	88800c17 	ldw	r2,48(r17)
 c004978:	30cdc83a 	sub	r6,r6,r3
 c00497c:	10000226 	beq	r2,zero,c004988 <__sflush_r+0x78>
 c004980:	88800f17 	ldw	r2,60(r17)
 c004984:	308dc83a 	sub	r6,r6,r2
 c004988:	89400717 	ldw	r5,28(r17)
 c00498c:	000f883a 	mov	r7,zero
 c004990:	9809883a 	mov	r4,r19
 c004994:	403ee83a 	callr	r8
 c004998:	00ffffc4 	movi	r3,-1
 c00499c:	10c04426 	beq	r2,r3,c004ab0 <__sflush_r+0x1a0>
 c0049a0:	88c0030b 	ldhu	r3,12(r17)
 c0049a4:	89000417 	ldw	r4,16(r17)
 c0049a8:	88000115 	stw	zero,4(r17)
 c0049ac:	197dffcc 	andi	r5,r3,63487
 c0049b0:	8940030d 	sth	r5,12(r17)
 c0049b4:	89000015 	stw	r4,0(r17)
 c0049b8:	18c4000c 	andi	r3,r3,4096
 c0049bc:	18002c1e 	bne	r3,zero,c004a70 <__sflush_r+0x160>
 c0049c0:	89400c17 	ldw	r5,48(r17)
 c0049c4:	9c000015 	stw	r16,0(r19)
 c0049c8:	28000526 	beq	r5,zero,c0049e0 <__sflush_r+0xd0>
 c0049cc:	88801004 	addi	r2,r17,64
 c0049d0:	28800226 	beq	r5,r2,c0049dc <__sflush_r+0xcc>
 c0049d4:	9809883a 	mov	r4,r19
 c0049d8:	c00508c0 	call	c00508c <_free_r>
 c0049dc:	88000c15 	stw	zero,48(r17)
 c0049e0:	0005883a 	mov	r2,zero
 c0049e4:	dfc00417 	ldw	ra,16(sp)
 c0049e8:	dcc00317 	ldw	r19,12(sp)
 c0049ec:	dc800217 	ldw	r18,8(sp)
 c0049f0:	dc400117 	ldw	r17,4(sp)
 c0049f4:	dc000017 	ldw	r16,0(sp)
 c0049f8:	dec00504 	addi	sp,sp,20
 c0049fc:	f800283a 	ret
 c004a00:	2c800417 	ldw	r18,16(r5)
 c004a04:	903ff626 	beq	r18,zero,c0049e0 <__alt_data_end+0xfc0049e0>
 c004a08:	2c000017 	ldw	r16,0(r5)
 c004a0c:	108000cc 	andi	r2,r2,3
 c004a10:	2c800015 	stw	r18,0(r5)
 c004a14:	84a1c83a 	sub	r16,r16,r18
 c004a18:	1000131e 	bne	r2,zero,c004a68 <__sflush_r+0x158>
 c004a1c:	28800517 	ldw	r2,20(r5)
 c004a20:	88800215 	stw	r2,8(r17)
 c004a24:	04000316 	blt	zero,r16,c004a34 <__sflush_r+0x124>
 c004a28:	003fed06 	br	c0049e0 <__alt_data_end+0xfc0049e0>
 c004a2c:	90a5883a 	add	r18,r18,r2
 c004a30:	043feb0e 	bge	zero,r16,c0049e0 <__alt_data_end+0xfc0049e0>
 c004a34:	88800917 	ldw	r2,36(r17)
 c004a38:	89400717 	ldw	r5,28(r17)
 c004a3c:	800f883a 	mov	r7,r16
 c004a40:	900d883a 	mov	r6,r18
 c004a44:	9809883a 	mov	r4,r19
 c004a48:	103ee83a 	callr	r2
 c004a4c:	80a1c83a 	sub	r16,r16,r2
 c004a50:	00bff616 	blt	zero,r2,c004a2c <__alt_data_end+0xfc004a2c>
 c004a54:	88c0030b 	ldhu	r3,12(r17)
 c004a58:	00bfffc4 	movi	r2,-1
 c004a5c:	18c01014 	ori	r3,r3,64
 c004a60:	88c0030d 	sth	r3,12(r17)
 c004a64:	003fdf06 	br	c0049e4 <__alt_data_end+0xfc0049e4>
 c004a68:	0005883a 	mov	r2,zero
 c004a6c:	003fec06 	br	c004a20 <__alt_data_end+0xfc004a20>
 c004a70:	88801415 	stw	r2,80(r17)
 c004a74:	003fd206 	br	c0049c0 <__alt_data_end+0xfc0049c0>
 c004a78:	28c00f17 	ldw	r3,60(r5)
 c004a7c:	00ffb316 	blt	zero,r3,c00494c <__alt_data_end+0xfc00494c>
 c004a80:	003fd706 	br	c0049e0 <__alt_data_end+0xfc0049e0>
 c004a84:	89400717 	ldw	r5,28(r17)
 c004a88:	000d883a 	mov	r6,zero
 c004a8c:	01c00044 	movi	r7,1
 c004a90:	9809883a 	mov	r4,r19
 c004a94:	403ee83a 	callr	r8
 c004a98:	100d883a 	mov	r6,r2
 c004a9c:	00bfffc4 	movi	r2,-1
 c004aa0:	30801426 	beq	r6,r2,c004af4 <__sflush_r+0x1e4>
 c004aa4:	8880030b 	ldhu	r2,12(r17)
 c004aa8:	8a000a17 	ldw	r8,40(r17)
 c004aac:	003fae06 	br	c004968 <__alt_data_end+0xfc004968>
 c004ab0:	98c00017 	ldw	r3,0(r19)
 c004ab4:	183fba26 	beq	r3,zero,c0049a0 <__alt_data_end+0xfc0049a0>
 c004ab8:	01000744 	movi	r4,29
 c004abc:	19000626 	beq	r3,r4,c004ad8 <__sflush_r+0x1c8>
 c004ac0:	01000584 	movi	r4,22
 c004ac4:	19000426 	beq	r3,r4,c004ad8 <__sflush_r+0x1c8>
 c004ac8:	88c0030b 	ldhu	r3,12(r17)
 c004acc:	18c01014 	ori	r3,r3,64
 c004ad0:	88c0030d 	sth	r3,12(r17)
 c004ad4:	003fc306 	br	c0049e4 <__alt_data_end+0xfc0049e4>
 c004ad8:	8880030b 	ldhu	r2,12(r17)
 c004adc:	88c00417 	ldw	r3,16(r17)
 c004ae0:	88000115 	stw	zero,4(r17)
 c004ae4:	10bdffcc 	andi	r2,r2,63487
 c004ae8:	8880030d 	sth	r2,12(r17)
 c004aec:	88c00015 	stw	r3,0(r17)
 c004af0:	003fb306 	br	c0049c0 <__alt_data_end+0xfc0049c0>
 c004af4:	98800017 	ldw	r2,0(r19)
 c004af8:	103fea26 	beq	r2,zero,c004aa4 <__alt_data_end+0xfc004aa4>
 c004afc:	00c00744 	movi	r3,29
 c004b00:	10c00226 	beq	r2,r3,c004b0c <__sflush_r+0x1fc>
 c004b04:	00c00584 	movi	r3,22
 c004b08:	10c0031e 	bne	r2,r3,c004b18 <__sflush_r+0x208>
 c004b0c:	9c000015 	stw	r16,0(r19)
 c004b10:	0005883a 	mov	r2,zero
 c004b14:	003fb306 	br	c0049e4 <__alt_data_end+0xfc0049e4>
 c004b18:	88c0030b 	ldhu	r3,12(r17)
 c004b1c:	3005883a 	mov	r2,r6
 c004b20:	18c01014 	ori	r3,r3,64
 c004b24:	88c0030d 	sth	r3,12(r17)
 c004b28:	003fae06 	br	c0049e4 <__alt_data_end+0xfc0049e4>

0c004b2c <_fflush_r>:
 c004b2c:	defffd04 	addi	sp,sp,-12
 c004b30:	dc000115 	stw	r16,4(sp)
 c004b34:	dfc00215 	stw	ra,8(sp)
 c004b38:	2021883a 	mov	r16,r4
 c004b3c:	20000226 	beq	r4,zero,c004b48 <_fflush_r+0x1c>
 c004b40:	20800e17 	ldw	r2,56(r4)
 c004b44:	10000c26 	beq	r2,zero,c004b78 <_fflush_r+0x4c>
 c004b48:	2880030f 	ldh	r2,12(r5)
 c004b4c:	1000051e 	bne	r2,zero,c004b64 <_fflush_r+0x38>
 c004b50:	0005883a 	mov	r2,zero
 c004b54:	dfc00217 	ldw	ra,8(sp)
 c004b58:	dc000117 	ldw	r16,4(sp)
 c004b5c:	dec00304 	addi	sp,sp,12
 c004b60:	f800283a 	ret
 c004b64:	8009883a 	mov	r4,r16
 c004b68:	dfc00217 	ldw	ra,8(sp)
 c004b6c:	dc000117 	ldw	r16,4(sp)
 c004b70:	dec00304 	addi	sp,sp,12
 c004b74:	c0049101 	jmpi	c004910 <__sflush_r>
 c004b78:	d9400015 	stw	r5,0(sp)
 c004b7c:	c004f180 	call	c004f18 <__sinit>
 c004b80:	d9400017 	ldw	r5,0(sp)
 c004b84:	003ff006 	br	c004b48 <__alt_data_end+0xfc004b48>

0c004b88 <fflush>:
 c004b88:	20000526 	beq	r4,zero,c004ba0 <fflush+0x18>
 c004b8c:	00830074 	movhi	r2,3073
 c004b90:	1087f904 	addi	r2,r2,8164
 c004b94:	200b883a 	mov	r5,r4
 c004b98:	11000017 	ldw	r4,0(r2)
 c004b9c:	c004b2c1 	jmpi	c004b2c <_fflush_r>
 c004ba0:	00830074 	movhi	r2,3073
 c004ba4:	1087f804 	addi	r2,r2,8160
 c004ba8:	11000017 	ldw	r4,0(r2)
 c004bac:	01430034 	movhi	r5,3072
 c004bb0:	2952cb04 	addi	r5,r5,19244
 c004bb4:	c0054601 	jmpi	c005460 <_fwalk_reent>

0c004bb8 <__fp_unlock>:
 c004bb8:	0005883a 	mov	r2,zero
 c004bbc:	f800283a 	ret

0c004bc0 <_cleanup_r>:
 c004bc0:	01430074 	movhi	r5,3073
 c004bc4:	2963a304 	addi	r5,r5,-29044
 c004bc8:	c0054601 	jmpi	c005460 <_fwalk_reent>

0c004bcc <__sinit.part.1>:
 c004bcc:	defff704 	addi	sp,sp,-36
 c004bd0:	00c30034 	movhi	r3,3072
 c004bd4:	dfc00815 	stw	ra,32(sp)
 c004bd8:	ddc00715 	stw	r23,28(sp)
 c004bdc:	dd800615 	stw	r22,24(sp)
 c004be0:	dd400515 	stw	r21,20(sp)
 c004be4:	dd000415 	stw	r20,16(sp)
 c004be8:	dcc00315 	stw	r19,12(sp)
 c004bec:	dc800215 	stw	r18,8(sp)
 c004bf0:	dc400115 	stw	r17,4(sp)
 c004bf4:	dc000015 	stw	r16,0(sp)
 c004bf8:	18d2f004 	addi	r3,r3,19392
 c004bfc:	24000117 	ldw	r16,4(r4)
 c004c00:	20c00f15 	stw	r3,60(r4)
 c004c04:	2080bb04 	addi	r2,r4,748
 c004c08:	00c000c4 	movi	r3,3
 c004c0c:	20c0b915 	stw	r3,740(r4)
 c004c10:	2080ba15 	stw	r2,744(r4)
 c004c14:	2000b815 	stw	zero,736(r4)
 c004c18:	05c00204 	movi	r23,8
 c004c1c:	00800104 	movi	r2,4
 c004c20:	2025883a 	mov	r18,r4
 c004c24:	b80d883a 	mov	r6,r23
 c004c28:	81001704 	addi	r4,r16,92
 c004c2c:	000b883a 	mov	r5,zero
 c004c30:	80000015 	stw	zero,0(r16)
 c004c34:	80000115 	stw	zero,4(r16)
 c004c38:	80000215 	stw	zero,8(r16)
 c004c3c:	8080030d 	sth	r2,12(r16)
 c004c40:	80001915 	stw	zero,100(r16)
 c004c44:	8000038d 	sth	zero,14(r16)
 c004c48:	80000415 	stw	zero,16(r16)
 c004c4c:	80000515 	stw	zero,20(r16)
 c004c50:	80000615 	stw	zero,24(r16)
 c004c54:	c0060ac0 	call	c0060ac <memset>
 c004c58:	05830034 	movhi	r22,3072
 c004c5c:	94400217 	ldw	r17,8(r18)
 c004c60:	05430034 	movhi	r21,3072
 c004c64:	05030034 	movhi	r20,3072
 c004c68:	04c30034 	movhi	r19,3072
 c004c6c:	b59cd504 	addi	r22,r22,29524
 c004c70:	ad5cec04 	addi	r21,r21,29616
 c004c74:	a51d0b04 	addi	r20,r20,29740
 c004c78:	9cdd2204 	addi	r19,r19,29832
 c004c7c:	85800815 	stw	r22,32(r16)
 c004c80:	85400915 	stw	r21,36(r16)
 c004c84:	85000a15 	stw	r20,40(r16)
 c004c88:	84c00b15 	stw	r19,44(r16)
 c004c8c:	84000715 	stw	r16,28(r16)
 c004c90:	00800284 	movi	r2,10
 c004c94:	8880030d 	sth	r2,12(r17)
 c004c98:	00800044 	movi	r2,1
 c004c9c:	b80d883a 	mov	r6,r23
 c004ca0:	89001704 	addi	r4,r17,92
 c004ca4:	000b883a 	mov	r5,zero
 c004ca8:	88000015 	stw	zero,0(r17)
 c004cac:	88000115 	stw	zero,4(r17)
 c004cb0:	88000215 	stw	zero,8(r17)
 c004cb4:	88001915 	stw	zero,100(r17)
 c004cb8:	8880038d 	sth	r2,14(r17)
 c004cbc:	88000415 	stw	zero,16(r17)
 c004cc0:	88000515 	stw	zero,20(r17)
 c004cc4:	88000615 	stw	zero,24(r17)
 c004cc8:	c0060ac0 	call	c0060ac <memset>
 c004ccc:	94000317 	ldw	r16,12(r18)
 c004cd0:	00800484 	movi	r2,18
 c004cd4:	8c400715 	stw	r17,28(r17)
 c004cd8:	8d800815 	stw	r22,32(r17)
 c004cdc:	8d400915 	stw	r21,36(r17)
 c004ce0:	8d000a15 	stw	r20,40(r17)
 c004ce4:	8cc00b15 	stw	r19,44(r17)
 c004ce8:	8080030d 	sth	r2,12(r16)
 c004cec:	00800084 	movi	r2,2
 c004cf0:	80000015 	stw	zero,0(r16)
 c004cf4:	80000115 	stw	zero,4(r16)
 c004cf8:	80000215 	stw	zero,8(r16)
 c004cfc:	80001915 	stw	zero,100(r16)
 c004d00:	8080038d 	sth	r2,14(r16)
 c004d04:	80000415 	stw	zero,16(r16)
 c004d08:	80000515 	stw	zero,20(r16)
 c004d0c:	80000615 	stw	zero,24(r16)
 c004d10:	b80d883a 	mov	r6,r23
 c004d14:	000b883a 	mov	r5,zero
 c004d18:	81001704 	addi	r4,r16,92
 c004d1c:	c0060ac0 	call	c0060ac <memset>
 c004d20:	00800044 	movi	r2,1
 c004d24:	84000715 	stw	r16,28(r16)
 c004d28:	85800815 	stw	r22,32(r16)
 c004d2c:	85400915 	stw	r21,36(r16)
 c004d30:	85000a15 	stw	r20,40(r16)
 c004d34:	84c00b15 	stw	r19,44(r16)
 c004d38:	90800e15 	stw	r2,56(r18)
 c004d3c:	dfc00817 	ldw	ra,32(sp)
 c004d40:	ddc00717 	ldw	r23,28(sp)
 c004d44:	dd800617 	ldw	r22,24(sp)
 c004d48:	dd400517 	ldw	r21,20(sp)
 c004d4c:	dd000417 	ldw	r20,16(sp)
 c004d50:	dcc00317 	ldw	r19,12(sp)
 c004d54:	dc800217 	ldw	r18,8(sp)
 c004d58:	dc400117 	ldw	r17,4(sp)
 c004d5c:	dc000017 	ldw	r16,0(sp)
 c004d60:	dec00904 	addi	sp,sp,36
 c004d64:	f800283a 	ret

0c004d68 <__fp_lock>:
 c004d68:	0005883a 	mov	r2,zero
 c004d6c:	f800283a 	ret

0c004d70 <__sfmoreglue>:
 c004d70:	defffc04 	addi	sp,sp,-16
 c004d74:	dc800215 	stw	r18,8(sp)
 c004d78:	2825883a 	mov	r18,r5
 c004d7c:	dc000015 	stw	r16,0(sp)
 c004d80:	01401a04 	movi	r5,104
 c004d84:	2021883a 	mov	r16,r4
 c004d88:	913fffc4 	addi	r4,r18,-1
 c004d8c:	dfc00315 	stw	ra,12(sp)
 c004d90:	dc400115 	stw	r17,4(sp)
 c004d94:	c00097c0 	call	c00097c <__mulsi3>
 c004d98:	8009883a 	mov	r4,r16
 c004d9c:	11401d04 	addi	r5,r2,116
 c004da0:	1023883a 	mov	r17,r2
 c004da4:	c0057bc0 	call	c0057bc <_malloc_r>
 c004da8:	1021883a 	mov	r16,r2
 c004dac:	10000726 	beq	r2,zero,c004dcc <__sfmoreglue+0x5c>
 c004db0:	11000304 	addi	r4,r2,12
 c004db4:	10000015 	stw	zero,0(r2)
 c004db8:	14800115 	stw	r18,4(r2)
 c004dbc:	11000215 	stw	r4,8(r2)
 c004dc0:	89801a04 	addi	r6,r17,104
 c004dc4:	000b883a 	mov	r5,zero
 c004dc8:	c0060ac0 	call	c0060ac <memset>
 c004dcc:	8005883a 	mov	r2,r16
 c004dd0:	dfc00317 	ldw	ra,12(sp)
 c004dd4:	dc800217 	ldw	r18,8(sp)
 c004dd8:	dc400117 	ldw	r17,4(sp)
 c004ddc:	dc000017 	ldw	r16,0(sp)
 c004de0:	dec00404 	addi	sp,sp,16
 c004de4:	f800283a 	ret

0c004de8 <__sfp>:
 c004de8:	defffb04 	addi	sp,sp,-20
 c004dec:	dc000015 	stw	r16,0(sp)
 c004df0:	04030074 	movhi	r16,3073
 c004df4:	8407f804 	addi	r16,r16,8160
 c004df8:	dcc00315 	stw	r19,12(sp)
 c004dfc:	2027883a 	mov	r19,r4
 c004e00:	81000017 	ldw	r4,0(r16)
 c004e04:	dfc00415 	stw	ra,16(sp)
 c004e08:	dc800215 	stw	r18,8(sp)
 c004e0c:	20800e17 	ldw	r2,56(r4)
 c004e10:	dc400115 	stw	r17,4(sp)
 c004e14:	1000021e 	bne	r2,zero,c004e20 <__sfp+0x38>
 c004e18:	c004bcc0 	call	c004bcc <__sinit.part.1>
 c004e1c:	81000017 	ldw	r4,0(r16)
 c004e20:	2480b804 	addi	r18,r4,736
 c004e24:	047fffc4 	movi	r17,-1
 c004e28:	91000117 	ldw	r4,4(r18)
 c004e2c:	94000217 	ldw	r16,8(r18)
 c004e30:	213fffc4 	addi	r4,r4,-1
 c004e34:	20000a16 	blt	r4,zero,c004e60 <__sfp+0x78>
 c004e38:	8080030f 	ldh	r2,12(r16)
 c004e3c:	10000c26 	beq	r2,zero,c004e70 <__sfp+0x88>
 c004e40:	80c01d04 	addi	r3,r16,116
 c004e44:	00000206 	br	c004e50 <__sfp+0x68>
 c004e48:	18bfe60f 	ldh	r2,-104(r3)
 c004e4c:	10000826 	beq	r2,zero,c004e70 <__sfp+0x88>
 c004e50:	213fffc4 	addi	r4,r4,-1
 c004e54:	1c3ffd04 	addi	r16,r3,-12
 c004e58:	18c01a04 	addi	r3,r3,104
 c004e5c:	247ffa1e 	bne	r4,r17,c004e48 <__alt_data_end+0xfc004e48>
 c004e60:	90800017 	ldw	r2,0(r18)
 c004e64:	10001d26 	beq	r2,zero,c004edc <__sfp+0xf4>
 c004e68:	1025883a 	mov	r18,r2
 c004e6c:	003fee06 	br	c004e28 <__alt_data_end+0xfc004e28>
 c004e70:	00bfffc4 	movi	r2,-1
 c004e74:	8080038d 	sth	r2,14(r16)
 c004e78:	00800044 	movi	r2,1
 c004e7c:	8080030d 	sth	r2,12(r16)
 c004e80:	80001915 	stw	zero,100(r16)
 c004e84:	80000015 	stw	zero,0(r16)
 c004e88:	80000215 	stw	zero,8(r16)
 c004e8c:	80000115 	stw	zero,4(r16)
 c004e90:	80000415 	stw	zero,16(r16)
 c004e94:	80000515 	stw	zero,20(r16)
 c004e98:	80000615 	stw	zero,24(r16)
 c004e9c:	01800204 	movi	r6,8
 c004ea0:	000b883a 	mov	r5,zero
 c004ea4:	81001704 	addi	r4,r16,92
 c004ea8:	c0060ac0 	call	c0060ac <memset>
 c004eac:	8005883a 	mov	r2,r16
 c004eb0:	80000c15 	stw	zero,48(r16)
 c004eb4:	80000d15 	stw	zero,52(r16)
 c004eb8:	80001115 	stw	zero,68(r16)
 c004ebc:	80001215 	stw	zero,72(r16)
 c004ec0:	dfc00417 	ldw	ra,16(sp)
 c004ec4:	dcc00317 	ldw	r19,12(sp)
 c004ec8:	dc800217 	ldw	r18,8(sp)
 c004ecc:	dc400117 	ldw	r17,4(sp)
 c004ed0:	dc000017 	ldw	r16,0(sp)
 c004ed4:	dec00504 	addi	sp,sp,20
 c004ed8:	f800283a 	ret
 c004edc:	01400104 	movi	r5,4
 c004ee0:	9809883a 	mov	r4,r19
 c004ee4:	c004d700 	call	c004d70 <__sfmoreglue>
 c004ee8:	90800015 	stw	r2,0(r18)
 c004eec:	103fde1e 	bne	r2,zero,c004e68 <__alt_data_end+0xfc004e68>
 c004ef0:	00800304 	movi	r2,12
 c004ef4:	98800015 	stw	r2,0(r19)
 c004ef8:	0005883a 	mov	r2,zero
 c004efc:	003ff006 	br	c004ec0 <__alt_data_end+0xfc004ec0>

0c004f00 <_cleanup>:
 c004f00:	00830074 	movhi	r2,3073
 c004f04:	1087f804 	addi	r2,r2,8160
 c004f08:	11000017 	ldw	r4,0(r2)
 c004f0c:	01430074 	movhi	r5,3073
 c004f10:	2963a304 	addi	r5,r5,-29044
 c004f14:	c0054601 	jmpi	c005460 <_fwalk_reent>

0c004f18 <__sinit>:
 c004f18:	20800e17 	ldw	r2,56(r4)
 c004f1c:	10000126 	beq	r2,zero,c004f24 <__sinit+0xc>
 c004f20:	f800283a 	ret
 c004f24:	c004bcc1 	jmpi	c004bcc <__sinit.part.1>

0c004f28 <__sfp_lock_acquire>:
 c004f28:	f800283a 	ret

0c004f2c <__sfp_lock_release>:
 c004f2c:	f800283a 	ret

0c004f30 <__sinit_lock_acquire>:
 c004f30:	f800283a 	ret

0c004f34 <__sinit_lock_release>:
 c004f34:	f800283a 	ret

0c004f38 <__fp_lock_all>:
 c004f38:	00830074 	movhi	r2,3073
 c004f3c:	1087f904 	addi	r2,r2,8164
 c004f40:	11000017 	ldw	r4,0(r2)
 c004f44:	01430034 	movhi	r5,3072
 c004f48:	29535a04 	addi	r5,r5,19816
 c004f4c:	c00539c1 	jmpi	c00539c <_fwalk>

0c004f50 <__fp_unlock_all>:
 c004f50:	00830074 	movhi	r2,3073
 c004f54:	1087f904 	addi	r2,r2,8164
 c004f58:	11000017 	ldw	r4,0(r2)
 c004f5c:	01430034 	movhi	r5,3072
 c004f60:	2952ee04 	addi	r5,r5,19384
 c004f64:	c00539c1 	jmpi	c00539c <_fwalk>

0c004f68 <_malloc_trim_r>:
 c004f68:	defffb04 	addi	sp,sp,-20
 c004f6c:	dcc00315 	stw	r19,12(sp)
 c004f70:	04c30074 	movhi	r19,3073
 c004f74:	dc800215 	stw	r18,8(sp)
 c004f78:	dc400115 	stw	r17,4(sp)
 c004f7c:	dc000015 	stw	r16,0(sp)
 c004f80:	dfc00415 	stw	ra,16(sp)
 c004f84:	2821883a 	mov	r16,r5
 c004f88:	9cc27204 	addi	r19,r19,2504
 c004f8c:	2025883a 	mov	r18,r4
 c004f90:	c00dd840 	call	c00dd84 <__malloc_lock>
 c004f94:	98800217 	ldw	r2,8(r19)
 c004f98:	14400117 	ldw	r17,4(r2)
 c004f9c:	00bfff04 	movi	r2,-4
 c004fa0:	88a2703a 	and	r17,r17,r2
 c004fa4:	8c21c83a 	sub	r16,r17,r16
 c004fa8:	8403fbc4 	addi	r16,r16,4079
 c004fac:	8020d33a 	srli	r16,r16,12
 c004fb0:	0083ffc4 	movi	r2,4095
 c004fb4:	843fffc4 	addi	r16,r16,-1
 c004fb8:	8020933a 	slli	r16,r16,12
 c004fbc:	1400060e 	bge	r2,r16,c004fd8 <_malloc_trim_r+0x70>
 c004fc0:	000b883a 	mov	r5,zero
 c004fc4:	9009883a 	mov	r4,r18
 c004fc8:	c0073000 	call	c007300 <_sbrk_r>
 c004fcc:	98c00217 	ldw	r3,8(r19)
 c004fd0:	1c47883a 	add	r3,r3,r17
 c004fd4:	10c00a26 	beq	r2,r3,c005000 <_malloc_trim_r+0x98>
 c004fd8:	9009883a 	mov	r4,r18
 c004fdc:	c00dda80 	call	c00dda8 <__malloc_unlock>
 c004fe0:	0005883a 	mov	r2,zero
 c004fe4:	dfc00417 	ldw	ra,16(sp)
 c004fe8:	dcc00317 	ldw	r19,12(sp)
 c004fec:	dc800217 	ldw	r18,8(sp)
 c004ff0:	dc400117 	ldw	r17,4(sp)
 c004ff4:	dc000017 	ldw	r16,0(sp)
 c004ff8:	dec00504 	addi	sp,sp,20
 c004ffc:	f800283a 	ret
 c005000:	040bc83a 	sub	r5,zero,r16
 c005004:	9009883a 	mov	r4,r18
 c005008:	c0073000 	call	c007300 <_sbrk_r>
 c00500c:	00ffffc4 	movi	r3,-1
 c005010:	10c00d26 	beq	r2,r3,c005048 <_malloc_trim_r+0xe0>
 c005014:	00c30074 	movhi	r3,3073
 c005018:	18ced304 	addi	r3,r3,15180
 c00501c:	18800017 	ldw	r2,0(r3)
 c005020:	99000217 	ldw	r4,8(r19)
 c005024:	8c23c83a 	sub	r17,r17,r16
 c005028:	8c400054 	ori	r17,r17,1
 c00502c:	1421c83a 	sub	r16,r2,r16
 c005030:	24400115 	stw	r17,4(r4)
 c005034:	9009883a 	mov	r4,r18
 c005038:	1c000015 	stw	r16,0(r3)
 c00503c:	c00dda80 	call	c00dda8 <__malloc_unlock>
 c005040:	00800044 	movi	r2,1
 c005044:	003fe706 	br	c004fe4 <__alt_data_end+0xfc004fe4>
 c005048:	000b883a 	mov	r5,zero
 c00504c:	9009883a 	mov	r4,r18
 c005050:	c0073000 	call	c007300 <_sbrk_r>
 c005054:	99000217 	ldw	r4,8(r19)
 c005058:	014003c4 	movi	r5,15
 c00505c:	1107c83a 	sub	r3,r2,r4
 c005060:	28ffdd0e 	bge	r5,r3,c004fd8 <__alt_data_end+0xfc004fd8>
 c005064:	01430074 	movhi	r5,3073
 c005068:	2947fb04 	addi	r5,r5,8172
 c00506c:	29400017 	ldw	r5,0(r5)
 c005070:	18c00054 	ori	r3,r3,1
 c005074:	20c00115 	stw	r3,4(r4)
 c005078:	00c30074 	movhi	r3,3073
 c00507c:	1145c83a 	sub	r2,r2,r5
 c005080:	18ced304 	addi	r3,r3,15180
 c005084:	18800015 	stw	r2,0(r3)
 c005088:	003fd306 	br	c004fd8 <__alt_data_end+0xfc004fd8>

0c00508c <_free_r>:
 c00508c:	28004126 	beq	r5,zero,c005194 <_free_r+0x108>
 c005090:	defffd04 	addi	sp,sp,-12
 c005094:	dc400115 	stw	r17,4(sp)
 c005098:	dc000015 	stw	r16,0(sp)
 c00509c:	2023883a 	mov	r17,r4
 c0050a0:	2821883a 	mov	r16,r5
 c0050a4:	dfc00215 	stw	ra,8(sp)
 c0050a8:	c00dd840 	call	c00dd84 <__malloc_lock>
 c0050ac:	81ffff17 	ldw	r7,-4(r16)
 c0050b0:	00bfff84 	movi	r2,-2
 c0050b4:	01030074 	movhi	r4,3073
 c0050b8:	81bffe04 	addi	r6,r16,-8
 c0050bc:	3884703a 	and	r2,r7,r2
 c0050c0:	21027204 	addi	r4,r4,2504
 c0050c4:	308b883a 	add	r5,r6,r2
 c0050c8:	2a400117 	ldw	r9,4(r5)
 c0050cc:	22000217 	ldw	r8,8(r4)
 c0050d0:	00ffff04 	movi	r3,-4
 c0050d4:	48c6703a 	and	r3,r9,r3
 c0050d8:	2a005726 	beq	r5,r8,c005238 <_free_r+0x1ac>
 c0050dc:	28c00115 	stw	r3,4(r5)
 c0050e0:	39c0004c 	andi	r7,r7,1
 c0050e4:	3800091e 	bne	r7,zero,c00510c <_free_r+0x80>
 c0050e8:	823ffe17 	ldw	r8,-8(r16)
 c0050ec:	22400204 	addi	r9,r4,8
 c0050f0:	320dc83a 	sub	r6,r6,r8
 c0050f4:	31c00217 	ldw	r7,8(r6)
 c0050f8:	1205883a 	add	r2,r2,r8
 c0050fc:	3a406526 	beq	r7,r9,c005294 <_free_r+0x208>
 c005100:	32000317 	ldw	r8,12(r6)
 c005104:	3a000315 	stw	r8,12(r7)
 c005108:	41c00215 	stw	r7,8(r8)
 c00510c:	28cf883a 	add	r7,r5,r3
 c005110:	39c00117 	ldw	r7,4(r7)
 c005114:	39c0004c 	andi	r7,r7,1
 c005118:	38003a26 	beq	r7,zero,c005204 <_free_r+0x178>
 c00511c:	10c00054 	ori	r3,r2,1
 c005120:	30c00115 	stw	r3,4(r6)
 c005124:	3087883a 	add	r3,r6,r2
 c005128:	18800015 	stw	r2,0(r3)
 c00512c:	00c07fc4 	movi	r3,511
 c005130:	18801936 	bltu	r3,r2,c005198 <_free_r+0x10c>
 c005134:	1004d0fa 	srli	r2,r2,3
 c005138:	01c00044 	movi	r7,1
 c00513c:	21400117 	ldw	r5,4(r4)
 c005140:	10c00044 	addi	r3,r2,1
 c005144:	18c7883a 	add	r3,r3,r3
 c005148:	1005d0ba 	srai	r2,r2,2
 c00514c:	18c7883a 	add	r3,r3,r3
 c005150:	18c7883a 	add	r3,r3,r3
 c005154:	1907883a 	add	r3,r3,r4
 c005158:	3884983a 	sll	r2,r7,r2
 c00515c:	19c00017 	ldw	r7,0(r3)
 c005160:	1a3ffe04 	addi	r8,r3,-8
 c005164:	1144b03a 	or	r2,r2,r5
 c005168:	32000315 	stw	r8,12(r6)
 c00516c:	31c00215 	stw	r7,8(r6)
 c005170:	20800115 	stw	r2,4(r4)
 c005174:	19800015 	stw	r6,0(r3)
 c005178:	39800315 	stw	r6,12(r7)
 c00517c:	8809883a 	mov	r4,r17
 c005180:	dfc00217 	ldw	ra,8(sp)
 c005184:	dc400117 	ldw	r17,4(sp)
 c005188:	dc000017 	ldw	r16,0(sp)
 c00518c:	dec00304 	addi	sp,sp,12
 c005190:	c00dda81 	jmpi	c00dda8 <__malloc_unlock>
 c005194:	f800283a 	ret
 c005198:	100ad27a 	srli	r5,r2,9
 c00519c:	00c00104 	movi	r3,4
 c0051a0:	19404a36 	bltu	r3,r5,c0052cc <_free_r+0x240>
 c0051a4:	100ad1ba 	srli	r5,r2,6
 c0051a8:	28c00e44 	addi	r3,r5,57
 c0051ac:	18c7883a 	add	r3,r3,r3
 c0051b0:	29400e04 	addi	r5,r5,56
 c0051b4:	18c7883a 	add	r3,r3,r3
 c0051b8:	18c7883a 	add	r3,r3,r3
 c0051bc:	1909883a 	add	r4,r3,r4
 c0051c0:	20c00017 	ldw	r3,0(r4)
 c0051c4:	01c30074 	movhi	r7,3073
 c0051c8:	213ffe04 	addi	r4,r4,-8
 c0051cc:	39c27204 	addi	r7,r7,2504
 c0051d0:	20c04426 	beq	r4,r3,c0052e4 <_free_r+0x258>
 c0051d4:	01ffff04 	movi	r7,-4
 c0051d8:	19400117 	ldw	r5,4(r3)
 c0051dc:	29ca703a 	and	r5,r5,r7
 c0051e0:	1140022e 	bgeu	r2,r5,c0051ec <_free_r+0x160>
 c0051e4:	18c00217 	ldw	r3,8(r3)
 c0051e8:	20fffb1e 	bne	r4,r3,c0051d8 <__alt_data_end+0xfc0051d8>
 c0051ec:	19000317 	ldw	r4,12(r3)
 c0051f0:	31000315 	stw	r4,12(r6)
 c0051f4:	30c00215 	stw	r3,8(r6)
 c0051f8:	21800215 	stw	r6,8(r4)
 c0051fc:	19800315 	stw	r6,12(r3)
 c005200:	003fde06 	br	c00517c <__alt_data_end+0xfc00517c>
 c005204:	29c00217 	ldw	r7,8(r5)
 c005208:	10c5883a 	add	r2,r2,r3
 c00520c:	00c30074 	movhi	r3,3073
 c005210:	18c27404 	addi	r3,r3,2512
 c005214:	38c03b26 	beq	r7,r3,c005304 <_free_r+0x278>
 c005218:	2a000317 	ldw	r8,12(r5)
 c00521c:	11400054 	ori	r5,r2,1
 c005220:	3087883a 	add	r3,r6,r2
 c005224:	3a000315 	stw	r8,12(r7)
 c005228:	41c00215 	stw	r7,8(r8)
 c00522c:	31400115 	stw	r5,4(r6)
 c005230:	18800015 	stw	r2,0(r3)
 c005234:	003fbd06 	br	c00512c <__alt_data_end+0xfc00512c>
 c005238:	39c0004c 	andi	r7,r7,1
 c00523c:	10c5883a 	add	r2,r2,r3
 c005240:	3800071e 	bne	r7,zero,c005260 <_free_r+0x1d4>
 c005244:	81fffe17 	ldw	r7,-8(r16)
 c005248:	31cdc83a 	sub	r6,r6,r7
 c00524c:	30c00317 	ldw	r3,12(r6)
 c005250:	31400217 	ldw	r5,8(r6)
 c005254:	11c5883a 	add	r2,r2,r7
 c005258:	28c00315 	stw	r3,12(r5)
 c00525c:	19400215 	stw	r5,8(r3)
 c005260:	10c00054 	ori	r3,r2,1
 c005264:	30c00115 	stw	r3,4(r6)
 c005268:	00c30074 	movhi	r3,3073
 c00526c:	18c7fc04 	addi	r3,r3,8176
 c005270:	18c00017 	ldw	r3,0(r3)
 c005274:	21800215 	stw	r6,8(r4)
 c005278:	10ffc036 	bltu	r2,r3,c00517c <__alt_data_end+0xfc00517c>
 c00527c:	00830074 	movhi	r2,3073
 c005280:	108eca04 	addi	r2,r2,15144
 c005284:	11400017 	ldw	r5,0(r2)
 c005288:	8809883a 	mov	r4,r17
 c00528c:	c004f680 	call	c004f68 <_malloc_trim_r>
 c005290:	003fba06 	br	c00517c <__alt_data_end+0xfc00517c>
 c005294:	28c9883a 	add	r4,r5,r3
 c005298:	21000117 	ldw	r4,4(r4)
 c00529c:	2100004c 	andi	r4,r4,1
 c0052a0:	2000391e 	bne	r4,zero,c005388 <_free_r+0x2fc>
 c0052a4:	29c00217 	ldw	r7,8(r5)
 c0052a8:	29000317 	ldw	r4,12(r5)
 c0052ac:	1885883a 	add	r2,r3,r2
 c0052b0:	10c00054 	ori	r3,r2,1
 c0052b4:	39000315 	stw	r4,12(r7)
 c0052b8:	21c00215 	stw	r7,8(r4)
 c0052bc:	30c00115 	stw	r3,4(r6)
 c0052c0:	308d883a 	add	r6,r6,r2
 c0052c4:	30800015 	stw	r2,0(r6)
 c0052c8:	003fac06 	br	c00517c <__alt_data_end+0xfc00517c>
 c0052cc:	00c00504 	movi	r3,20
 c0052d0:	19401536 	bltu	r3,r5,c005328 <_free_r+0x29c>
 c0052d4:	28c01704 	addi	r3,r5,92
 c0052d8:	18c7883a 	add	r3,r3,r3
 c0052dc:	294016c4 	addi	r5,r5,91
 c0052e0:	003fb406 	br	c0051b4 <__alt_data_end+0xfc0051b4>
 c0052e4:	280bd0ba 	srai	r5,r5,2
 c0052e8:	00c00044 	movi	r3,1
 c0052ec:	38800117 	ldw	r2,4(r7)
 c0052f0:	194a983a 	sll	r5,r3,r5
 c0052f4:	2007883a 	mov	r3,r4
 c0052f8:	2884b03a 	or	r2,r5,r2
 c0052fc:	38800115 	stw	r2,4(r7)
 c005300:	003fbb06 	br	c0051f0 <__alt_data_end+0xfc0051f0>
 c005304:	21800515 	stw	r6,20(r4)
 c005308:	21800415 	stw	r6,16(r4)
 c00530c:	10c00054 	ori	r3,r2,1
 c005310:	31c00315 	stw	r7,12(r6)
 c005314:	31c00215 	stw	r7,8(r6)
 c005318:	30c00115 	stw	r3,4(r6)
 c00531c:	308d883a 	add	r6,r6,r2
 c005320:	30800015 	stw	r2,0(r6)
 c005324:	003f9506 	br	c00517c <__alt_data_end+0xfc00517c>
 c005328:	00c01504 	movi	r3,84
 c00532c:	19400536 	bltu	r3,r5,c005344 <_free_r+0x2b8>
 c005330:	100ad33a 	srli	r5,r2,12
 c005334:	28c01bc4 	addi	r3,r5,111
 c005338:	18c7883a 	add	r3,r3,r3
 c00533c:	29401b84 	addi	r5,r5,110
 c005340:	003f9c06 	br	c0051b4 <__alt_data_end+0xfc0051b4>
 c005344:	00c05504 	movi	r3,340
 c005348:	19400536 	bltu	r3,r5,c005360 <_free_r+0x2d4>
 c00534c:	100ad3fa 	srli	r5,r2,15
 c005350:	28c01e04 	addi	r3,r5,120
 c005354:	18c7883a 	add	r3,r3,r3
 c005358:	29401dc4 	addi	r5,r5,119
 c00535c:	003f9506 	br	c0051b4 <__alt_data_end+0xfc0051b4>
 c005360:	00c15504 	movi	r3,1364
 c005364:	19400536 	bltu	r3,r5,c00537c <_free_r+0x2f0>
 c005368:	100ad4ba 	srli	r5,r2,18
 c00536c:	28c01f44 	addi	r3,r5,125
 c005370:	18c7883a 	add	r3,r3,r3
 c005374:	29401f04 	addi	r5,r5,124
 c005378:	003f8e06 	br	c0051b4 <__alt_data_end+0xfc0051b4>
 c00537c:	00c03f84 	movi	r3,254
 c005380:	01401f84 	movi	r5,126
 c005384:	003f8b06 	br	c0051b4 <__alt_data_end+0xfc0051b4>
 c005388:	10c00054 	ori	r3,r2,1
 c00538c:	30c00115 	stw	r3,4(r6)
 c005390:	308d883a 	add	r6,r6,r2
 c005394:	30800015 	stw	r2,0(r6)
 c005398:	003f7806 	br	c00517c <__alt_data_end+0xfc00517c>

0c00539c <_fwalk>:
 c00539c:	defff704 	addi	sp,sp,-36
 c0053a0:	dd000415 	stw	r20,16(sp)
 c0053a4:	dfc00815 	stw	ra,32(sp)
 c0053a8:	ddc00715 	stw	r23,28(sp)
 c0053ac:	dd800615 	stw	r22,24(sp)
 c0053b0:	dd400515 	stw	r21,20(sp)
 c0053b4:	dcc00315 	stw	r19,12(sp)
 c0053b8:	dc800215 	stw	r18,8(sp)
 c0053bc:	dc400115 	stw	r17,4(sp)
 c0053c0:	dc000015 	stw	r16,0(sp)
 c0053c4:	2500b804 	addi	r20,r4,736
 c0053c8:	a0002326 	beq	r20,zero,c005458 <_fwalk+0xbc>
 c0053cc:	282b883a 	mov	r21,r5
 c0053d0:	002f883a 	mov	r23,zero
 c0053d4:	05800044 	movi	r22,1
 c0053d8:	04ffffc4 	movi	r19,-1
 c0053dc:	a4400117 	ldw	r17,4(r20)
 c0053e0:	a4800217 	ldw	r18,8(r20)
 c0053e4:	8c7fffc4 	addi	r17,r17,-1
 c0053e8:	88000d16 	blt	r17,zero,c005420 <_fwalk+0x84>
 c0053ec:	94000304 	addi	r16,r18,12
 c0053f0:	94800384 	addi	r18,r18,14
 c0053f4:	8080000b 	ldhu	r2,0(r16)
 c0053f8:	8c7fffc4 	addi	r17,r17,-1
 c0053fc:	813ffd04 	addi	r4,r16,-12
 c005400:	b080042e 	bgeu	r22,r2,c005414 <_fwalk+0x78>
 c005404:	9080000f 	ldh	r2,0(r18)
 c005408:	14c00226 	beq	r2,r19,c005414 <_fwalk+0x78>
 c00540c:	a83ee83a 	callr	r21
 c005410:	b8aeb03a 	or	r23,r23,r2
 c005414:	84001a04 	addi	r16,r16,104
 c005418:	94801a04 	addi	r18,r18,104
 c00541c:	8cfff51e 	bne	r17,r19,c0053f4 <__alt_data_end+0xfc0053f4>
 c005420:	a5000017 	ldw	r20,0(r20)
 c005424:	a03fed1e 	bne	r20,zero,c0053dc <__alt_data_end+0xfc0053dc>
 c005428:	b805883a 	mov	r2,r23
 c00542c:	dfc00817 	ldw	ra,32(sp)
 c005430:	ddc00717 	ldw	r23,28(sp)
 c005434:	dd800617 	ldw	r22,24(sp)
 c005438:	dd400517 	ldw	r21,20(sp)
 c00543c:	dd000417 	ldw	r20,16(sp)
 c005440:	dcc00317 	ldw	r19,12(sp)
 c005444:	dc800217 	ldw	r18,8(sp)
 c005448:	dc400117 	ldw	r17,4(sp)
 c00544c:	dc000017 	ldw	r16,0(sp)
 c005450:	dec00904 	addi	sp,sp,36
 c005454:	f800283a 	ret
 c005458:	002f883a 	mov	r23,zero
 c00545c:	003ff206 	br	c005428 <__alt_data_end+0xfc005428>

0c005460 <_fwalk_reent>:
 c005460:	defff704 	addi	sp,sp,-36
 c005464:	dd000415 	stw	r20,16(sp)
 c005468:	dfc00815 	stw	ra,32(sp)
 c00546c:	ddc00715 	stw	r23,28(sp)
 c005470:	dd800615 	stw	r22,24(sp)
 c005474:	dd400515 	stw	r21,20(sp)
 c005478:	dcc00315 	stw	r19,12(sp)
 c00547c:	dc800215 	stw	r18,8(sp)
 c005480:	dc400115 	stw	r17,4(sp)
 c005484:	dc000015 	stw	r16,0(sp)
 c005488:	2500b804 	addi	r20,r4,736
 c00548c:	a0002326 	beq	r20,zero,c00551c <_fwalk_reent+0xbc>
 c005490:	282b883a 	mov	r21,r5
 c005494:	2027883a 	mov	r19,r4
 c005498:	002f883a 	mov	r23,zero
 c00549c:	05800044 	movi	r22,1
 c0054a0:	04bfffc4 	movi	r18,-1
 c0054a4:	a4400117 	ldw	r17,4(r20)
 c0054a8:	a4000217 	ldw	r16,8(r20)
 c0054ac:	8c7fffc4 	addi	r17,r17,-1
 c0054b0:	88000c16 	blt	r17,zero,c0054e4 <_fwalk_reent+0x84>
 c0054b4:	84000304 	addi	r16,r16,12
 c0054b8:	8080000b 	ldhu	r2,0(r16)
 c0054bc:	8c7fffc4 	addi	r17,r17,-1
 c0054c0:	817ffd04 	addi	r5,r16,-12
 c0054c4:	b080052e 	bgeu	r22,r2,c0054dc <_fwalk_reent+0x7c>
 c0054c8:	8080008f 	ldh	r2,2(r16)
 c0054cc:	9809883a 	mov	r4,r19
 c0054d0:	14800226 	beq	r2,r18,c0054dc <_fwalk_reent+0x7c>
 c0054d4:	a83ee83a 	callr	r21
 c0054d8:	b8aeb03a 	or	r23,r23,r2
 c0054dc:	84001a04 	addi	r16,r16,104
 c0054e0:	8cbff51e 	bne	r17,r18,c0054b8 <__alt_data_end+0xfc0054b8>
 c0054e4:	a5000017 	ldw	r20,0(r20)
 c0054e8:	a03fee1e 	bne	r20,zero,c0054a4 <__alt_data_end+0xfc0054a4>
 c0054ec:	b805883a 	mov	r2,r23
 c0054f0:	dfc00817 	ldw	ra,32(sp)
 c0054f4:	ddc00717 	ldw	r23,28(sp)
 c0054f8:	dd800617 	ldw	r22,24(sp)
 c0054fc:	dd400517 	ldw	r21,20(sp)
 c005500:	dd000417 	ldw	r20,16(sp)
 c005504:	dcc00317 	ldw	r19,12(sp)
 c005508:	dc800217 	ldw	r18,8(sp)
 c00550c:	dc400117 	ldw	r17,4(sp)
 c005510:	dc000017 	ldw	r16,0(sp)
 c005514:	dec00904 	addi	sp,sp,36
 c005518:	f800283a 	ret
 c00551c:	002f883a 	mov	r23,zero
 c005520:	003ff206 	br	c0054ec <__alt_data_end+0xfc0054ec>

0c005524 <_setlocale_r>:
 c005524:	30001b26 	beq	r6,zero,c005594 <_setlocale_r+0x70>
 c005528:	01430074 	movhi	r5,3073
 c00552c:	defffe04 	addi	sp,sp,-8
 c005530:	2940aa04 	addi	r5,r5,680
 c005534:	3009883a 	mov	r4,r6
 c005538:	dc000015 	stw	r16,0(sp)
 c00553c:	dfc00115 	stw	ra,4(sp)
 c005540:	3021883a 	mov	r16,r6
 c005544:	c0074900 	call	c007490 <strcmp>
 c005548:	1000061e 	bne	r2,zero,c005564 <_setlocale_r+0x40>
 c00554c:	00830074 	movhi	r2,3073
 c005550:	1080a904 	addi	r2,r2,676
 c005554:	dfc00117 	ldw	ra,4(sp)
 c005558:	dc000017 	ldw	r16,0(sp)
 c00555c:	dec00204 	addi	sp,sp,8
 c005560:	f800283a 	ret
 c005564:	01430074 	movhi	r5,3073
 c005568:	2940a904 	addi	r5,r5,676
 c00556c:	8009883a 	mov	r4,r16
 c005570:	c0074900 	call	c007490 <strcmp>
 c005574:	103ff526 	beq	r2,zero,c00554c <__alt_data_end+0xfc00554c>
 c005578:	01430074 	movhi	r5,3073
 c00557c:	29409404 	addi	r5,r5,592
 c005580:	8009883a 	mov	r4,r16
 c005584:	c0074900 	call	c007490 <strcmp>
 c005588:	103ff026 	beq	r2,zero,c00554c <__alt_data_end+0xfc00554c>
 c00558c:	0005883a 	mov	r2,zero
 c005590:	003ff006 	br	c005554 <__alt_data_end+0xfc005554>
 c005594:	00830074 	movhi	r2,3073
 c005598:	1080a904 	addi	r2,r2,676
 c00559c:	f800283a 	ret

0c0055a0 <__locale_charset>:
 c0055a0:	00830074 	movhi	r2,3073
 c0055a4:	10825c04 	addi	r2,r2,2416
 c0055a8:	f800283a 	ret

0c0055ac <__locale_mb_cur_max>:
 c0055ac:	00830074 	movhi	r2,3073
 c0055b0:	1087fa04 	addi	r2,r2,8168
 c0055b4:	10800017 	ldw	r2,0(r2)
 c0055b8:	f800283a 	ret

0c0055bc <__locale_msgcharset>:
 c0055bc:	00830074 	movhi	r2,3073
 c0055c0:	10825404 	addi	r2,r2,2384
 c0055c4:	f800283a 	ret

0c0055c8 <__locale_cjk_lang>:
 c0055c8:	0005883a 	mov	r2,zero
 c0055cc:	f800283a 	ret

0c0055d0 <_localeconv_r>:
 c0055d0:	00830074 	movhi	r2,3073
 c0055d4:	10826404 	addi	r2,r2,2448
 c0055d8:	f800283a 	ret

0c0055dc <setlocale>:
 c0055dc:	00830074 	movhi	r2,3073
 c0055e0:	1087f904 	addi	r2,r2,8164
 c0055e4:	280d883a 	mov	r6,r5
 c0055e8:	200b883a 	mov	r5,r4
 c0055ec:	11000017 	ldw	r4,0(r2)
 c0055f0:	c0055241 	jmpi	c005524 <_setlocale_r>

0c0055f4 <localeconv>:
 c0055f4:	00830074 	movhi	r2,3073
 c0055f8:	10826404 	addi	r2,r2,2448
 c0055fc:	f800283a 	ret

0c005600 <__smakebuf_r>:
 c005600:	2880030b 	ldhu	r2,12(r5)
 c005604:	10c0008c 	andi	r3,r2,2
 c005608:	1800411e 	bne	r3,zero,c005710 <__smakebuf_r+0x110>
 c00560c:	deffec04 	addi	sp,sp,-80
 c005610:	dc000f15 	stw	r16,60(sp)
 c005614:	2821883a 	mov	r16,r5
 c005618:	2940038f 	ldh	r5,14(r5)
 c00561c:	dc401015 	stw	r17,64(sp)
 c005620:	dfc01315 	stw	ra,76(sp)
 c005624:	dcc01215 	stw	r19,72(sp)
 c005628:	dc801115 	stw	r18,68(sp)
 c00562c:	2023883a 	mov	r17,r4
 c005630:	28001c16 	blt	r5,zero,c0056a4 <__smakebuf_r+0xa4>
 c005634:	d80d883a 	mov	r6,sp
 c005638:	c0091980 	call	c009198 <_fstat_r>
 c00563c:	10001816 	blt	r2,zero,c0056a0 <__smakebuf_r+0xa0>
 c005640:	d8800117 	ldw	r2,4(sp)
 c005644:	00e00014 	movui	r3,32768
 c005648:	10bc000c 	andi	r2,r2,61440
 c00564c:	14c80020 	cmpeqi	r19,r2,8192
 c005650:	10c03726 	beq	r2,r3,c005730 <__smakebuf_r+0x130>
 c005654:	80c0030b 	ldhu	r3,12(r16)
 c005658:	18c20014 	ori	r3,r3,2048
 c00565c:	80c0030d 	sth	r3,12(r16)
 c005660:	00c80004 	movi	r3,8192
 c005664:	10c0521e 	bne	r2,r3,c0057b0 <__smakebuf_r+0x1b0>
 c005668:	8140038f 	ldh	r5,14(r16)
 c00566c:	8809883a 	mov	r4,r17
 c005670:	c0096bc0 	call	c0096bc <_isatty_r>
 c005674:	10004c26 	beq	r2,zero,c0057a8 <__smakebuf_r+0x1a8>
 c005678:	8080030b 	ldhu	r2,12(r16)
 c00567c:	80c010c4 	addi	r3,r16,67
 c005680:	80c00015 	stw	r3,0(r16)
 c005684:	10800054 	ori	r2,r2,1
 c005688:	8080030d 	sth	r2,12(r16)
 c00568c:	00800044 	movi	r2,1
 c005690:	80c00415 	stw	r3,16(r16)
 c005694:	80800515 	stw	r2,20(r16)
 c005698:	04810004 	movi	r18,1024
 c00569c:	00000706 	br	c0056bc <__smakebuf_r+0xbc>
 c0056a0:	8080030b 	ldhu	r2,12(r16)
 c0056a4:	10c0200c 	andi	r3,r2,128
 c0056a8:	18001f1e 	bne	r3,zero,c005728 <__smakebuf_r+0x128>
 c0056ac:	04810004 	movi	r18,1024
 c0056b0:	10820014 	ori	r2,r2,2048
 c0056b4:	8080030d 	sth	r2,12(r16)
 c0056b8:	0027883a 	mov	r19,zero
 c0056bc:	900b883a 	mov	r5,r18
 c0056c0:	8809883a 	mov	r4,r17
 c0056c4:	c0057bc0 	call	c0057bc <_malloc_r>
 c0056c8:	10002c26 	beq	r2,zero,c00577c <__smakebuf_r+0x17c>
 c0056cc:	80c0030b 	ldhu	r3,12(r16)
 c0056d0:	01030034 	movhi	r4,3072
 c0056d4:	2112f004 	addi	r4,r4,19392
 c0056d8:	89000f15 	stw	r4,60(r17)
 c0056dc:	18c02014 	ori	r3,r3,128
 c0056e0:	80c0030d 	sth	r3,12(r16)
 c0056e4:	80800015 	stw	r2,0(r16)
 c0056e8:	80800415 	stw	r2,16(r16)
 c0056ec:	84800515 	stw	r18,20(r16)
 c0056f0:	98001a1e 	bne	r19,zero,c00575c <__smakebuf_r+0x15c>
 c0056f4:	dfc01317 	ldw	ra,76(sp)
 c0056f8:	dcc01217 	ldw	r19,72(sp)
 c0056fc:	dc801117 	ldw	r18,68(sp)
 c005700:	dc401017 	ldw	r17,64(sp)
 c005704:	dc000f17 	ldw	r16,60(sp)
 c005708:	dec01404 	addi	sp,sp,80
 c00570c:	f800283a 	ret
 c005710:	288010c4 	addi	r2,r5,67
 c005714:	28800015 	stw	r2,0(r5)
 c005718:	28800415 	stw	r2,16(r5)
 c00571c:	00800044 	movi	r2,1
 c005720:	28800515 	stw	r2,20(r5)
 c005724:	f800283a 	ret
 c005728:	04801004 	movi	r18,64
 c00572c:	003fe006 	br	c0056b0 <__alt_data_end+0xfc0056b0>
 c005730:	81000a17 	ldw	r4,40(r16)
 c005734:	00c30034 	movhi	r3,3072
 c005738:	18dd0b04 	addi	r3,r3,29740
 c00573c:	20ffc51e 	bne	r4,r3,c005654 <__alt_data_end+0xfc005654>
 c005740:	8080030b 	ldhu	r2,12(r16)
 c005744:	04810004 	movi	r18,1024
 c005748:	84801315 	stw	r18,76(r16)
 c00574c:	1484b03a 	or	r2,r2,r18
 c005750:	8080030d 	sth	r2,12(r16)
 c005754:	0027883a 	mov	r19,zero
 c005758:	003fd806 	br	c0056bc <__alt_data_end+0xfc0056bc>
 c00575c:	8140038f 	ldh	r5,14(r16)
 c005760:	8809883a 	mov	r4,r17
 c005764:	c0096bc0 	call	c0096bc <_isatty_r>
 c005768:	103fe226 	beq	r2,zero,c0056f4 <__alt_data_end+0xfc0056f4>
 c00576c:	8080030b 	ldhu	r2,12(r16)
 c005770:	10800054 	ori	r2,r2,1
 c005774:	8080030d 	sth	r2,12(r16)
 c005778:	003fde06 	br	c0056f4 <__alt_data_end+0xfc0056f4>
 c00577c:	8080030b 	ldhu	r2,12(r16)
 c005780:	10c0800c 	andi	r3,r2,512
 c005784:	183fdb1e 	bne	r3,zero,c0056f4 <__alt_data_end+0xfc0056f4>
 c005788:	10800094 	ori	r2,r2,2
 c00578c:	80c010c4 	addi	r3,r16,67
 c005790:	8080030d 	sth	r2,12(r16)
 c005794:	00800044 	movi	r2,1
 c005798:	80c00015 	stw	r3,0(r16)
 c00579c:	80c00415 	stw	r3,16(r16)
 c0057a0:	80800515 	stw	r2,20(r16)
 c0057a4:	003fd306 	br	c0056f4 <__alt_data_end+0xfc0056f4>
 c0057a8:	04810004 	movi	r18,1024
 c0057ac:	003fc306 	br	c0056bc <__alt_data_end+0xfc0056bc>
 c0057b0:	0027883a 	mov	r19,zero
 c0057b4:	04810004 	movi	r18,1024
 c0057b8:	003fc006 	br	c0056bc <__alt_data_end+0xfc0056bc>

0c0057bc <_malloc_r>:
 c0057bc:	defff504 	addi	sp,sp,-44
 c0057c0:	dc800315 	stw	r18,12(sp)
 c0057c4:	dfc00a15 	stw	ra,40(sp)
 c0057c8:	df000915 	stw	fp,36(sp)
 c0057cc:	ddc00815 	stw	r23,32(sp)
 c0057d0:	dd800715 	stw	r22,28(sp)
 c0057d4:	dd400615 	stw	r21,24(sp)
 c0057d8:	dd000515 	stw	r20,20(sp)
 c0057dc:	dcc00415 	stw	r19,16(sp)
 c0057e0:	dc400215 	stw	r17,8(sp)
 c0057e4:	dc000115 	stw	r16,4(sp)
 c0057e8:	288002c4 	addi	r2,r5,11
 c0057ec:	00c00584 	movi	r3,22
 c0057f0:	2025883a 	mov	r18,r4
 c0057f4:	18807f2e 	bgeu	r3,r2,c0059f4 <_malloc_r+0x238>
 c0057f8:	047ffe04 	movi	r17,-8
 c0057fc:	1462703a 	and	r17,r2,r17
 c005800:	8800a316 	blt	r17,zero,c005a90 <_malloc_r+0x2d4>
 c005804:	8940a236 	bltu	r17,r5,c005a90 <_malloc_r+0x2d4>
 c005808:	c00dd840 	call	c00dd84 <__malloc_lock>
 c00580c:	00807dc4 	movi	r2,503
 c005810:	1441e92e 	bgeu	r2,r17,c005fb8 <_malloc_r+0x7fc>
 c005814:	8804d27a 	srli	r2,r17,9
 c005818:	1000a126 	beq	r2,zero,c005aa0 <_malloc_r+0x2e4>
 c00581c:	00c00104 	movi	r3,4
 c005820:	18811e36 	bltu	r3,r2,c005c9c <_malloc_r+0x4e0>
 c005824:	8804d1ba 	srli	r2,r17,6
 c005828:	12000e44 	addi	r8,r2,57
 c00582c:	11c00e04 	addi	r7,r2,56
 c005830:	4209883a 	add	r4,r8,r8
 c005834:	04c30074 	movhi	r19,3073
 c005838:	2109883a 	add	r4,r4,r4
 c00583c:	9cc27204 	addi	r19,r19,2504
 c005840:	2109883a 	add	r4,r4,r4
 c005844:	9909883a 	add	r4,r19,r4
 c005848:	24000117 	ldw	r16,4(r4)
 c00584c:	213ffe04 	addi	r4,r4,-8
 c005850:	24009726 	beq	r4,r16,c005ab0 <_malloc_r+0x2f4>
 c005854:	80800117 	ldw	r2,4(r16)
 c005858:	01bfff04 	movi	r6,-4
 c00585c:	014003c4 	movi	r5,15
 c005860:	1184703a 	and	r2,r2,r6
 c005864:	1447c83a 	sub	r3,r2,r17
 c005868:	28c00716 	blt	r5,r3,c005888 <_malloc_r+0xcc>
 c00586c:	1800920e 	bge	r3,zero,c005ab8 <_malloc_r+0x2fc>
 c005870:	84000317 	ldw	r16,12(r16)
 c005874:	24008e26 	beq	r4,r16,c005ab0 <_malloc_r+0x2f4>
 c005878:	80800117 	ldw	r2,4(r16)
 c00587c:	1184703a 	and	r2,r2,r6
 c005880:	1447c83a 	sub	r3,r2,r17
 c005884:	28fff90e 	bge	r5,r3,c00586c <__alt_data_end+0xfc00586c>
 c005888:	3809883a 	mov	r4,r7
 c00588c:	01830074 	movhi	r6,3073
 c005890:	9c000417 	ldw	r16,16(r19)
 c005894:	31827204 	addi	r6,r6,2504
 c005898:	32000204 	addi	r8,r6,8
 c00589c:	82013426 	beq	r16,r8,c005d70 <_malloc_r+0x5b4>
 c0058a0:	80c00117 	ldw	r3,4(r16)
 c0058a4:	00bfff04 	movi	r2,-4
 c0058a8:	188e703a 	and	r7,r3,r2
 c0058ac:	3c45c83a 	sub	r2,r7,r17
 c0058b0:	00c003c4 	movi	r3,15
 c0058b4:	18811f16 	blt	r3,r2,c005d34 <_malloc_r+0x578>
 c0058b8:	32000515 	stw	r8,20(r6)
 c0058bc:	32000415 	stw	r8,16(r6)
 c0058c0:	10007f0e 	bge	r2,zero,c005ac0 <_malloc_r+0x304>
 c0058c4:	00807fc4 	movi	r2,511
 c0058c8:	11c0fd36 	bltu	r2,r7,c005cc0 <_malloc_r+0x504>
 c0058cc:	3806d0fa 	srli	r3,r7,3
 c0058d0:	01c00044 	movi	r7,1
 c0058d4:	30800117 	ldw	r2,4(r6)
 c0058d8:	19400044 	addi	r5,r3,1
 c0058dc:	294b883a 	add	r5,r5,r5
 c0058e0:	1807d0ba 	srai	r3,r3,2
 c0058e4:	294b883a 	add	r5,r5,r5
 c0058e8:	294b883a 	add	r5,r5,r5
 c0058ec:	298b883a 	add	r5,r5,r6
 c0058f0:	38c6983a 	sll	r3,r7,r3
 c0058f4:	29c00017 	ldw	r7,0(r5)
 c0058f8:	2a7ffe04 	addi	r9,r5,-8
 c0058fc:	1886b03a 	or	r3,r3,r2
 c005900:	82400315 	stw	r9,12(r16)
 c005904:	81c00215 	stw	r7,8(r16)
 c005908:	30c00115 	stw	r3,4(r6)
 c00590c:	2c000015 	stw	r16,0(r5)
 c005910:	3c000315 	stw	r16,12(r7)
 c005914:	2005d0ba 	srai	r2,r4,2
 c005918:	01400044 	movi	r5,1
 c00591c:	288a983a 	sll	r5,r5,r2
 c005920:	19406f36 	bltu	r3,r5,c005ae0 <_malloc_r+0x324>
 c005924:	28c4703a 	and	r2,r5,r3
 c005928:	10000a1e 	bne	r2,zero,c005954 <_malloc_r+0x198>
 c00592c:	00bfff04 	movi	r2,-4
 c005930:	294b883a 	add	r5,r5,r5
 c005934:	2088703a 	and	r4,r4,r2
 c005938:	28c4703a 	and	r2,r5,r3
 c00593c:	21000104 	addi	r4,r4,4
 c005940:	1000041e 	bne	r2,zero,c005954 <_malloc_r+0x198>
 c005944:	294b883a 	add	r5,r5,r5
 c005948:	28c4703a 	and	r2,r5,r3
 c00594c:	21000104 	addi	r4,r4,4
 c005950:	103ffc26 	beq	r2,zero,c005944 <__alt_data_end+0xfc005944>
 c005954:	02bfff04 	movi	r10,-4
 c005958:	024003c4 	movi	r9,15
 c00595c:	21800044 	addi	r6,r4,1
 c005960:	318d883a 	add	r6,r6,r6
 c005964:	318d883a 	add	r6,r6,r6
 c005968:	318d883a 	add	r6,r6,r6
 c00596c:	998d883a 	add	r6,r19,r6
 c005970:	333ffe04 	addi	r12,r6,-8
 c005974:	2017883a 	mov	r11,r4
 c005978:	31800104 	addi	r6,r6,4
 c00597c:	34000017 	ldw	r16,0(r6)
 c005980:	31fffd04 	addi	r7,r6,-12
 c005984:	81c0041e 	bne	r16,r7,c005998 <_malloc_r+0x1dc>
 c005988:	0000fb06 	br	c005d78 <_malloc_r+0x5bc>
 c00598c:	1801030e 	bge	r3,zero,c005d9c <_malloc_r+0x5e0>
 c005990:	84000317 	ldw	r16,12(r16)
 c005994:	81c0f826 	beq	r16,r7,c005d78 <_malloc_r+0x5bc>
 c005998:	80800117 	ldw	r2,4(r16)
 c00599c:	1284703a 	and	r2,r2,r10
 c0059a0:	1447c83a 	sub	r3,r2,r17
 c0059a4:	48fff90e 	bge	r9,r3,c00598c <__alt_data_end+0xfc00598c>
 c0059a8:	80800317 	ldw	r2,12(r16)
 c0059ac:	81000217 	ldw	r4,8(r16)
 c0059b0:	89400054 	ori	r5,r17,1
 c0059b4:	81400115 	stw	r5,4(r16)
 c0059b8:	20800315 	stw	r2,12(r4)
 c0059bc:	11000215 	stw	r4,8(r2)
 c0059c0:	8463883a 	add	r17,r16,r17
 c0059c4:	9c400515 	stw	r17,20(r19)
 c0059c8:	9c400415 	stw	r17,16(r19)
 c0059cc:	18800054 	ori	r2,r3,1
 c0059d0:	88800115 	stw	r2,4(r17)
 c0059d4:	8a000315 	stw	r8,12(r17)
 c0059d8:	8a000215 	stw	r8,8(r17)
 c0059dc:	88e3883a 	add	r17,r17,r3
 c0059e0:	88c00015 	stw	r3,0(r17)
 c0059e4:	9009883a 	mov	r4,r18
 c0059e8:	c00dda80 	call	c00dda8 <__malloc_unlock>
 c0059ec:	80800204 	addi	r2,r16,8
 c0059f0:	00001b06 	br	c005a60 <_malloc_r+0x2a4>
 c0059f4:	04400404 	movi	r17,16
 c0059f8:	89402536 	bltu	r17,r5,c005a90 <_malloc_r+0x2d4>
 c0059fc:	c00dd840 	call	c00dd84 <__malloc_lock>
 c005a00:	00800184 	movi	r2,6
 c005a04:	01000084 	movi	r4,2
 c005a08:	04c30074 	movhi	r19,3073
 c005a0c:	1085883a 	add	r2,r2,r2
 c005a10:	9cc27204 	addi	r19,r19,2504
 c005a14:	1085883a 	add	r2,r2,r2
 c005a18:	9885883a 	add	r2,r19,r2
 c005a1c:	14000117 	ldw	r16,4(r2)
 c005a20:	10fffe04 	addi	r3,r2,-8
 c005a24:	80c0d926 	beq	r16,r3,c005d8c <_malloc_r+0x5d0>
 c005a28:	80c00117 	ldw	r3,4(r16)
 c005a2c:	81000317 	ldw	r4,12(r16)
 c005a30:	00bfff04 	movi	r2,-4
 c005a34:	1884703a 	and	r2,r3,r2
 c005a38:	81400217 	ldw	r5,8(r16)
 c005a3c:	8085883a 	add	r2,r16,r2
 c005a40:	10c00117 	ldw	r3,4(r2)
 c005a44:	29000315 	stw	r4,12(r5)
 c005a48:	21400215 	stw	r5,8(r4)
 c005a4c:	18c00054 	ori	r3,r3,1
 c005a50:	10c00115 	stw	r3,4(r2)
 c005a54:	9009883a 	mov	r4,r18
 c005a58:	c00dda80 	call	c00dda8 <__malloc_unlock>
 c005a5c:	80800204 	addi	r2,r16,8
 c005a60:	dfc00a17 	ldw	ra,40(sp)
 c005a64:	df000917 	ldw	fp,36(sp)
 c005a68:	ddc00817 	ldw	r23,32(sp)
 c005a6c:	dd800717 	ldw	r22,28(sp)
 c005a70:	dd400617 	ldw	r21,24(sp)
 c005a74:	dd000517 	ldw	r20,20(sp)
 c005a78:	dcc00417 	ldw	r19,16(sp)
 c005a7c:	dc800317 	ldw	r18,12(sp)
 c005a80:	dc400217 	ldw	r17,8(sp)
 c005a84:	dc000117 	ldw	r16,4(sp)
 c005a88:	dec00b04 	addi	sp,sp,44
 c005a8c:	f800283a 	ret
 c005a90:	00800304 	movi	r2,12
 c005a94:	90800015 	stw	r2,0(r18)
 c005a98:	0005883a 	mov	r2,zero
 c005a9c:	003ff006 	br	c005a60 <__alt_data_end+0xfc005a60>
 c005aa0:	01002004 	movi	r4,128
 c005aa4:	02001004 	movi	r8,64
 c005aa8:	01c00fc4 	movi	r7,63
 c005aac:	003f6106 	br	c005834 <__alt_data_end+0xfc005834>
 c005ab0:	4009883a 	mov	r4,r8
 c005ab4:	003f7506 	br	c00588c <__alt_data_end+0xfc00588c>
 c005ab8:	81000317 	ldw	r4,12(r16)
 c005abc:	003fde06 	br	c005a38 <__alt_data_end+0xfc005a38>
 c005ac0:	81c5883a 	add	r2,r16,r7
 c005ac4:	11400117 	ldw	r5,4(r2)
 c005ac8:	9009883a 	mov	r4,r18
 c005acc:	29400054 	ori	r5,r5,1
 c005ad0:	11400115 	stw	r5,4(r2)
 c005ad4:	c00dda80 	call	c00dda8 <__malloc_unlock>
 c005ad8:	80800204 	addi	r2,r16,8
 c005adc:	003fe006 	br	c005a60 <__alt_data_end+0xfc005a60>
 c005ae0:	9c000217 	ldw	r16,8(r19)
 c005ae4:	00bfff04 	movi	r2,-4
 c005ae8:	85800117 	ldw	r22,4(r16)
 c005aec:	b0ac703a 	and	r22,r22,r2
 c005af0:	b4400336 	bltu	r22,r17,c005b00 <_malloc_r+0x344>
 c005af4:	b445c83a 	sub	r2,r22,r17
 c005af8:	00c003c4 	movi	r3,15
 c005afc:	18805d16 	blt	r3,r2,c005c74 <_malloc_r+0x4b8>
 c005b00:	05c30074 	movhi	r23,3073
 c005b04:	00830074 	movhi	r2,3073
 c005b08:	108eca04 	addi	r2,r2,15144
 c005b0c:	bdc7fb04 	addi	r23,r23,8172
 c005b10:	15400017 	ldw	r21,0(r2)
 c005b14:	b8c00017 	ldw	r3,0(r23)
 c005b18:	00bfffc4 	movi	r2,-1
 c005b1c:	858d883a 	add	r6,r16,r22
 c005b20:	8d6b883a 	add	r21,r17,r21
 c005b24:	1880ea26 	beq	r3,r2,c005ed0 <_malloc_r+0x714>
 c005b28:	ad4403c4 	addi	r21,r21,4111
 c005b2c:	00bc0004 	movi	r2,-4096
 c005b30:	a8aa703a 	and	r21,r21,r2
 c005b34:	a80b883a 	mov	r5,r21
 c005b38:	9009883a 	mov	r4,r18
 c005b3c:	d9800015 	stw	r6,0(sp)
 c005b40:	c0073000 	call	c007300 <_sbrk_r>
 c005b44:	1029883a 	mov	r20,r2
 c005b48:	00bfffc4 	movi	r2,-1
 c005b4c:	d9800017 	ldw	r6,0(sp)
 c005b50:	a080e826 	beq	r20,r2,c005ef4 <_malloc_r+0x738>
 c005b54:	a180a636 	bltu	r20,r6,c005df0 <_malloc_r+0x634>
 c005b58:	07030074 	movhi	fp,3073
 c005b5c:	e70ed304 	addi	fp,fp,15180
 c005b60:	e0800017 	ldw	r2,0(fp)
 c005b64:	a887883a 	add	r3,r21,r2
 c005b68:	e0c00015 	stw	r3,0(fp)
 c005b6c:	3500e626 	beq	r6,r20,c005f08 <_malloc_r+0x74c>
 c005b70:	b9000017 	ldw	r4,0(r23)
 c005b74:	00bfffc4 	movi	r2,-1
 c005b78:	2080ee26 	beq	r4,r2,c005f34 <_malloc_r+0x778>
 c005b7c:	a185c83a 	sub	r2,r20,r6
 c005b80:	10c5883a 	add	r2,r2,r3
 c005b84:	e0800015 	stw	r2,0(fp)
 c005b88:	a0c001cc 	andi	r3,r20,7
 c005b8c:	1800bc26 	beq	r3,zero,c005e80 <_malloc_r+0x6c4>
 c005b90:	a0e9c83a 	sub	r20,r20,r3
 c005b94:	00840204 	movi	r2,4104
 c005b98:	a5000204 	addi	r20,r20,8
 c005b9c:	10c7c83a 	sub	r3,r2,r3
 c005ba0:	a545883a 	add	r2,r20,r21
 c005ba4:	1083ffcc 	andi	r2,r2,4095
 c005ba8:	18abc83a 	sub	r21,r3,r2
 c005bac:	a80b883a 	mov	r5,r21
 c005bb0:	9009883a 	mov	r4,r18
 c005bb4:	c0073000 	call	c007300 <_sbrk_r>
 c005bb8:	00ffffc4 	movi	r3,-1
 c005bbc:	10c0e126 	beq	r2,r3,c005f44 <_malloc_r+0x788>
 c005bc0:	1505c83a 	sub	r2,r2,r20
 c005bc4:	1545883a 	add	r2,r2,r21
 c005bc8:	10800054 	ori	r2,r2,1
 c005bcc:	e0c00017 	ldw	r3,0(fp)
 c005bd0:	9d000215 	stw	r20,8(r19)
 c005bd4:	a0800115 	stw	r2,4(r20)
 c005bd8:	a8c7883a 	add	r3,r21,r3
 c005bdc:	e0c00015 	stw	r3,0(fp)
 c005be0:	84c00e26 	beq	r16,r19,c005c1c <_malloc_r+0x460>
 c005be4:	018003c4 	movi	r6,15
 c005be8:	3580a72e 	bgeu	r6,r22,c005e88 <_malloc_r+0x6cc>
 c005bec:	81400117 	ldw	r5,4(r16)
 c005bf0:	013ffe04 	movi	r4,-8
 c005bf4:	b0bffd04 	addi	r2,r22,-12
 c005bf8:	1104703a 	and	r2,r2,r4
 c005bfc:	2900004c 	andi	r4,r5,1
 c005c00:	2088b03a 	or	r4,r4,r2
 c005c04:	81000115 	stw	r4,4(r16)
 c005c08:	01400144 	movi	r5,5
 c005c0c:	8089883a 	add	r4,r16,r2
 c005c10:	21400115 	stw	r5,4(r4)
 c005c14:	21400215 	stw	r5,8(r4)
 c005c18:	3080cd36 	bltu	r6,r2,c005f50 <_malloc_r+0x794>
 c005c1c:	00830074 	movhi	r2,3073
 c005c20:	108ec904 	addi	r2,r2,15140
 c005c24:	11000017 	ldw	r4,0(r2)
 c005c28:	20c0012e 	bgeu	r4,r3,c005c30 <_malloc_r+0x474>
 c005c2c:	10c00015 	stw	r3,0(r2)
 c005c30:	00830074 	movhi	r2,3073
 c005c34:	108ec804 	addi	r2,r2,15136
 c005c38:	11000017 	ldw	r4,0(r2)
 c005c3c:	9c000217 	ldw	r16,8(r19)
 c005c40:	20c0012e 	bgeu	r4,r3,c005c48 <_malloc_r+0x48c>
 c005c44:	10c00015 	stw	r3,0(r2)
 c005c48:	80c00117 	ldw	r3,4(r16)
 c005c4c:	00bfff04 	movi	r2,-4
 c005c50:	1886703a 	and	r3,r3,r2
 c005c54:	1c45c83a 	sub	r2,r3,r17
 c005c58:	1c400236 	bltu	r3,r17,c005c64 <_malloc_r+0x4a8>
 c005c5c:	00c003c4 	movi	r3,15
 c005c60:	18800416 	blt	r3,r2,c005c74 <_malloc_r+0x4b8>
 c005c64:	9009883a 	mov	r4,r18
 c005c68:	c00dda80 	call	c00dda8 <__malloc_unlock>
 c005c6c:	0005883a 	mov	r2,zero
 c005c70:	003f7b06 	br	c005a60 <__alt_data_end+0xfc005a60>
 c005c74:	88c00054 	ori	r3,r17,1
 c005c78:	80c00115 	stw	r3,4(r16)
 c005c7c:	8463883a 	add	r17,r16,r17
 c005c80:	10800054 	ori	r2,r2,1
 c005c84:	9c400215 	stw	r17,8(r19)
 c005c88:	88800115 	stw	r2,4(r17)
 c005c8c:	9009883a 	mov	r4,r18
 c005c90:	c00dda80 	call	c00dda8 <__malloc_unlock>
 c005c94:	80800204 	addi	r2,r16,8
 c005c98:	003f7106 	br	c005a60 <__alt_data_end+0xfc005a60>
 c005c9c:	00c00504 	movi	r3,20
 c005ca0:	18804a2e 	bgeu	r3,r2,c005dcc <_malloc_r+0x610>
 c005ca4:	00c01504 	movi	r3,84
 c005ca8:	18806e36 	bltu	r3,r2,c005e64 <_malloc_r+0x6a8>
 c005cac:	8804d33a 	srli	r2,r17,12
 c005cb0:	12001bc4 	addi	r8,r2,111
 c005cb4:	11c01b84 	addi	r7,r2,110
 c005cb8:	4209883a 	add	r4,r8,r8
 c005cbc:	003edd06 	br	c005834 <__alt_data_end+0xfc005834>
 c005cc0:	3804d27a 	srli	r2,r7,9
 c005cc4:	00c00104 	movi	r3,4
 c005cc8:	1880442e 	bgeu	r3,r2,c005ddc <_malloc_r+0x620>
 c005ccc:	00c00504 	movi	r3,20
 c005cd0:	18808136 	bltu	r3,r2,c005ed8 <_malloc_r+0x71c>
 c005cd4:	11401704 	addi	r5,r2,92
 c005cd8:	10c016c4 	addi	r3,r2,91
 c005cdc:	294b883a 	add	r5,r5,r5
 c005ce0:	294b883a 	add	r5,r5,r5
 c005ce4:	294b883a 	add	r5,r5,r5
 c005ce8:	994b883a 	add	r5,r19,r5
 c005cec:	28800017 	ldw	r2,0(r5)
 c005cf0:	01830074 	movhi	r6,3073
 c005cf4:	297ffe04 	addi	r5,r5,-8
 c005cf8:	31827204 	addi	r6,r6,2504
 c005cfc:	28806526 	beq	r5,r2,c005e94 <_malloc_r+0x6d8>
 c005d00:	01bfff04 	movi	r6,-4
 c005d04:	10c00117 	ldw	r3,4(r2)
 c005d08:	1986703a 	and	r3,r3,r6
 c005d0c:	38c0022e 	bgeu	r7,r3,c005d18 <_malloc_r+0x55c>
 c005d10:	10800217 	ldw	r2,8(r2)
 c005d14:	28bffb1e 	bne	r5,r2,c005d04 <__alt_data_end+0xfc005d04>
 c005d18:	11400317 	ldw	r5,12(r2)
 c005d1c:	98c00117 	ldw	r3,4(r19)
 c005d20:	81400315 	stw	r5,12(r16)
 c005d24:	80800215 	stw	r2,8(r16)
 c005d28:	2c000215 	stw	r16,8(r5)
 c005d2c:	14000315 	stw	r16,12(r2)
 c005d30:	003ef806 	br	c005914 <__alt_data_end+0xfc005914>
 c005d34:	88c00054 	ori	r3,r17,1
 c005d38:	80c00115 	stw	r3,4(r16)
 c005d3c:	8463883a 	add	r17,r16,r17
 c005d40:	34400515 	stw	r17,20(r6)
 c005d44:	34400415 	stw	r17,16(r6)
 c005d48:	10c00054 	ori	r3,r2,1
 c005d4c:	8a000315 	stw	r8,12(r17)
 c005d50:	8a000215 	stw	r8,8(r17)
 c005d54:	88c00115 	stw	r3,4(r17)
 c005d58:	88a3883a 	add	r17,r17,r2
 c005d5c:	88800015 	stw	r2,0(r17)
 c005d60:	9009883a 	mov	r4,r18
 c005d64:	c00dda80 	call	c00dda8 <__malloc_unlock>
 c005d68:	80800204 	addi	r2,r16,8
 c005d6c:	003f3c06 	br	c005a60 <__alt_data_end+0xfc005a60>
 c005d70:	30c00117 	ldw	r3,4(r6)
 c005d74:	003ee706 	br	c005914 <__alt_data_end+0xfc005914>
 c005d78:	5ac00044 	addi	r11,r11,1
 c005d7c:	588000cc 	andi	r2,r11,3
 c005d80:	31800204 	addi	r6,r6,8
 c005d84:	103efd1e 	bne	r2,zero,c00597c <__alt_data_end+0xfc00597c>
 c005d88:	00002406 	br	c005e1c <_malloc_r+0x660>
 c005d8c:	14000317 	ldw	r16,12(r2)
 c005d90:	143f251e 	bne	r2,r16,c005a28 <__alt_data_end+0xfc005a28>
 c005d94:	21000084 	addi	r4,r4,2
 c005d98:	003ebc06 	br	c00588c <__alt_data_end+0xfc00588c>
 c005d9c:	8085883a 	add	r2,r16,r2
 c005da0:	10c00117 	ldw	r3,4(r2)
 c005da4:	81000317 	ldw	r4,12(r16)
 c005da8:	81400217 	ldw	r5,8(r16)
 c005dac:	18c00054 	ori	r3,r3,1
 c005db0:	10c00115 	stw	r3,4(r2)
 c005db4:	29000315 	stw	r4,12(r5)
 c005db8:	21400215 	stw	r5,8(r4)
 c005dbc:	9009883a 	mov	r4,r18
 c005dc0:	c00dda80 	call	c00dda8 <__malloc_unlock>
 c005dc4:	80800204 	addi	r2,r16,8
 c005dc8:	003f2506 	br	c005a60 <__alt_data_end+0xfc005a60>
 c005dcc:	12001704 	addi	r8,r2,92
 c005dd0:	11c016c4 	addi	r7,r2,91
 c005dd4:	4209883a 	add	r4,r8,r8
 c005dd8:	003e9606 	br	c005834 <__alt_data_end+0xfc005834>
 c005ddc:	3804d1ba 	srli	r2,r7,6
 c005de0:	11400e44 	addi	r5,r2,57
 c005de4:	10c00e04 	addi	r3,r2,56
 c005de8:	294b883a 	add	r5,r5,r5
 c005dec:	003fbc06 	br	c005ce0 <__alt_data_end+0xfc005ce0>
 c005df0:	84ff5926 	beq	r16,r19,c005b58 <__alt_data_end+0xfc005b58>
 c005df4:	00830074 	movhi	r2,3073
 c005df8:	10827204 	addi	r2,r2,2504
 c005dfc:	14000217 	ldw	r16,8(r2)
 c005e00:	00bfff04 	movi	r2,-4
 c005e04:	80c00117 	ldw	r3,4(r16)
 c005e08:	1886703a 	and	r3,r3,r2
 c005e0c:	003f9106 	br	c005c54 <__alt_data_end+0xfc005c54>
 c005e10:	60800217 	ldw	r2,8(r12)
 c005e14:	213fffc4 	addi	r4,r4,-1
 c005e18:	1300651e 	bne	r2,r12,c005fb0 <_malloc_r+0x7f4>
 c005e1c:	208000cc 	andi	r2,r4,3
 c005e20:	633ffe04 	addi	r12,r12,-8
 c005e24:	103ffa1e 	bne	r2,zero,c005e10 <__alt_data_end+0xfc005e10>
 c005e28:	98800117 	ldw	r2,4(r19)
 c005e2c:	0146303a 	nor	r3,zero,r5
 c005e30:	1884703a 	and	r2,r3,r2
 c005e34:	98800115 	stw	r2,4(r19)
 c005e38:	294b883a 	add	r5,r5,r5
 c005e3c:	117f2836 	bltu	r2,r5,c005ae0 <__alt_data_end+0xfc005ae0>
 c005e40:	283f2726 	beq	r5,zero,c005ae0 <__alt_data_end+0xfc005ae0>
 c005e44:	2886703a 	and	r3,r5,r2
 c005e48:	5809883a 	mov	r4,r11
 c005e4c:	183ec31e 	bne	r3,zero,c00595c <__alt_data_end+0xfc00595c>
 c005e50:	294b883a 	add	r5,r5,r5
 c005e54:	2886703a 	and	r3,r5,r2
 c005e58:	21000104 	addi	r4,r4,4
 c005e5c:	183ffc26 	beq	r3,zero,c005e50 <__alt_data_end+0xfc005e50>
 c005e60:	003ebe06 	br	c00595c <__alt_data_end+0xfc00595c>
 c005e64:	00c05504 	movi	r3,340
 c005e68:	18801236 	bltu	r3,r2,c005eb4 <_malloc_r+0x6f8>
 c005e6c:	8804d3fa 	srli	r2,r17,15
 c005e70:	12001e04 	addi	r8,r2,120
 c005e74:	11c01dc4 	addi	r7,r2,119
 c005e78:	4209883a 	add	r4,r8,r8
 c005e7c:	003e6d06 	br	c005834 <__alt_data_end+0xfc005834>
 c005e80:	00c40004 	movi	r3,4096
 c005e84:	003f4606 	br	c005ba0 <__alt_data_end+0xfc005ba0>
 c005e88:	00800044 	movi	r2,1
 c005e8c:	a0800115 	stw	r2,4(r20)
 c005e90:	003f7406 	br	c005c64 <__alt_data_end+0xfc005c64>
 c005e94:	1805d0ba 	srai	r2,r3,2
 c005e98:	01c00044 	movi	r7,1
 c005e9c:	30c00117 	ldw	r3,4(r6)
 c005ea0:	388e983a 	sll	r7,r7,r2
 c005ea4:	2805883a 	mov	r2,r5
 c005ea8:	38c6b03a 	or	r3,r7,r3
 c005eac:	30c00115 	stw	r3,4(r6)
 c005eb0:	003f9b06 	br	c005d20 <__alt_data_end+0xfc005d20>
 c005eb4:	00c15504 	movi	r3,1364
 c005eb8:	18801a36 	bltu	r3,r2,c005f24 <_malloc_r+0x768>
 c005ebc:	8804d4ba 	srli	r2,r17,18
 c005ec0:	12001f44 	addi	r8,r2,125
 c005ec4:	11c01f04 	addi	r7,r2,124
 c005ec8:	4209883a 	add	r4,r8,r8
 c005ecc:	003e5906 	br	c005834 <__alt_data_end+0xfc005834>
 c005ed0:	ad400404 	addi	r21,r21,16
 c005ed4:	003f1706 	br	c005b34 <__alt_data_end+0xfc005b34>
 c005ed8:	00c01504 	movi	r3,84
 c005edc:	18802336 	bltu	r3,r2,c005f6c <_malloc_r+0x7b0>
 c005ee0:	3804d33a 	srli	r2,r7,12
 c005ee4:	11401bc4 	addi	r5,r2,111
 c005ee8:	10c01b84 	addi	r3,r2,110
 c005eec:	294b883a 	add	r5,r5,r5
 c005ef0:	003f7b06 	br	c005ce0 <__alt_data_end+0xfc005ce0>
 c005ef4:	9c000217 	ldw	r16,8(r19)
 c005ef8:	00bfff04 	movi	r2,-4
 c005efc:	80c00117 	ldw	r3,4(r16)
 c005f00:	1886703a 	and	r3,r3,r2
 c005f04:	003f5306 	br	c005c54 <__alt_data_end+0xfc005c54>
 c005f08:	3083ffcc 	andi	r2,r6,4095
 c005f0c:	103f181e 	bne	r2,zero,c005b70 <__alt_data_end+0xfc005b70>
 c005f10:	99000217 	ldw	r4,8(r19)
 c005f14:	b545883a 	add	r2,r22,r21
 c005f18:	10800054 	ori	r2,r2,1
 c005f1c:	20800115 	stw	r2,4(r4)
 c005f20:	003f3e06 	br	c005c1c <__alt_data_end+0xfc005c1c>
 c005f24:	01003f84 	movi	r4,254
 c005f28:	02001fc4 	movi	r8,127
 c005f2c:	01c01f84 	movi	r7,126
 c005f30:	003e4006 	br	c005834 <__alt_data_end+0xfc005834>
 c005f34:	00830074 	movhi	r2,3073
 c005f38:	1087fb04 	addi	r2,r2,8172
 c005f3c:	15000015 	stw	r20,0(r2)
 c005f40:	003f1106 	br	c005b88 <__alt_data_end+0xfc005b88>
 c005f44:	00800044 	movi	r2,1
 c005f48:	002b883a 	mov	r21,zero
 c005f4c:	003f1f06 	br	c005bcc <__alt_data_end+0xfc005bcc>
 c005f50:	81400204 	addi	r5,r16,8
 c005f54:	9009883a 	mov	r4,r18
 c005f58:	c00508c0 	call	c00508c <_free_r>
 c005f5c:	00830074 	movhi	r2,3073
 c005f60:	108ed304 	addi	r2,r2,15180
 c005f64:	10c00017 	ldw	r3,0(r2)
 c005f68:	003f2c06 	br	c005c1c <__alt_data_end+0xfc005c1c>
 c005f6c:	00c05504 	movi	r3,340
 c005f70:	18800536 	bltu	r3,r2,c005f88 <_malloc_r+0x7cc>
 c005f74:	3804d3fa 	srli	r2,r7,15
 c005f78:	11401e04 	addi	r5,r2,120
 c005f7c:	10c01dc4 	addi	r3,r2,119
 c005f80:	294b883a 	add	r5,r5,r5
 c005f84:	003f5606 	br	c005ce0 <__alt_data_end+0xfc005ce0>
 c005f88:	00c15504 	movi	r3,1364
 c005f8c:	18800536 	bltu	r3,r2,c005fa4 <_malloc_r+0x7e8>
 c005f90:	3804d4ba 	srli	r2,r7,18
 c005f94:	11401f44 	addi	r5,r2,125
 c005f98:	10c01f04 	addi	r3,r2,124
 c005f9c:	294b883a 	add	r5,r5,r5
 c005fa0:	003f4f06 	br	c005ce0 <__alt_data_end+0xfc005ce0>
 c005fa4:	01403f84 	movi	r5,254
 c005fa8:	00c01f84 	movi	r3,126
 c005fac:	003f4c06 	br	c005ce0 <__alt_data_end+0xfc005ce0>
 c005fb0:	98800117 	ldw	r2,4(r19)
 c005fb4:	003fa006 	br	c005e38 <__alt_data_end+0xfc005e38>
 c005fb8:	8808d0fa 	srli	r4,r17,3
 c005fbc:	20800044 	addi	r2,r4,1
 c005fc0:	1085883a 	add	r2,r2,r2
 c005fc4:	003e9006 	br	c005a08 <__alt_data_end+0xfc005a08>

0c005fc8 <memchr>:
 c005fc8:	208000cc 	andi	r2,r4,3
 c005fcc:	280f883a 	mov	r7,r5
 c005fd0:	10003426 	beq	r2,zero,c0060a4 <memchr+0xdc>
 c005fd4:	30bfffc4 	addi	r2,r6,-1
 c005fd8:	30001a26 	beq	r6,zero,c006044 <memchr+0x7c>
 c005fdc:	20c00003 	ldbu	r3,0(r4)
 c005fe0:	29803fcc 	andi	r6,r5,255
 c005fe4:	30c0051e 	bne	r6,r3,c005ffc <memchr+0x34>
 c005fe8:	00001806 	br	c00604c <memchr+0x84>
 c005fec:	10001526 	beq	r2,zero,c006044 <memchr+0x7c>
 c005ff0:	20c00003 	ldbu	r3,0(r4)
 c005ff4:	10bfffc4 	addi	r2,r2,-1
 c005ff8:	30c01426 	beq	r6,r3,c00604c <memchr+0x84>
 c005ffc:	21000044 	addi	r4,r4,1
 c006000:	20c000cc 	andi	r3,r4,3
 c006004:	183ff91e 	bne	r3,zero,c005fec <__alt_data_end+0xfc005fec>
 c006008:	020000c4 	movi	r8,3
 c00600c:	40801136 	bltu	r8,r2,c006054 <memchr+0x8c>
 c006010:	10000c26 	beq	r2,zero,c006044 <memchr+0x7c>
 c006014:	20c00003 	ldbu	r3,0(r4)
 c006018:	29403fcc 	andi	r5,r5,255
 c00601c:	28c00b26 	beq	r5,r3,c00604c <memchr+0x84>
 c006020:	20c00044 	addi	r3,r4,1
 c006024:	39803fcc 	andi	r6,r7,255
 c006028:	2089883a 	add	r4,r4,r2
 c00602c:	00000306 	br	c00603c <memchr+0x74>
 c006030:	18c00044 	addi	r3,r3,1
 c006034:	197fffc3 	ldbu	r5,-1(r3)
 c006038:	31400526 	beq	r6,r5,c006050 <memchr+0x88>
 c00603c:	1805883a 	mov	r2,r3
 c006040:	20fffb1e 	bne	r4,r3,c006030 <__alt_data_end+0xfc006030>
 c006044:	0005883a 	mov	r2,zero
 c006048:	f800283a 	ret
 c00604c:	2005883a 	mov	r2,r4
 c006050:	f800283a 	ret
 c006054:	28c03fcc 	andi	r3,r5,255
 c006058:	1812923a 	slli	r9,r3,8
 c00605c:	02ffbff4 	movhi	r11,65279
 c006060:	02a02074 	movhi	r10,32897
 c006064:	48d2b03a 	or	r9,r9,r3
 c006068:	4806943a 	slli	r3,r9,16
 c00606c:	5affbfc4 	addi	r11,r11,-257
 c006070:	52a02004 	addi	r10,r10,-32640
 c006074:	48d2b03a 	or	r9,r9,r3
 c006078:	20c00017 	ldw	r3,0(r4)
 c00607c:	48c6f03a 	xor	r3,r9,r3
 c006080:	1acd883a 	add	r6,r3,r11
 c006084:	00c6303a 	nor	r3,zero,r3
 c006088:	30c6703a 	and	r3,r6,r3
 c00608c:	1a86703a 	and	r3,r3,r10
 c006090:	183fe01e 	bne	r3,zero,c006014 <__alt_data_end+0xfc006014>
 c006094:	10bfff04 	addi	r2,r2,-4
 c006098:	21000104 	addi	r4,r4,4
 c00609c:	40bff636 	bltu	r8,r2,c006078 <__alt_data_end+0xfc006078>
 c0060a0:	003fdb06 	br	c006010 <__alt_data_end+0xfc006010>
 c0060a4:	3005883a 	mov	r2,r6
 c0060a8:	003fd706 	br	c006008 <__alt_data_end+0xfc006008>

0c0060ac <memset>:
 c0060ac:	20c000cc 	andi	r3,r4,3
 c0060b0:	2005883a 	mov	r2,r4
 c0060b4:	18004426 	beq	r3,zero,c0061c8 <memset+0x11c>
 c0060b8:	31ffffc4 	addi	r7,r6,-1
 c0060bc:	30004026 	beq	r6,zero,c0061c0 <memset+0x114>
 c0060c0:	2813883a 	mov	r9,r5
 c0060c4:	200d883a 	mov	r6,r4
 c0060c8:	2007883a 	mov	r3,r4
 c0060cc:	00000406 	br	c0060e0 <memset+0x34>
 c0060d0:	3a3fffc4 	addi	r8,r7,-1
 c0060d4:	31800044 	addi	r6,r6,1
 c0060d8:	38003926 	beq	r7,zero,c0061c0 <memset+0x114>
 c0060dc:	400f883a 	mov	r7,r8
 c0060e0:	18c00044 	addi	r3,r3,1
 c0060e4:	32400005 	stb	r9,0(r6)
 c0060e8:	1a0000cc 	andi	r8,r3,3
 c0060ec:	403ff81e 	bne	r8,zero,c0060d0 <__alt_data_end+0xfc0060d0>
 c0060f0:	010000c4 	movi	r4,3
 c0060f4:	21c02d2e 	bgeu	r4,r7,c0061ac <memset+0x100>
 c0060f8:	29003fcc 	andi	r4,r5,255
 c0060fc:	200c923a 	slli	r6,r4,8
 c006100:	3108b03a 	or	r4,r6,r4
 c006104:	200c943a 	slli	r6,r4,16
 c006108:	218cb03a 	or	r6,r4,r6
 c00610c:	010003c4 	movi	r4,15
 c006110:	21c0182e 	bgeu	r4,r7,c006174 <memset+0xc8>
 c006114:	3b3ffc04 	addi	r12,r7,-16
 c006118:	6018d13a 	srli	r12,r12,4
 c00611c:	1a000104 	addi	r8,r3,4
 c006120:	1ac00204 	addi	r11,r3,8
 c006124:	6008913a 	slli	r4,r12,4
 c006128:	1a800304 	addi	r10,r3,12
 c00612c:	1813883a 	mov	r9,r3
 c006130:	21000504 	addi	r4,r4,20
 c006134:	1909883a 	add	r4,r3,r4
 c006138:	49800015 	stw	r6,0(r9)
 c00613c:	41800015 	stw	r6,0(r8)
 c006140:	59800015 	stw	r6,0(r11)
 c006144:	51800015 	stw	r6,0(r10)
 c006148:	42000404 	addi	r8,r8,16
 c00614c:	4a400404 	addi	r9,r9,16
 c006150:	5ac00404 	addi	r11,r11,16
 c006154:	52800404 	addi	r10,r10,16
 c006158:	413ff71e 	bne	r8,r4,c006138 <__alt_data_end+0xfc006138>
 c00615c:	63000044 	addi	r12,r12,1
 c006160:	6018913a 	slli	r12,r12,4
 c006164:	39c003cc 	andi	r7,r7,15
 c006168:	010000c4 	movi	r4,3
 c00616c:	1b07883a 	add	r3,r3,r12
 c006170:	21c00e2e 	bgeu	r4,r7,c0061ac <memset+0x100>
 c006174:	1813883a 	mov	r9,r3
 c006178:	3811883a 	mov	r8,r7
 c00617c:	010000c4 	movi	r4,3
 c006180:	49800015 	stw	r6,0(r9)
 c006184:	423fff04 	addi	r8,r8,-4
 c006188:	4a400104 	addi	r9,r9,4
 c00618c:	223ffc36 	bltu	r4,r8,c006180 <__alt_data_end+0xfc006180>
 c006190:	393fff04 	addi	r4,r7,-4
 c006194:	2008d0ba 	srli	r4,r4,2
 c006198:	39c000cc 	andi	r7,r7,3
 c00619c:	21000044 	addi	r4,r4,1
 c0061a0:	2109883a 	add	r4,r4,r4
 c0061a4:	2109883a 	add	r4,r4,r4
 c0061a8:	1907883a 	add	r3,r3,r4
 c0061ac:	38000526 	beq	r7,zero,c0061c4 <memset+0x118>
 c0061b0:	19cf883a 	add	r7,r3,r7
 c0061b4:	19400005 	stb	r5,0(r3)
 c0061b8:	18c00044 	addi	r3,r3,1
 c0061bc:	38fffd1e 	bne	r7,r3,c0061b4 <__alt_data_end+0xfc0061b4>
 c0061c0:	f800283a 	ret
 c0061c4:	f800283a 	ret
 c0061c8:	2007883a 	mov	r3,r4
 c0061cc:	300f883a 	mov	r7,r6
 c0061d0:	003fc706 	br	c0060f0 <__alt_data_end+0xfc0060f0>

0c0061d4 <_Balloc>:
 c0061d4:	20801317 	ldw	r2,76(r4)
 c0061d8:	defffc04 	addi	sp,sp,-16
 c0061dc:	dc400115 	stw	r17,4(sp)
 c0061e0:	dc000015 	stw	r16,0(sp)
 c0061e4:	dfc00315 	stw	ra,12(sp)
 c0061e8:	dc800215 	stw	r18,8(sp)
 c0061ec:	2023883a 	mov	r17,r4
 c0061f0:	2821883a 	mov	r16,r5
 c0061f4:	10000f26 	beq	r2,zero,c006234 <_Balloc+0x60>
 c0061f8:	8407883a 	add	r3,r16,r16
 c0061fc:	18c7883a 	add	r3,r3,r3
 c006200:	10c7883a 	add	r3,r2,r3
 c006204:	18800017 	ldw	r2,0(r3)
 c006208:	10001126 	beq	r2,zero,c006250 <_Balloc+0x7c>
 c00620c:	11000017 	ldw	r4,0(r2)
 c006210:	19000015 	stw	r4,0(r3)
 c006214:	10000415 	stw	zero,16(r2)
 c006218:	10000315 	stw	zero,12(r2)
 c00621c:	dfc00317 	ldw	ra,12(sp)
 c006220:	dc800217 	ldw	r18,8(sp)
 c006224:	dc400117 	ldw	r17,4(sp)
 c006228:	dc000017 	ldw	r16,0(sp)
 c00622c:	dec00404 	addi	sp,sp,16
 c006230:	f800283a 	ret
 c006234:	01800844 	movi	r6,33
 c006238:	01400104 	movi	r5,4
 c00623c:	c008db00 	call	c008db0 <_calloc_r>
 c006240:	88801315 	stw	r2,76(r17)
 c006244:	103fec1e 	bne	r2,zero,c0061f8 <__alt_data_end+0xfc0061f8>
 c006248:	0005883a 	mov	r2,zero
 c00624c:	003ff306 	br	c00621c <__alt_data_end+0xfc00621c>
 c006250:	01400044 	movi	r5,1
 c006254:	2c24983a 	sll	r18,r5,r16
 c006258:	8809883a 	mov	r4,r17
 c00625c:	91800144 	addi	r6,r18,5
 c006260:	318d883a 	add	r6,r6,r6
 c006264:	318d883a 	add	r6,r6,r6
 c006268:	c008db00 	call	c008db0 <_calloc_r>
 c00626c:	103ff626 	beq	r2,zero,c006248 <__alt_data_end+0xfc006248>
 c006270:	14000115 	stw	r16,4(r2)
 c006274:	14800215 	stw	r18,8(r2)
 c006278:	003fe606 	br	c006214 <__alt_data_end+0xfc006214>

0c00627c <_Bfree>:
 c00627c:	28000826 	beq	r5,zero,c0062a0 <_Bfree+0x24>
 c006280:	28c00117 	ldw	r3,4(r5)
 c006284:	20801317 	ldw	r2,76(r4)
 c006288:	18c7883a 	add	r3,r3,r3
 c00628c:	18c7883a 	add	r3,r3,r3
 c006290:	10c5883a 	add	r2,r2,r3
 c006294:	10c00017 	ldw	r3,0(r2)
 c006298:	28c00015 	stw	r3,0(r5)
 c00629c:	11400015 	stw	r5,0(r2)
 c0062a0:	f800283a 	ret

0c0062a4 <__multadd>:
 c0062a4:	defff704 	addi	sp,sp,-36
 c0062a8:	dc800215 	stw	r18,8(sp)
 c0062ac:	2c800417 	ldw	r18,16(r5)
 c0062b0:	dd800615 	stw	r22,24(sp)
 c0062b4:	dd400515 	stw	r21,20(sp)
 c0062b8:	dd000415 	stw	r20,16(sp)
 c0062bc:	dcc00315 	stw	r19,12(sp)
 c0062c0:	dc400115 	stw	r17,4(sp)
 c0062c4:	dc000015 	stw	r16,0(sp)
 c0062c8:	dfc00815 	stw	ra,32(sp)
 c0062cc:	ddc00715 	stw	r23,28(sp)
 c0062d0:	2827883a 	mov	r19,r5
 c0062d4:	2029883a 	mov	r20,r4
 c0062d8:	3023883a 	mov	r17,r6
 c0062dc:	3821883a 	mov	r16,r7
 c0062e0:	2d400504 	addi	r21,r5,20
 c0062e4:	002d883a 	mov	r22,zero
 c0062e8:	adc00017 	ldw	r23,0(r21)
 c0062ec:	880b883a 	mov	r5,r17
 c0062f0:	ad400104 	addi	r21,r21,4
 c0062f4:	b93fffcc 	andi	r4,r23,65535
 c0062f8:	c00097c0 	call	c00097c <__mulsi3>
 c0062fc:	b808d43a 	srli	r4,r23,16
 c006300:	880b883a 	mov	r5,r17
 c006304:	1421883a 	add	r16,r2,r16
 c006308:	c00097c0 	call	c00097c <__mulsi3>
 c00630c:	800ed43a 	srli	r7,r16,16
 c006310:	80ffffcc 	andi	r3,r16,65535
 c006314:	b5800044 	addi	r22,r22,1
 c006318:	11c5883a 	add	r2,r2,r7
 c00631c:	100e943a 	slli	r7,r2,16
 c006320:	1020d43a 	srli	r16,r2,16
 c006324:	38c7883a 	add	r3,r7,r3
 c006328:	a8ffff15 	stw	r3,-4(r21)
 c00632c:	b4bfee16 	blt	r22,r18,c0062e8 <__alt_data_end+0xfc0062e8>
 c006330:	80000926 	beq	r16,zero,c006358 <__multadd+0xb4>
 c006334:	98800217 	ldw	r2,8(r19)
 c006338:	9080130e 	bge	r18,r2,c006388 <__multadd+0xe4>
 c00633c:	90800144 	addi	r2,r18,5
 c006340:	1085883a 	add	r2,r2,r2
 c006344:	1085883a 	add	r2,r2,r2
 c006348:	9885883a 	add	r2,r19,r2
 c00634c:	14000015 	stw	r16,0(r2)
 c006350:	94800044 	addi	r18,r18,1
 c006354:	9c800415 	stw	r18,16(r19)
 c006358:	9805883a 	mov	r2,r19
 c00635c:	dfc00817 	ldw	ra,32(sp)
 c006360:	ddc00717 	ldw	r23,28(sp)
 c006364:	dd800617 	ldw	r22,24(sp)
 c006368:	dd400517 	ldw	r21,20(sp)
 c00636c:	dd000417 	ldw	r20,16(sp)
 c006370:	dcc00317 	ldw	r19,12(sp)
 c006374:	dc800217 	ldw	r18,8(sp)
 c006378:	dc400117 	ldw	r17,4(sp)
 c00637c:	dc000017 	ldw	r16,0(sp)
 c006380:	dec00904 	addi	sp,sp,36
 c006384:	f800283a 	ret
 c006388:	99400117 	ldw	r5,4(r19)
 c00638c:	a009883a 	mov	r4,r20
 c006390:	29400044 	addi	r5,r5,1
 c006394:	c0061d40 	call	c0061d4 <_Balloc>
 c006398:	99800417 	ldw	r6,16(r19)
 c00639c:	99400304 	addi	r5,r19,12
 c0063a0:	11000304 	addi	r4,r2,12
 c0063a4:	31800084 	addi	r6,r6,2
 c0063a8:	318d883a 	add	r6,r6,r6
 c0063ac:	318d883a 	add	r6,r6,r6
 c0063b0:	1023883a 	mov	r17,r2
 c0063b4:	c0009a40 	call	c0009a4 <memcpy>
 c0063b8:	98000a26 	beq	r19,zero,c0063e4 <__multadd+0x140>
 c0063bc:	98c00117 	ldw	r3,4(r19)
 c0063c0:	a0801317 	ldw	r2,76(r20)
 c0063c4:	18c7883a 	add	r3,r3,r3
 c0063c8:	18c7883a 	add	r3,r3,r3
 c0063cc:	10c5883a 	add	r2,r2,r3
 c0063d0:	10c00017 	ldw	r3,0(r2)
 c0063d4:	98c00015 	stw	r3,0(r19)
 c0063d8:	14c00015 	stw	r19,0(r2)
 c0063dc:	8827883a 	mov	r19,r17
 c0063e0:	003fd606 	br	c00633c <__alt_data_end+0xfc00633c>
 c0063e4:	8827883a 	mov	r19,r17
 c0063e8:	003fd406 	br	c00633c <__alt_data_end+0xfc00633c>

0c0063ec <__s2b>:
 c0063ec:	defff904 	addi	sp,sp,-28
 c0063f0:	dc400115 	stw	r17,4(sp)
 c0063f4:	dc000015 	stw	r16,0(sp)
 c0063f8:	2023883a 	mov	r17,r4
 c0063fc:	2821883a 	mov	r16,r5
 c006400:	39000204 	addi	r4,r7,8
 c006404:	01400244 	movi	r5,9
 c006408:	dcc00315 	stw	r19,12(sp)
 c00640c:	dc800215 	stw	r18,8(sp)
 c006410:	dfc00615 	stw	ra,24(sp)
 c006414:	dd400515 	stw	r21,20(sp)
 c006418:	dd000415 	stw	r20,16(sp)
 c00641c:	3825883a 	mov	r18,r7
 c006420:	3027883a 	mov	r19,r6
 c006424:	c00ad900 	call	c00ad90 <__divsi3>
 c006428:	00c00044 	movi	r3,1
 c00642c:	000b883a 	mov	r5,zero
 c006430:	1880030e 	bge	r3,r2,c006440 <__s2b+0x54>
 c006434:	18c7883a 	add	r3,r3,r3
 c006438:	29400044 	addi	r5,r5,1
 c00643c:	18bffd16 	blt	r3,r2,c006434 <__alt_data_end+0xfc006434>
 c006440:	8809883a 	mov	r4,r17
 c006444:	c0061d40 	call	c0061d4 <_Balloc>
 c006448:	d8c00717 	ldw	r3,28(sp)
 c00644c:	10c00515 	stw	r3,20(r2)
 c006450:	00c00044 	movi	r3,1
 c006454:	10c00415 	stw	r3,16(r2)
 c006458:	00c00244 	movi	r3,9
 c00645c:	1cc0210e 	bge	r3,r19,c0064e4 <__s2b+0xf8>
 c006460:	80eb883a 	add	r21,r16,r3
 c006464:	a829883a 	mov	r20,r21
 c006468:	84e1883a 	add	r16,r16,r19
 c00646c:	a1c00007 	ldb	r7,0(r20)
 c006470:	01800284 	movi	r6,10
 c006474:	a5000044 	addi	r20,r20,1
 c006478:	100b883a 	mov	r5,r2
 c00647c:	39fff404 	addi	r7,r7,-48
 c006480:	8809883a 	mov	r4,r17
 c006484:	c0062a40 	call	c0062a4 <__multadd>
 c006488:	a43ff81e 	bne	r20,r16,c00646c <__alt_data_end+0xfc00646c>
 c00648c:	ace1883a 	add	r16,r21,r19
 c006490:	843ffe04 	addi	r16,r16,-8
 c006494:	9c800a0e 	bge	r19,r18,c0064c0 <__s2b+0xd4>
 c006498:	94e5c83a 	sub	r18,r18,r19
 c00649c:	84a5883a 	add	r18,r16,r18
 c0064a0:	81c00007 	ldb	r7,0(r16)
 c0064a4:	01800284 	movi	r6,10
 c0064a8:	84000044 	addi	r16,r16,1
 c0064ac:	100b883a 	mov	r5,r2
 c0064b0:	39fff404 	addi	r7,r7,-48
 c0064b4:	8809883a 	mov	r4,r17
 c0064b8:	c0062a40 	call	c0062a4 <__multadd>
 c0064bc:	84bff81e 	bne	r16,r18,c0064a0 <__alt_data_end+0xfc0064a0>
 c0064c0:	dfc00617 	ldw	ra,24(sp)
 c0064c4:	dd400517 	ldw	r21,20(sp)
 c0064c8:	dd000417 	ldw	r20,16(sp)
 c0064cc:	dcc00317 	ldw	r19,12(sp)
 c0064d0:	dc800217 	ldw	r18,8(sp)
 c0064d4:	dc400117 	ldw	r17,4(sp)
 c0064d8:	dc000017 	ldw	r16,0(sp)
 c0064dc:	dec00704 	addi	sp,sp,28
 c0064e0:	f800283a 	ret
 c0064e4:	84000284 	addi	r16,r16,10
 c0064e8:	1827883a 	mov	r19,r3
 c0064ec:	003fe906 	br	c006494 <__alt_data_end+0xfc006494>

0c0064f0 <__hi0bits>:
 c0064f0:	20bfffec 	andhi	r2,r4,65535
 c0064f4:	1000141e 	bne	r2,zero,c006548 <__hi0bits+0x58>
 c0064f8:	2008943a 	slli	r4,r4,16
 c0064fc:	00800404 	movi	r2,16
 c006500:	20ffc02c 	andhi	r3,r4,65280
 c006504:	1800021e 	bne	r3,zero,c006510 <__hi0bits+0x20>
 c006508:	2008923a 	slli	r4,r4,8
 c00650c:	10800204 	addi	r2,r2,8
 c006510:	20fc002c 	andhi	r3,r4,61440
 c006514:	1800021e 	bne	r3,zero,c006520 <__hi0bits+0x30>
 c006518:	2008913a 	slli	r4,r4,4
 c00651c:	10800104 	addi	r2,r2,4
 c006520:	20f0002c 	andhi	r3,r4,49152
 c006524:	1800031e 	bne	r3,zero,c006534 <__hi0bits+0x44>
 c006528:	2109883a 	add	r4,r4,r4
 c00652c:	10800084 	addi	r2,r2,2
 c006530:	2109883a 	add	r4,r4,r4
 c006534:	20000316 	blt	r4,zero,c006544 <__hi0bits+0x54>
 c006538:	2110002c 	andhi	r4,r4,16384
 c00653c:	2000041e 	bne	r4,zero,c006550 <__hi0bits+0x60>
 c006540:	00800804 	movi	r2,32
 c006544:	f800283a 	ret
 c006548:	0005883a 	mov	r2,zero
 c00654c:	003fec06 	br	c006500 <__alt_data_end+0xfc006500>
 c006550:	10800044 	addi	r2,r2,1
 c006554:	f800283a 	ret

0c006558 <__lo0bits>:
 c006558:	20c00017 	ldw	r3,0(r4)
 c00655c:	188001cc 	andi	r2,r3,7
 c006560:	10000826 	beq	r2,zero,c006584 <__lo0bits+0x2c>
 c006564:	1880004c 	andi	r2,r3,1
 c006568:	1000211e 	bne	r2,zero,c0065f0 <__lo0bits+0x98>
 c00656c:	1880008c 	andi	r2,r3,2
 c006570:	1000211e 	bne	r2,zero,c0065f8 <__lo0bits+0xa0>
 c006574:	1806d0ba 	srli	r3,r3,2
 c006578:	00800084 	movi	r2,2
 c00657c:	20c00015 	stw	r3,0(r4)
 c006580:	f800283a 	ret
 c006584:	18bfffcc 	andi	r2,r3,65535
 c006588:	10001326 	beq	r2,zero,c0065d8 <__lo0bits+0x80>
 c00658c:	0005883a 	mov	r2,zero
 c006590:	19403fcc 	andi	r5,r3,255
 c006594:	2800021e 	bne	r5,zero,c0065a0 <__lo0bits+0x48>
 c006598:	1806d23a 	srli	r3,r3,8
 c00659c:	10800204 	addi	r2,r2,8
 c0065a0:	194003cc 	andi	r5,r3,15
 c0065a4:	2800021e 	bne	r5,zero,c0065b0 <__lo0bits+0x58>
 c0065a8:	1806d13a 	srli	r3,r3,4
 c0065ac:	10800104 	addi	r2,r2,4
 c0065b0:	194000cc 	andi	r5,r3,3
 c0065b4:	2800021e 	bne	r5,zero,c0065c0 <__lo0bits+0x68>
 c0065b8:	1806d0ba 	srli	r3,r3,2
 c0065bc:	10800084 	addi	r2,r2,2
 c0065c0:	1940004c 	andi	r5,r3,1
 c0065c4:	2800081e 	bne	r5,zero,c0065e8 <__lo0bits+0x90>
 c0065c8:	1806d07a 	srli	r3,r3,1
 c0065cc:	1800051e 	bne	r3,zero,c0065e4 <__lo0bits+0x8c>
 c0065d0:	00800804 	movi	r2,32
 c0065d4:	f800283a 	ret
 c0065d8:	1806d43a 	srli	r3,r3,16
 c0065dc:	00800404 	movi	r2,16
 c0065e0:	003feb06 	br	c006590 <__alt_data_end+0xfc006590>
 c0065e4:	10800044 	addi	r2,r2,1
 c0065e8:	20c00015 	stw	r3,0(r4)
 c0065ec:	f800283a 	ret
 c0065f0:	0005883a 	mov	r2,zero
 c0065f4:	f800283a 	ret
 c0065f8:	1806d07a 	srli	r3,r3,1
 c0065fc:	00800044 	movi	r2,1
 c006600:	20c00015 	stw	r3,0(r4)
 c006604:	f800283a 	ret

0c006608 <__i2b>:
 c006608:	defffd04 	addi	sp,sp,-12
 c00660c:	dc000015 	stw	r16,0(sp)
 c006610:	04000044 	movi	r16,1
 c006614:	dc400115 	stw	r17,4(sp)
 c006618:	2823883a 	mov	r17,r5
 c00661c:	800b883a 	mov	r5,r16
 c006620:	dfc00215 	stw	ra,8(sp)
 c006624:	c0061d40 	call	c0061d4 <_Balloc>
 c006628:	14400515 	stw	r17,20(r2)
 c00662c:	14000415 	stw	r16,16(r2)
 c006630:	dfc00217 	ldw	ra,8(sp)
 c006634:	dc400117 	ldw	r17,4(sp)
 c006638:	dc000017 	ldw	r16,0(sp)
 c00663c:	dec00304 	addi	sp,sp,12
 c006640:	f800283a 	ret

0c006644 <__multiply>:
 c006644:	deffef04 	addi	sp,sp,-68
 c006648:	dc400815 	stw	r17,32(sp)
 c00664c:	dc000715 	stw	r16,28(sp)
 c006650:	34400417 	ldw	r17,16(r6)
 c006654:	2c000417 	ldw	r16,16(r5)
 c006658:	dd800d15 	stw	r22,52(sp)
 c00665c:	dc800915 	stw	r18,36(sp)
 c006660:	dfc01015 	stw	ra,64(sp)
 c006664:	df000f15 	stw	fp,60(sp)
 c006668:	ddc00e15 	stw	r23,56(sp)
 c00666c:	dd400c15 	stw	r21,48(sp)
 c006670:	dd000b15 	stw	r20,44(sp)
 c006674:	dcc00a15 	stw	r19,40(sp)
 c006678:	2825883a 	mov	r18,r5
 c00667c:	302d883a 	mov	r22,r6
 c006680:	8440050e 	bge	r16,r17,c006698 <__multiply+0x54>
 c006684:	8007883a 	mov	r3,r16
 c006688:	3025883a 	mov	r18,r6
 c00668c:	8821883a 	mov	r16,r17
 c006690:	282d883a 	mov	r22,r5
 c006694:	1823883a 	mov	r17,r3
 c006698:	90800217 	ldw	r2,8(r18)
 c00669c:	8447883a 	add	r3,r16,r17
 c0066a0:	d8c00215 	stw	r3,8(sp)
 c0066a4:	91400117 	ldw	r5,4(r18)
 c0066a8:	10c0010e 	bge	r2,r3,c0066b0 <__multiply+0x6c>
 c0066ac:	29400044 	addi	r5,r5,1
 c0066b0:	c0061d40 	call	c0061d4 <_Balloc>
 c0066b4:	d8c00217 	ldw	r3,8(sp)
 c0066b8:	d8800615 	stw	r2,24(sp)
 c0066bc:	18eb883a 	add	r21,r3,r3
 c0066c0:	ad6b883a 	add	r21,r21,r21
 c0066c4:	10c00504 	addi	r3,r2,20
 c0066c8:	1d6b883a 	add	r21,r3,r21
 c0066cc:	d8c00115 	stw	r3,4(sp)
 c0066d0:	dd400315 	stw	r21,12(sp)
 c0066d4:	1805883a 	mov	r2,r3
 c0066d8:	1d40042e 	bgeu	r3,r21,c0066ec <__multiply+0xa8>
 c0066dc:	d8c00317 	ldw	r3,12(sp)
 c0066e0:	10000015 	stw	zero,0(r2)
 c0066e4:	10800104 	addi	r2,r2,4
 c0066e8:	10fffc36 	bltu	r2,r3,c0066dc <__alt_data_end+0xfc0066dc>
 c0066ec:	8c63883a 	add	r17,r17,r17
 c0066f0:	b5800504 	addi	r22,r22,20
 c0066f4:	8c63883a 	add	r17,r17,r17
 c0066f8:	94800504 	addi	r18,r18,20
 c0066fc:	8421883a 	add	r16,r16,r16
 c006700:	b463883a 	add	r17,r22,r17
 c006704:	8421883a 	add	r16,r16,r16
 c006708:	dd800015 	stw	r22,0(sp)
 c00670c:	dc800415 	stw	r18,16(sp)
 c006710:	dc400515 	stw	r17,20(sp)
 c006714:	9429883a 	add	r20,r18,r16
 c006718:	b4404f2e 	bgeu	r22,r17,c006858 <__multiply+0x214>
 c00671c:	d8c00017 	ldw	r3,0(sp)
 c006720:	1c800017 	ldw	r18,0(r3)
 c006724:	947fffcc 	andi	r17,r18,65535
 c006728:	88001e26 	beq	r17,zero,c0067a4 <__multiply+0x160>
 c00672c:	dd800117 	ldw	r22,4(sp)
 c006730:	dd400417 	ldw	r21,16(sp)
 c006734:	0027883a 	mov	r19,zero
 c006738:	ac800017 	ldw	r18,0(r21)
 c00673c:	b4000017 	ldw	r16,0(r22)
 c006740:	880b883a 	mov	r5,r17
 c006744:	913fffcc 	andi	r4,r18,65535
 c006748:	c00097c0 	call	c00097c <__mulsi3>
 c00674c:	9008d43a 	srli	r4,r18,16
 c006750:	84bfffcc 	andi	r18,r16,65535
 c006754:	1485883a 	add	r2,r2,r18
 c006758:	14e5883a 	add	r18,r2,r19
 c00675c:	8020d43a 	srli	r16,r16,16
 c006760:	9026d43a 	srli	r19,r18,16
 c006764:	880b883a 	mov	r5,r17
 c006768:	c00097c0 	call	c00097c <__mulsi3>
 c00676c:	1405883a 	add	r2,r2,r16
 c006770:	14e1883a 	add	r16,r2,r19
 c006774:	90ffffcc 	andi	r3,r18,65535
 c006778:	8024943a 	slli	r18,r16,16
 c00677c:	ad400104 	addi	r21,r21,4
 c006780:	b005883a 	mov	r2,r22
 c006784:	90c6b03a 	or	r3,r18,r3
 c006788:	b0c00015 	stw	r3,0(r22)
 c00678c:	8026d43a 	srli	r19,r16,16
 c006790:	b5800104 	addi	r22,r22,4
 c006794:	ad3fe836 	bltu	r21,r20,c006738 <__alt_data_end+0xfc006738>
 c006798:	d8c00017 	ldw	r3,0(sp)
 c00679c:	14c00115 	stw	r19,4(r2)
 c0067a0:	1c800017 	ldw	r18,0(r3)
 c0067a4:	9024d43a 	srli	r18,r18,16
 c0067a8:	90002226 	beq	r18,zero,c006834 <__multiply+0x1f0>
 c0067ac:	d8c00117 	ldw	r3,4(sp)
 c0067b0:	dd800417 	ldw	r22,16(sp)
 c0067b4:	002f883a 	mov	r23,zero
 c0067b8:	1f000017 	ldw	fp,0(r3)
 c0067bc:	1823883a 	mov	r17,r3
 c0067c0:	182b883a 	mov	r21,r3
 c0067c4:	e021883a 	mov	r16,fp
 c0067c8:	00000106 	br	c0067d0 <__multiply+0x18c>
 c0067cc:	982b883a 	mov	r21,r19
 c0067d0:	b100000b 	ldhu	r4,0(r22)
 c0067d4:	8020d43a 	srli	r16,r16,16
 c0067d8:	900b883a 	mov	r5,r18
 c0067dc:	c00097c0 	call	c00097c <__mulsi3>
 c0067e0:	1405883a 	add	r2,r2,r16
 c0067e4:	15ef883a 	add	r23,r2,r23
 c0067e8:	b804943a 	slli	r2,r23,16
 c0067ec:	e0ffffcc 	andi	r3,fp,65535
 c0067f0:	8c400104 	addi	r17,r17,4
 c0067f4:	10c6b03a 	or	r3,r2,r3
 c0067f8:	88ffff15 	stw	r3,-4(r17)
 c0067fc:	b5800104 	addi	r22,r22,4
 c006800:	b13fff17 	ldw	r4,-4(r22)
 c006804:	acc00104 	addi	r19,r21,4
 c006808:	900b883a 	mov	r5,r18
 c00680c:	2008d43a 	srli	r4,r4,16
 c006810:	9c000017 	ldw	r16,0(r19)
 c006814:	c00097c0 	call	c00097c <__mulsi3>
 c006818:	b806d43a 	srli	r3,r23,16
 c00681c:	813fffcc 	andi	r4,r16,65535
 c006820:	1105883a 	add	r2,r2,r4
 c006824:	10f9883a 	add	fp,r2,r3
 c006828:	e02ed43a 	srli	r23,fp,16
 c00682c:	b53fe736 	bltu	r22,r20,c0067cc <__alt_data_end+0xfc0067cc>
 c006830:	af000115 	stw	fp,4(r21)
 c006834:	d8c00017 	ldw	r3,0(sp)
 c006838:	d9000517 	ldw	r4,20(sp)
 c00683c:	18c00104 	addi	r3,r3,4
 c006840:	d8c00015 	stw	r3,0(sp)
 c006844:	d8c00117 	ldw	r3,4(sp)
 c006848:	18c00104 	addi	r3,r3,4
 c00684c:	d8c00115 	stw	r3,4(sp)
 c006850:	d8c00017 	ldw	r3,0(sp)
 c006854:	193fb136 	bltu	r3,r4,c00671c <__alt_data_end+0xfc00671c>
 c006858:	d8c00217 	ldw	r3,8(sp)
 c00685c:	00c00c0e 	bge	zero,r3,c006890 <__multiply+0x24c>
 c006860:	d8c00317 	ldw	r3,12(sp)
 c006864:	18bfff17 	ldw	r2,-4(r3)
 c006868:	1d7fff04 	addi	r21,r3,-4
 c00686c:	10000326 	beq	r2,zero,c00687c <__multiply+0x238>
 c006870:	00000706 	br	c006890 <__multiply+0x24c>
 c006874:	a8800017 	ldw	r2,0(r21)
 c006878:	1000051e 	bne	r2,zero,c006890 <__multiply+0x24c>
 c00687c:	d8c00217 	ldw	r3,8(sp)
 c006880:	ad7fff04 	addi	r21,r21,-4
 c006884:	18ffffc4 	addi	r3,r3,-1
 c006888:	d8c00215 	stw	r3,8(sp)
 c00688c:	183ff91e 	bne	r3,zero,c006874 <__alt_data_end+0xfc006874>
 c006890:	d8c00617 	ldw	r3,24(sp)
 c006894:	d9000217 	ldw	r4,8(sp)
 c006898:	1805883a 	mov	r2,r3
 c00689c:	19000415 	stw	r4,16(r3)
 c0068a0:	dfc01017 	ldw	ra,64(sp)
 c0068a4:	df000f17 	ldw	fp,60(sp)
 c0068a8:	ddc00e17 	ldw	r23,56(sp)
 c0068ac:	dd800d17 	ldw	r22,52(sp)
 c0068b0:	dd400c17 	ldw	r21,48(sp)
 c0068b4:	dd000b17 	ldw	r20,44(sp)
 c0068b8:	dcc00a17 	ldw	r19,40(sp)
 c0068bc:	dc800917 	ldw	r18,36(sp)
 c0068c0:	dc400817 	ldw	r17,32(sp)
 c0068c4:	dc000717 	ldw	r16,28(sp)
 c0068c8:	dec01104 	addi	sp,sp,68
 c0068cc:	f800283a 	ret

0c0068d0 <__pow5mult>:
 c0068d0:	defffa04 	addi	sp,sp,-24
 c0068d4:	dcc00315 	stw	r19,12(sp)
 c0068d8:	dc000015 	stw	r16,0(sp)
 c0068dc:	dfc00515 	stw	ra,20(sp)
 c0068e0:	dd000415 	stw	r20,16(sp)
 c0068e4:	dc800215 	stw	r18,8(sp)
 c0068e8:	dc400115 	stw	r17,4(sp)
 c0068ec:	308000cc 	andi	r2,r6,3
 c0068f0:	3021883a 	mov	r16,r6
 c0068f4:	2027883a 	mov	r19,r4
 c0068f8:	10002f1e 	bne	r2,zero,c0069b8 <__pow5mult+0xe8>
 c0068fc:	2825883a 	mov	r18,r5
 c006900:	8021d0ba 	srai	r16,r16,2
 c006904:	80001a26 	beq	r16,zero,c006970 <__pow5mult+0xa0>
 c006908:	9c401217 	ldw	r17,72(r19)
 c00690c:	8800061e 	bne	r17,zero,c006928 <__pow5mult+0x58>
 c006910:	00003406 	br	c0069e4 <__pow5mult+0x114>
 c006914:	8021d07a 	srai	r16,r16,1
 c006918:	80001526 	beq	r16,zero,c006970 <__pow5mult+0xa0>
 c00691c:	88800017 	ldw	r2,0(r17)
 c006920:	10001c26 	beq	r2,zero,c006994 <__pow5mult+0xc4>
 c006924:	1023883a 	mov	r17,r2
 c006928:	8080004c 	andi	r2,r16,1
 c00692c:	103ff926 	beq	r2,zero,c006914 <__alt_data_end+0xfc006914>
 c006930:	880d883a 	mov	r6,r17
 c006934:	900b883a 	mov	r5,r18
 c006938:	9809883a 	mov	r4,r19
 c00693c:	c0066440 	call	c006644 <__multiply>
 c006940:	90001b26 	beq	r18,zero,c0069b0 <__pow5mult+0xe0>
 c006944:	91000117 	ldw	r4,4(r18)
 c006948:	98c01317 	ldw	r3,76(r19)
 c00694c:	8021d07a 	srai	r16,r16,1
 c006950:	2109883a 	add	r4,r4,r4
 c006954:	2109883a 	add	r4,r4,r4
 c006958:	1907883a 	add	r3,r3,r4
 c00695c:	19000017 	ldw	r4,0(r3)
 c006960:	91000015 	stw	r4,0(r18)
 c006964:	1c800015 	stw	r18,0(r3)
 c006968:	1025883a 	mov	r18,r2
 c00696c:	803feb1e 	bne	r16,zero,c00691c <__alt_data_end+0xfc00691c>
 c006970:	9005883a 	mov	r2,r18
 c006974:	dfc00517 	ldw	ra,20(sp)
 c006978:	dd000417 	ldw	r20,16(sp)
 c00697c:	dcc00317 	ldw	r19,12(sp)
 c006980:	dc800217 	ldw	r18,8(sp)
 c006984:	dc400117 	ldw	r17,4(sp)
 c006988:	dc000017 	ldw	r16,0(sp)
 c00698c:	dec00604 	addi	sp,sp,24
 c006990:	f800283a 	ret
 c006994:	880d883a 	mov	r6,r17
 c006998:	880b883a 	mov	r5,r17
 c00699c:	9809883a 	mov	r4,r19
 c0069a0:	c0066440 	call	c006644 <__multiply>
 c0069a4:	88800015 	stw	r2,0(r17)
 c0069a8:	10000015 	stw	zero,0(r2)
 c0069ac:	003fdd06 	br	c006924 <__alt_data_end+0xfc006924>
 c0069b0:	1025883a 	mov	r18,r2
 c0069b4:	003fd706 	br	c006914 <__alt_data_end+0xfc006914>
 c0069b8:	10bfffc4 	addi	r2,r2,-1
 c0069bc:	1085883a 	add	r2,r2,r2
 c0069c0:	00c30074 	movhi	r3,3073
 c0069c4:	18c0ad04 	addi	r3,r3,692
 c0069c8:	1085883a 	add	r2,r2,r2
 c0069cc:	1885883a 	add	r2,r3,r2
 c0069d0:	11800017 	ldw	r6,0(r2)
 c0069d4:	000f883a 	mov	r7,zero
 c0069d8:	c0062a40 	call	c0062a4 <__multadd>
 c0069dc:	1025883a 	mov	r18,r2
 c0069e0:	003fc706 	br	c006900 <__alt_data_end+0xfc006900>
 c0069e4:	05000044 	movi	r20,1
 c0069e8:	a00b883a 	mov	r5,r20
 c0069ec:	9809883a 	mov	r4,r19
 c0069f0:	c0061d40 	call	c0061d4 <_Balloc>
 c0069f4:	1023883a 	mov	r17,r2
 c0069f8:	00809c44 	movi	r2,625
 c0069fc:	88800515 	stw	r2,20(r17)
 c006a00:	8d000415 	stw	r20,16(r17)
 c006a04:	9c401215 	stw	r17,72(r19)
 c006a08:	88000015 	stw	zero,0(r17)
 c006a0c:	003fc606 	br	c006928 <__alt_data_end+0xfc006928>

0c006a10 <__lshift>:
 c006a10:	defff904 	addi	sp,sp,-28
 c006a14:	dd400515 	stw	r21,20(sp)
 c006a18:	dcc00315 	stw	r19,12(sp)
 c006a1c:	302bd17a 	srai	r21,r6,5
 c006a20:	2cc00417 	ldw	r19,16(r5)
 c006a24:	28800217 	ldw	r2,8(r5)
 c006a28:	dd000415 	stw	r20,16(sp)
 c006a2c:	ace7883a 	add	r19,r21,r19
 c006a30:	dc800215 	stw	r18,8(sp)
 c006a34:	dc400115 	stw	r17,4(sp)
 c006a38:	dc000015 	stw	r16,0(sp)
 c006a3c:	dfc00615 	stw	ra,24(sp)
 c006a40:	9c000044 	addi	r16,r19,1
 c006a44:	2823883a 	mov	r17,r5
 c006a48:	3029883a 	mov	r20,r6
 c006a4c:	2025883a 	mov	r18,r4
 c006a50:	29400117 	ldw	r5,4(r5)
 c006a54:	1400030e 	bge	r2,r16,c006a64 <__lshift+0x54>
 c006a58:	1085883a 	add	r2,r2,r2
 c006a5c:	29400044 	addi	r5,r5,1
 c006a60:	143ffd16 	blt	r2,r16,c006a58 <__alt_data_end+0xfc006a58>
 c006a64:	9009883a 	mov	r4,r18
 c006a68:	c0061d40 	call	c0061d4 <_Balloc>
 c006a6c:	10c00504 	addi	r3,r2,20
 c006a70:	0540070e 	bge	zero,r21,c006a90 <__lshift+0x80>
 c006a74:	ad6b883a 	add	r21,r21,r21
 c006a78:	ad6b883a 	add	r21,r21,r21
 c006a7c:	1809883a 	mov	r4,r3
 c006a80:	1d47883a 	add	r3,r3,r21
 c006a84:	20000015 	stw	zero,0(r4)
 c006a88:	21000104 	addi	r4,r4,4
 c006a8c:	193ffd1e 	bne	r3,r4,c006a84 <__alt_data_end+0xfc006a84>
 c006a90:	8a000417 	ldw	r8,16(r17)
 c006a94:	89000504 	addi	r4,r17,20
 c006a98:	a18007cc 	andi	r6,r20,31
 c006a9c:	4211883a 	add	r8,r8,r8
 c006aa0:	4211883a 	add	r8,r8,r8
 c006aa4:	2211883a 	add	r8,r4,r8
 c006aa8:	30002326 	beq	r6,zero,c006b38 <__lshift+0x128>
 c006aac:	02400804 	movi	r9,32
 c006ab0:	4993c83a 	sub	r9,r9,r6
 c006ab4:	000b883a 	mov	r5,zero
 c006ab8:	21c00017 	ldw	r7,0(r4)
 c006abc:	1815883a 	mov	r10,r3
 c006ac0:	18c00104 	addi	r3,r3,4
 c006ac4:	398e983a 	sll	r7,r7,r6
 c006ac8:	21000104 	addi	r4,r4,4
 c006acc:	394ab03a 	or	r5,r7,r5
 c006ad0:	197fff15 	stw	r5,-4(r3)
 c006ad4:	217fff17 	ldw	r5,-4(r4)
 c006ad8:	2a4ad83a 	srl	r5,r5,r9
 c006adc:	223ff636 	bltu	r4,r8,c006ab8 <__alt_data_end+0xfc006ab8>
 c006ae0:	51400115 	stw	r5,4(r10)
 c006ae4:	28001a1e 	bne	r5,zero,c006b50 <__lshift+0x140>
 c006ae8:	843fffc4 	addi	r16,r16,-1
 c006aec:	14000415 	stw	r16,16(r2)
 c006af0:	88000826 	beq	r17,zero,c006b14 <__lshift+0x104>
 c006af4:	89000117 	ldw	r4,4(r17)
 c006af8:	90c01317 	ldw	r3,76(r18)
 c006afc:	2109883a 	add	r4,r4,r4
 c006b00:	2109883a 	add	r4,r4,r4
 c006b04:	1907883a 	add	r3,r3,r4
 c006b08:	19000017 	ldw	r4,0(r3)
 c006b0c:	89000015 	stw	r4,0(r17)
 c006b10:	1c400015 	stw	r17,0(r3)
 c006b14:	dfc00617 	ldw	ra,24(sp)
 c006b18:	dd400517 	ldw	r21,20(sp)
 c006b1c:	dd000417 	ldw	r20,16(sp)
 c006b20:	dcc00317 	ldw	r19,12(sp)
 c006b24:	dc800217 	ldw	r18,8(sp)
 c006b28:	dc400117 	ldw	r17,4(sp)
 c006b2c:	dc000017 	ldw	r16,0(sp)
 c006b30:	dec00704 	addi	sp,sp,28
 c006b34:	f800283a 	ret
 c006b38:	21400017 	ldw	r5,0(r4)
 c006b3c:	18c00104 	addi	r3,r3,4
 c006b40:	21000104 	addi	r4,r4,4
 c006b44:	197fff15 	stw	r5,-4(r3)
 c006b48:	223ffb36 	bltu	r4,r8,c006b38 <__alt_data_end+0xfc006b38>
 c006b4c:	003fe606 	br	c006ae8 <__alt_data_end+0xfc006ae8>
 c006b50:	9c000084 	addi	r16,r19,2
 c006b54:	003fe406 	br	c006ae8 <__alt_data_end+0xfc006ae8>

0c006b58 <__mcmp>:
 c006b58:	20800417 	ldw	r2,16(r4)
 c006b5c:	28c00417 	ldw	r3,16(r5)
 c006b60:	10c5c83a 	sub	r2,r2,r3
 c006b64:	1000111e 	bne	r2,zero,c006bac <__mcmp+0x54>
 c006b68:	18c7883a 	add	r3,r3,r3
 c006b6c:	18c7883a 	add	r3,r3,r3
 c006b70:	21000504 	addi	r4,r4,20
 c006b74:	29400504 	addi	r5,r5,20
 c006b78:	20c5883a 	add	r2,r4,r3
 c006b7c:	28cb883a 	add	r5,r5,r3
 c006b80:	00000106 	br	c006b88 <__mcmp+0x30>
 c006b84:	20800a2e 	bgeu	r4,r2,c006bb0 <__mcmp+0x58>
 c006b88:	10bfff04 	addi	r2,r2,-4
 c006b8c:	297fff04 	addi	r5,r5,-4
 c006b90:	11800017 	ldw	r6,0(r2)
 c006b94:	28c00017 	ldw	r3,0(r5)
 c006b98:	30fffa26 	beq	r6,r3,c006b84 <__alt_data_end+0xfc006b84>
 c006b9c:	30c00236 	bltu	r6,r3,c006ba8 <__mcmp+0x50>
 c006ba0:	00800044 	movi	r2,1
 c006ba4:	f800283a 	ret
 c006ba8:	00bfffc4 	movi	r2,-1
 c006bac:	f800283a 	ret
 c006bb0:	0005883a 	mov	r2,zero
 c006bb4:	f800283a 	ret

0c006bb8 <__mdiff>:
 c006bb8:	28c00417 	ldw	r3,16(r5)
 c006bbc:	30800417 	ldw	r2,16(r6)
 c006bc0:	defffa04 	addi	sp,sp,-24
 c006bc4:	dcc00315 	stw	r19,12(sp)
 c006bc8:	dc800215 	stw	r18,8(sp)
 c006bcc:	dfc00515 	stw	ra,20(sp)
 c006bd0:	dd000415 	stw	r20,16(sp)
 c006bd4:	dc400115 	stw	r17,4(sp)
 c006bd8:	dc000015 	stw	r16,0(sp)
 c006bdc:	1887c83a 	sub	r3,r3,r2
 c006be0:	2825883a 	mov	r18,r5
 c006be4:	3027883a 	mov	r19,r6
 c006be8:	1800141e 	bne	r3,zero,c006c3c <__mdiff+0x84>
 c006bec:	1085883a 	add	r2,r2,r2
 c006bf0:	1085883a 	add	r2,r2,r2
 c006bf4:	2a000504 	addi	r8,r5,20
 c006bf8:	34000504 	addi	r16,r6,20
 c006bfc:	4087883a 	add	r3,r8,r2
 c006c00:	8085883a 	add	r2,r16,r2
 c006c04:	00000106 	br	c006c0c <__mdiff+0x54>
 c006c08:	40c0592e 	bgeu	r8,r3,c006d70 <__mdiff+0x1b8>
 c006c0c:	18ffff04 	addi	r3,r3,-4
 c006c10:	10bfff04 	addi	r2,r2,-4
 c006c14:	19c00017 	ldw	r7,0(r3)
 c006c18:	11400017 	ldw	r5,0(r2)
 c006c1c:	397ffa26 	beq	r7,r5,c006c08 <__alt_data_end+0xfc006c08>
 c006c20:	3940592e 	bgeu	r7,r5,c006d88 <__mdiff+0x1d0>
 c006c24:	9005883a 	mov	r2,r18
 c006c28:	4023883a 	mov	r17,r8
 c006c2c:	9825883a 	mov	r18,r19
 c006c30:	05000044 	movi	r20,1
 c006c34:	1027883a 	mov	r19,r2
 c006c38:	00000406 	br	c006c4c <__mdiff+0x94>
 c006c3c:	18005616 	blt	r3,zero,c006d98 <__mdiff+0x1e0>
 c006c40:	34400504 	addi	r17,r6,20
 c006c44:	2c000504 	addi	r16,r5,20
 c006c48:	0029883a 	mov	r20,zero
 c006c4c:	91400117 	ldw	r5,4(r18)
 c006c50:	c0061d40 	call	c0061d4 <_Balloc>
 c006c54:	92400417 	ldw	r9,16(r18)
 c006c58:	9b000417 	ldw	r12,16(r19)
 c006c5c:	12c00504 	addi	r11,r2,20
 c006c60:	4a51883a 	add	r8,r9,r9
 c006c64:	6319883a 	add	r12,r12,r12
 c006c68:	4211883a 	add	r8,r8,r8
 c006c6c:	6319883a 	add	r12,r12,r12
 c006c70:	15000315 	stw	r20,12(r2)
 c006c74:	8211883a 	add	r8,r16,r8
 c006c78:	8b19883a 	add	r12,r17,r12
 c006c7c:	0007883a 	mov	r3,zero
 c006c80:	81400017 	ldw	r5,0(r16)
 c006c84:	89c00017 	ldw	r7,0(r17)
 c006c88:	59800104 	addi	r6,r11,4
 c006c8c:	293fffcc 	andi	r4,r5,65535
 c006c90:	20c7883a 	add	r3,r4,r3
 c006c94:	393fffcc 	andi	r4,r7,65535
 c006c98:	1909c83a 	sub	r4,r3,r4
 c006c9c:	280ad43a 	srli	r5,r5,16
 c006ca0:	380ed43a 	srli	r7,r7,16
 c006ca4:	2007d43a 	srai	r3,r4,16
 c006ca8:	213fffcc 	andi	r4,r4,65535
 c006cac:	29cbc83a 	sub	r5,r5,r7
 c006cb0:	28c7883a 	add	r3,r5,r3
 c006cb4:	180a943a 	slli	r5,r3,16
 c006cb8:	8c400104 	addi	r17,r17,4
 c006cbc:	84000104 	addi	r16,r16,4
 c006cc0:	2908b03a 	or	r4,r5,r4
 c006cc4:	59000015 	stw	r4,0(r11)
 c006cc8:	1807d43a 	srai	r3,r3,16
 c006ccc:	3015883a 	mov	r10,r6
 c006cd0:	3017883a 	mov	r11,r6
 c006cd4:	8b3fea36 	bltu	r17,r12,c006c80 <__alt_data_end+0xfc006c80>
 c006cd8:	8200162e 	bgeu	r16,r8,c006d34 <__mdiff+0x17c>
 c006cdc:	8017883a 	mov	r11,r16
 c006ce0:	59400017 	ldw	r5,0(r11)
 c006ce4:	31800104 	addi	r6,r6,4
 c006ce8:	5ac00104 	addi	r11,r11,4
 c006cec:	293fffcc 	andi	r4,r5,65535
 c006cf0:	20c7883a 	add	r3,r4,r3
 c006cf4:	280ed43a 	srli	r7,r5,16
 c006cf8:	180bd43a 	srai	r5,r3,16
 c006cfc:	193fffcc 	andi	r4,r3,65535
 c006d00:	3947883a 	add	r3,r7,r5
 c006d04:	180a943a 	slli	r5,r3,16
 c006d08:	1807d43a 	srai	r3,r3,16
 c006d0c:	2908b03a 	or	r4,r5,r4
 c006d10:	313fff15 	stw	r4,-4(r6)
 c006d14:	5a3ff236 	bltu	r11,r8,c006ce0 <__alt_data_end+0xfc006ce0>
 c006d18:	0406303a 	nor	r3,zero,r16
 c006d1c:	1a07883a 	add	r3,r3,r8
 c006d20:	1806d0ba 	srli	r3,r3,2
 c006d24:	18c00044 	addi	r3,r3,1
 c006d28:	18c7883a 	add	r3,r3,r3
 c006d2c:	18c7883a 	add	r3,r3,r3
 c006d30:	50d5883a 	add	r10,r10,r3
 c006d34:	50ffff04 	addi	r3,r10,-4
 c006d38:	2000041e 	bne	r4,zero,c006d4c <__mdiff+0x194>
 c006d3c:	18ffff04 	addi	r3,r3,-4
 c006d40:	19000017 	ldw	r4,0(r3)
 c006d44:	4a7fffc4 	addi	r9,r9,-1
 c006d48:	203ffc26 	beq	r4,zero,c006d3c <__alt_data_end+0xfc006d3c>
 c006d4c:	12400415 	stw	r9,16(r2)
 c006d50:	dfc00517 	ldw	ra,20(sp)
 c006d54:	dd000417 	ldw	r20,16(sp)
 c006d58:	dcc00317 	ldw	r19,12(sp)
 c006d5c:	dc800217 	ldw	r18,8(sp)
 c006d60:	dc400117 	ldw	r17,4(sp)
 c006d64:	dc000017 	ldw	r16,0(sp)
 c006d68:	dec00604 	addi	sp,sp,24
 c006d6c:	f800283a 	ret
 c006d70:	000b883a 	mov	r5,zero
 c006d74:	c0061d40 	call	c0061d4 <_Balloc>
 c006d78:	00c00044 	movi	r3,1
 c006d7c:	10c00415 	stw	r3,16(r2)
 c006d80:	10000515 	stw	zero,20(r2)
 c006d84:	003ff206 	br	c006d50 <__alt_data_end+0xfc006d50>
 c006d88:	8023883a 	mov	r17,r16
 c006d8c:	0029883a 	mov	r20,zero
 c006d90:	4021883a 	mov	r16,r8
 c006d94:	003fad06 	br	c006c4c <__alt_data_end+0xfc006c4c>
 c006d98:	9005883a 	mov	r2,r18
 c006d9c:	94400504 	addi	r17,r18,20
 c006da0:	9c000504 	addi	r16,r19,20
 c006da4:	9825883a 	mov	r18,r19
 c006da8:	05000044 	movi	r20,1
 c006dac:	1027883a 	mov	r19,r2
 c006db0:	003fa606 	br	c006c4c <__alt_data_end+0xfc006c4c>

0c006db4 <__ulp>:
 c006db4:	295ffc2c 	andhi	r5,r5,32752
 c006db8:	00bf3034 	movhi	r2,64704
 c006dbc:	2887883a 	add	r3,r5,r2
 c006dc0:	00c0020e 	bge	zero,r3,c006dcc <__ulp+0x18>
 c006dc4:	0005883a 	mov	r2,zero
 c006dc8:	f800283a 	ret
 c006dcc:	00c7c83a 	sub	r3,zero,r3
 c006dd0:	1807d53a 	srai	r3,r3,20
 c006dd4:	008004c4 	movi	r2,19
 c006dd8:	10c00b0e 	bge	r2,r3,c006e08 <__ulp+0x54>
 c006ddc:	18bffb04 	addi	r2,r3,-20
 c006de0:	01000784 	movi	r4,30
 c006de4:	0007883a 	mov	r3,zero
 c006de8:	20800516 	blt	r4,r2,c006e00 <__ulp+0x4c>
 c006dec:	010007c4 	movi	r4,31
 c006df0:	2089c83a 	sub	r4,r4,r2
 c006df4:	00800044 	movi	r2,1
 c006df8:	1104983a 	sll	r2,r2,r4
 c006dfc:	f800283a 	ret
 c006e00:	00800044 	movi	r2,1
 c006e04:	f800283a 	ret
 c006e08:	01400234 	movhi	r5,8
 c006e0c:	28c7d83a 	sra	r3,r5,r3
 c006e10:	0005883a 	mov	r2,zero
 c006e14:	f800283a 	ret

0c006e18 <__b2d>:
 c006e18:	defffa04 	addi	sp,sp,-24
 c006e1c:	dc000015 	stw	r16,0(sp)
 c006e20:	24000417 	ldw	r16,16(r4)
 c006e24:	dc400115 	stw	r17,4(sp)
 c006e28:	24400504 	addi	r17,r4,20
 c006e2c:	8421883a 	add	r16,r16,r16
 c006e30:	8421883a 	add	r16,r16,r16
 c006e34:	8c21883a 	add	r16,r17,r16
 c006e38:	dc800215 	stw	r18,8(sp)
 c006e3c:	84bfff17 	ldw	r18,-4(r16)
 c006e40:	dd000415 	stw	r20,16(sp)
 c006e44:	dcc00315 	stw	r19,12(sp)
 c006e48:	9009883a 	mov	r4,r18
 c006e4c:	2829883a 	mov	r20,r5
 c006e50:	dfc00515 	stw	ra,20(sp)
 c006e54:	c0064f00 	call	c0064f0 <__hi0bits>
 c006e58:	00c00804 	movi	r3,32
 c006e5c:	1889c83a 	sub	r4,r3,r2
 c006e60:	a1000015 	stw	r4,0(r20)
 c006e64:	01000284 	movi	r4,10
 c006e68:	84ffff04 	addi	r19,r16,-4
 c006e6c:	20801216 	blt	r4,r2,c006eb8 <__b2d+0xa0>
 c006e70:	018002c4 	movi	r6,11
 c006e74:	308dc83a 	sub	r6,r6,r2
 c006e78:	9186d83a 	srl	r3,r18,r6
 c006e7c:	18cffc34 	orhi	r3,r3,16368
 c006e80:	8cc0212e 	bgeu	r17,r19,c006f08 <__b2d+0xf0>
 c006e84:	813ffe17 	ldw	r4,-8(r16)
 c006e88:	218cd83a 	srl	r6,r4,r6
 c006e8c:	10800544 	addi	r2,r2,21
 c006e90:	9084983a 	sll	r2,r18,r2
 c006e94:	1184b03a 	or	r2,r2,r6
 c006e98:	dfc00517 	ldw	ra,20(sp)
 c006e9c:	dd000417 	ldw	r20,16(sp)
 c006ea0:	dcc00317 	ldw	r19,12(sp)
 c006ea4:	dc800217 	ldw	r18,8(sp)
 c006ea8:	dc400117 	ldw	r17,4(sp)
 c006eac:	dc000017 	ldw	r16,0(sp)
 c006eb0:	dec00604 	addi	sp,sp,24
 c006eb4:	f800283a 	ret
 c006eb8:	8cc00f2e 	bgeu	r17,r19,c006ef8 <__b2d+0xe0>
 c006ebc:	117ffd44 	addi	r5,r2,-11
 c006ec0:	80bffe17 	ldw	r2,-8(r16)
 c006ec4:	28000e26 	beq	r5,zero,c006f00 <__b2d+0xe8>
 c006ec8:	1949c83a 	sub	r4,r3,r5
 c006ecc:	9164983a 	sll	r18,r18,r5
 c006ed0:	1106d83a 	srl	r3,r2,r4
 c006ed4:	81bffe04 	addi	r6,r16,-8
 c006ed8:	948ffc34 	orhi	r18,r18,16368
 c006edc:	90c6b03a 	or	r3,r18,r3
 c006ee0:	89800e2e 	bgeu	r17,r6,c006f1c <__b2d+0x104>
 c006ee4:	81bffd17 	ldw	r6,-12(r16)
 c006ee8:	1144983a 	sll	r2,r2,r5
 c006eec:	310ad83a 	srl	r5,r6,r4
 c006ef0:	2884b03a 	or	r2,r5,r2
 c006ef4:	003fe806 	br	c006e98 <__alt_data_end+0xfc006e98>
 c006ef8:	10bffd44 	addi	r2,r2,-11
 c006efc:	1000041e 	bne	r2,zero,c006f10 <__b2d+0xf8>
 c006f00:	90cffc34 	orhi	r3,r18,16368
 c006f04:	003fe406 	br	c006e98 <__alt_data_end+0xfc006e98>
 c006f08:	000d883a 	mov	r6,zero
 c006f0c:	003fdf06 	br	c006e8c <__alt_data_end+0xfc006e8c>
 c006f10:	90a4983a 	sll	r18,r18,r2
 c006f14:	0005883a 	mov	r2,zero
 c006f18:	003ff906 	br	c006f00 <__alt_data_end+0xfc006f00>
 c006f1c:	1144983a 	sll	r2,r2,r5
 c006f20:	003fdd06 	br	c006e98 <__alt_data_end+0xfc006e98>

0c006f24 <__d2b>:
 c006f24:	defff804 	addi	sp,sp,-32
 c006f28:	dc000215 	stw	r16,8(sp)
 c006f2c:	3021883a 	mov	r16,r6
 c006f30:	dc400315 	stw	r17,12(sp)
 c006f34:	8022907a 	slli	r17,r16,1
 c006f38:	dd000615 	stw	r20,24(sp)
 c006f3c:	2829883a 	mov	r20,r5
 c006f40:	01400044 	movi	r5,1
 c006f44:	dcc00515 	stw	r19,20(sp)
 c006f48:	dc800415 	stw	r18,16(sp)
 c006f4c:	dfc00715 	stw	ra,28(sp)
 c006f50:	3825883a 	mov	r18,r7
 c006f54:	8822d57a 	srli	r17,r17,21
 c006f58:	c0061d40 	call	c0061d4 <_Balloc>
 c006f5c:	1027883a 	mov	r19,r2
 c006f60:	00800434 	movhi	r2,16
 c006f64:	10bfffc4 	addi	r2,r2,-1
 c006f68:	808c703a 	and	r6,r16,r2
 c006f6c:	88000126 	beq	r17,zero,c006f74 <__d2b+0x50>
 c006f70:	31800434 	orhi	r6,r6,16
 c006f74:	d9800015 	stw	r6,0(sp)
 c006f78:	a0002426 	beq	r20,zero,c00700c <__d2b+0xe8>
 c006f7c:	d9000104 	addi	r4,sp,4
 c006f80:	dd000115 	stw	r20,4(sp)
 c006f84:	c0065580 	call	c006558 <__lo0bits>
 c006f88:	d8c00017 	ldw	r3,0(sp)
 c006f8c:	10002f1e 	bne	r2,zero,c00704c <__d2b+0x128>
 c006f90:	d9000117 	ldw	r4,4(sp)
 c006f94:	99000515 	stw	r4,20(r19)
 c006f98:	1821003a 	cmpeq	r16,r3,zero
 c006f9c:	01000084 	movi	r4,2
 c006fa0:	2421c83a 	sub	r16,r4,r16
 c006fa4:	98c00615 	stw	r3,24(r19)
 c006fa8:	9c000415 	stw	r16,16(r19)
 c006fac:	88001f1e 	bne	r17,zero,c00702c <__d2b+0x108>
 c006fb0:	10bef384 	addi	r2,r2,-1074
 c006fb4:	90800015 	stw	r2,0(r18)
 c006fb8:	00900034 	movhi	r2,16384
 c006fbc:	10bfffc4 	addi	r2,r2,-1
 c006fc0:	8085883a 	add	r2,r16,r2
 c006fc4:	1085883a 	add	r2,r2,r2
 c006fc8:	1085883a 	add	r2,r2,r2
 c006fcc:	9885883a 	add	r2,r19,r2
 c006fd0:	11000517 	ldw	r4,20(r2)
 c006fd4:	8020917a 	slli	r16,r16,5
 c006fd8:	c0064f00 	call	c0064f0 <__hi0bits>
 c006fdc:	d8c00817 	ldw	r3,32(sp)
 c006fe0:	8085c83a 	sub	r2,r16,r2
 c006fe4:	18800015 	stw	r2,0(r3)
 c006fe8:	9805883a 	mov	r2,r19
 c006fec:	dfc00717 	ldw	ra,28(sp)
 c006ff0:	dd000617 	ldw	r20,24(sp)
 c006ff4:	dcc00517 	ldw	r19,20(sp)
 c006ff8:	dc800417 	ldw	r18,16(sp)
 c006ffc:	dc400317 	ldw	r17,12(sp)
 c007000:	dc000217 	ldw	r16,8(sp)
 c007004:	dec00804 	addi	sp,sp,32
 c007008:	f800283a 	ret
 c00700c:	d809883a 	mov	r4,sp
 c007010:	c0065580 	call	c006558 <__lo0bits>
 c007014:	d8c00017 	ldw	r3,0(sp)
 c007018:	04000044 	movi	r16,1
 c00701c:	9c000415 	stw	r16,16(r19)
 c007020:	98c00515 	stw	r3,20(r19)
 c007024:	10800804 	addi	r2,r2,32
 c007028:	883fe126 	beq	r17,zero,c006fb0 <__alt_data_end+0xfc006fb0>
 c00702c:	00c00d44 	movi	r3,53
 c007030:	8c7ef344 	addi	r17,r17,-1075
 c007034:	88a3883a 	add	r17,r17,r2
 c007038:	1885c83a 	sub	r2,r3,r2
 c00703c:	d8c00817 	ldw	r3,32(sp)
 c007040:	94400015 	stw	r17,0(r18)
 c007044:	18800015 	stw	r2,0(r3)
 c007048:	003fe706 	br	c006fe8 <__alt_data_end+0xfc006fe8>
 c00704c:	01000804 	movi	r4,32
 c007050:	2089c83a 	sub	r4,r4,r2
 c007054:	1908983a 	sll	r4,r3,r4
 c007058:	d9400117 	ldw	r5,4(sp)
 c00705c:	1886d83a 	srl	r3,r3,r2
 c007060:	2148b03a 	or	r4,r4,r5
 c007064:	99000515 	stw	r4,20(r19)
 c007068:	d8c00015 	stw	r3,0(sp)
 c00706c:	003fca06 	br	c006f98 <__alt_data_end+0xfc006f98>

0c007070 <__ratio>:
 c007070:	defff904 	addi	sp,sp,-28
 c007074:	dc400315 	stw	r17,12(sp)
 c007078:	2823883a 	mov	r17,r5
 c00707c:	d9400104 	addi	r5,sp,4
 c007080:	dfc00615 	stw	ra,24(sp)
 c007084:	dcc00515 	stw	r19,20(sp)
 c007088:	dc800415 	stw	r18,16(sp)
 c00708c:	2027883a 	mov	r19,r4
 c007090:	dc000215 	stw	r16,8(sp)
 c007094:	c006e180 	call	c006e18 <__b2d>
 c007098:	d80b883a 	mov	r5,sp
 c00709c:	8809883a 	mov	r4,r17
 c0070a0:	1025883a 	mov	r18,r2
 c0070a4:	1821883a 	mov	r16,r3
 c0070a8:	c006e180 	call	c006e18 <__b2d>
 c0070ac:	8a000417 	ldw	r8,16(r17)
 c0070b0:	99000417 	ldw	r4,16(r19)
 c0070b4:	d9400117 	ldw	r5,4(sp)
 c0070b8:	2209c83a 	sub	r4,r4,r8
 c0070bc:	2010917a 	slli	r8,r4,5
 c0070c0:	d9000017 	ldw	r4,0(sp)
 c0070c4:	2909c83a 	sub	r4,r5,r4
 c0070c8:	4109883a 	add	r4,r8,r4
 c0070cc:	01000e0e 	bge	zero,r4,c007108 <__ratio+0x98>
 c0070d0:	2008953a 	slli	r4,r4,20
 c0070d4:	2421883a 	add	r16,r4,r16
 c0070d8:	100d883a 	mov	r6,r2
 c0070dc:	180f883a 	mov	r7,r3
 c0070e0:	9009883a 	mov	r4,r18
 c0070e4:	800b883a 	mov	r5,r16
 c0070e8:	c00b7f00 	call	c00b7f0 <__divdf3>
 c0070ec:	dfc00617 	ldw	ra,24(sp)
 c0070f0:	dcc00517 	ldw	r19,20(sp)
 c0070f4:	dc800417 	ldw	r18,16(sp)
 c0070f8:	dc400317 	ldw	r17,12(sp)
 c0070fc:	dc000217 	ldw	r16,8(sp)
 c007100:	dec00704 	addi	sp,sp,28
 c007104:	f800283a 	ret
 c007108:	2008953a 	slli	r4,r4,20
 c00710c:	1907c83a 	sub	r3,r3,r4
 c007110:	003ff106 	br	c0070d8 <__alt_data_end+0xfc0070d8>

0c007114 <_mprec_log10>:
 c007114:	defffe04 	addi	sp,sp,-8
 c007118:	dc000015 	stw	r16,0(sp)
 c00711c:	dfc00115 	stw	ra,4(sp)
 c007120:	008005c4 	movi	r2,23
 c007124:	2021883a 	mov	r16,r4
 c007128:	11000d0e 	bge	r2,r4,c007160 <_mprec_log10+0x4c>
 c00712c:	0005883a 	mov	r2,zero
 c007130:	00cffc34 	movhi	r3,16368
 c007134:	843fffc4 	addi	r16,r16,-1
 c007138:	000d883a 	mov	r6,zero
 c00713c:	01d00934 	movhi	r7,16420
 c007140:	1009883a 	mov	r4,r2
 c007144:	180b883a 	mov	r5,r3
 c007148:	c00c4180 	call	c00c418 <__muldf3>
 c00714c:	803ff91e 	bne	r16,zero,c007134 <__alt_data_end+0xfc007134>
 c007150:	dfc00117 	ldw	ra,4(sp)
 c007154:	dc000017 	ldw	r16,0(sp)
 c007158:	dec00204 	addi	sp,sp,8
 c00715c:	f800283a 	ret
 c007160:	202090fa 	slli	r16,r4,3
 c007164:	00830074 	movhi	r2,3073
 c007168:	1080c404 	addi	r2,r2,784
 c00716c:	1421883a 	add	r16,r2,r16
 c007170:	80800017 	ldw	r2,0(r16)
 c007174:	80c00117 	ldw	r3,4(r16)
 c007178:	dfc00117 	ldw	ra,4(sp)
 c00717c:	dc000017 	ldw	r16,0(sp)
 c007180:	dec00204 	addi	sp,sp,8
 c007184:	f800283a 	ret

0c007188 <__copybits>:
 c007188:	297fffc4 	addi	r5,r5,-1
 c00718c:	280fd17a 	srai	r7,r5,5
 c007190:	30c00417 	ldw	r3,16(r6)
 c007194:	30800504 	addi	r2,r6,20
 c007198:	39c00044 	addi	r7,r7,1
 c00719c:	18c7883a 	add	r3,r3,r3
 c0071a0:	39cf883a 	add	r7,r7,r7
 c0071a4:	18c7883a 	add	r3,r3,r3
 c0071a8:	39cf883a 	add	r7,r7,r7
 c0071ac:	10c7883a 	add	r3,r2,r3
 c0071b0:	21cf883a 	add	r7,r4,r7
 c0071b4:	10c00d2e 	bgeu	r2,r3,c0071ec <__copybits+0x64>
 c0071b8:	200b883a 	mov	r5,r4
 c0071bc:	12000017 	ldw	r8,0(r2)
 c0071c0:	29400104 	addi	r5,r5,4
 c0071c4:	10800104 	addi	r2,r2,4
 c0071c8:	2a3fff15 	stw	r8,-4(r5)
 c0071cc:	10fffb36 	bltu	r2,r3,c0071bc <__alt_data_end+0xfc0071bc>
 c0071d0:	1985c83a 	sub	r2,r3,r6
 c0071d4:	10bffac4 	addi	r2,r2,-21
 c0071d8:	1004d0ba 	srli	r2,r2,2
 c0071dc:	10800044 	addi	r2,r2,1
 c0071e0:	1085883a 	add	r2,r2,r2
 c0071e4:	1085883a 	add	r2,r2,r2
 c0071e8:	2089883a 	add	r4,r4,r2
 c0071ec:	21c0032e 	bgeu	r4,r7,c0071fc <__copybits+0x74>
 c0071f0:	20000015 	stw	zero,0(r4)
 c0071f4:	21000104 	addi	r4,r4,4
 c0071f8:	21fffd36 	bltu	r4,r7,c0071f0 <__alt_data_end+0xfc0071f0>
 c0071fc:	f800283a 	ret

0c007200 <__any_on>:
 c007200:	20c00417 	ldw	r3,16(r4)
 c007204:	2805d17a 	srai	r2,r5,5
 c007208:	21000504 	addi	r4,r4,20
 c00720c:	18800d0e 	bge	r3,r2,c007244 <__any_on+0x44>
 c007210:	18c7883a 	add	r3,r3,r3
 c007214:	18c7883a 	add	r3,r3,r3
 c007218:	20c7883a 	add	r3,r4,r3
 c00721c:	20c0192e 	bgeu	r4,r3,c007284 <__any_on+0x84>
 c007220:	18bfff17 	ldw	r2,-4(r3)
 c007224:	18ffff04 	addi	r3,r3,-4
 c007228:	1000041e 	bne	r2,zero,c00723c <__any_on+0x3c>
 c00722c:	20c0142e 	bgeu	r4,r3,c007280 <__any_on+0x80>
 c007230:	18ffff04 	addi	r3,r3,-4
 c007234:	19400017 	ldw	r5,0(r3)
 c007238:	283ffc26 	beq	r5,zero,c00722c <__alt_data_end+0xfc00722c>
 c00723c:	00800044 	movi	r2,1
 c007240:	f800283a 	ret
 c007244:	10c00a0e 	bge	r2,r3,c007270 <__any_on+0x70>
 c007248:	1085883a 	add	r2,r2,r2
 c00724c:	1085883a 	add	r2,r2,r2
 c007250:	294007cc 	andi	r5,r5,31
 c007254:	2087883a 	add	r3,r4,r2
 c007258:	283ff026 	beq	r5,zero,c00721c <__alt_data_end+0xfc00721c>
 c00725c:	19800017 	ldw	r6,0(r3)
 c007260:	3144d83a 	srl	r2,r6,r5
 c007264:	114a983a 	sll	r5,r2,r5
 c007268:	317ff41e 	bne	r6,r5,c00723c <__alt_data_end+0xfc00723c>
 c00726c:	003feb06 	br	c00721c <__alt_data_end+0xfc00721c>
 c007270:	1085883a 	add	r2,r2,r2
 c007274:	1085883a 	add	r2,r2,r2
 c007278:	2087883a 	add	r3,r4,r2
 c00727c:	003fe706 	br	c00721c <__alt_data_end+0xfc00721c>
 c007280:	f800283a 	ret
 c007284:	0005883a 	mov	r2,zero
 c007288:	f800283a 	ret

0c00728c <__fpclassifyd>:
 c00728c:	00a00034 	movhi	r2,32768
 c007290:	10bfffc4 	addi	r2,r2,-1
 c007294:	2884703a 	and	r2,r5,r2
 c007298:	10000726 	beq	r2,zero,c0072b8 <__fpclassifyd+0x2c>
 c00729c:	00fffc34 	movhi	r3,65520
 c0072a0:	019ff834 	movhi	r6,32736
 c0072a4:	28c7883a 	add	r3,r5,r3
 c0072a8:	31bfffc4 	addi	r6,r6,-1
 c0072ac:	30c00536 	bltu	r6,r3,c0072c4 <__fpclassifyd+0x38>
 c0072b0:	00800104 	movi	r2,4
 c0072b4:	f800283a 	ret
 c0072b8:	2000021e 	bne	r4,zero,c0072c4 <__fpclassifyd+0x38>
 c0072bc:	00800084 	movi	r2,2
 c0072c0:	f800283a 	ret
 c0072c4:	00dffc34 	movhi	r3,32752
 c0072c8:	019ff834 	movhi	r6,32736
 c0072cc:	28cb883a 	add	r5,r5,r3
 c0072d0:	31bfffc4 	addi	r6,r6,-1
 c0072d4:	317ff62e 	bgeu	r6,r5,c0072b0 <__alt_data_end+0xfc0072b0>
 c0072d8:	01400434 	movhi	r5,16
 c0072dc:	297fffc4 	addi	r5,r5,-1
 c0072e0:	28800236 	bltu	r5,r2,c0072ec <__fpclassifyd+0x60>
 c0072e4:	008000c4 	movi	r2,3
 c0072e8:	f800283a 	ret
 c0072ec:	10c00226 	beq	r2,r3,c0072f8 <__fpclassifyd+0x6c>
 c0072f0:	0005883a 	mov	r2,zero
 c0072f4:	f800283a 	ret
 c0072f8:	2005003a 	cmpeq	r2,r4,zero
 c0072fc:	f800283a 	ret

0c007300 <_sbrk_r>:
 c007300:	defffd04 	addi	sp,sp,-12
 c007304:	dc000015 	stw	r16,0(sp)
 c007308:	04030074 	movhi	r16,3073
 c00730c:	dc400115 	stw	r17,4(sp)
 c007310:	840ecb04 	addi	r16,r16,15148
 c007314:	2023883a 	mov	r17,r4
 c007318:	2809883a 	mov	r4,r5
 c00731c:	dfc00215 	stw	ra,8(sp)
 c007320:	80000015 	stw	zero,0(r16)
 c007324:	c00df900 	call	c00df90 <sbrk>
 c007328:	00ffffc4 	movi	r3,-1
 c00732c:	10c00526 	beq	r2,r3,c007344 <_sbrk_r+0x44>
 c007330:	dfc00217 	ldw	ra,8(sp)
 c007334:	dc400117 	ldw	r17,4(sp)
 c007338:	dc000017 	ldw	r16,0(sp)
 c00733c:	dec00304 	addi	sp,sp,12
 c007340:	f800283a 	ret
 c007344:	80c00017 	ldw	r3,0(r16)
 c007348:	183ff926 	beq	r3,zero,c007330 <__alt_data_end+0xfc007330>
 c00734c:	88c00015 	stw	r3,0(r17)
 c007350:	003ff706 	br	c007330 <__alt_data_end+0xfc007330>

0c007354 <__sread>:
 c007354:	defffe04 	addi	sp,sp,-8
 c007358:	dc000015 	stw	r16,0(sp)
 c00735c:	2821883a 	mov	r16,r5
 c007360:	2940038f 	ldh	r5,14(r5)
 c007364:	dfc00115 	stw	ra,4(sp)
 c007368:	c0098cc0 	call	c0098cc <_read_r>
 c00736c:	10000716 	blt	r2,zero,c00738c <__sread+0x38>
 c007370:	80c01417 	ldw	r3,80(r16)
 c007374:	1887883a 	add	r3,r3,r2
 c007378:	80c01415 	stw	r3,80(r16)
 c00737c:	dfc00117 	ldw	ra,4(sp)
 c007380:	dc000017 	ldw	r16,0(sp)
 c007384:	dec00204 	addi	sp,sp,8
 c007388:	f800283a 	ret
 c00738c:	80c0030b 	ldhu	r3,12(r16)
 c007390:	18fbffcc 	andi	r3,r3,61439
 c007394:	80c0030d 	sth	r3,12(r16)
 c007398:	dfc00117 	ldw	ra,4(sp)
 c00739c:	dc000017 	ldw	r16,0(sp)
 c0073a0:	dec00204 	addi	sp,sp,8
 c0073a4:	f800283a 	ret

0c0073a8 <__seofread>:
 c0073a8:	0005883a 	mov	r2,zero
 c0073ac:	f800283a 	ret

0c0073b0 <__swrite>:
 c0073b0:	2880030b 	ldhu	r2,12(r5)
 c0073b4:	defffb04 	addi	sp,sp,-20
 c0073b8:	dcc00315 	stw	r19,12(sp)
 c0073bc:	dc800215 	stw	r18,8(sp)
 c0073c0:	dc400115 	stw	r17,4(sp)
 c0073c4:	dc000015 	stw	r16,0(sp)
 c0073c8:	dfc00415 	stw	ra,16(sp)
 c0073cc:	10c0400c 	andi	r3,r2,256
 c0073d0:	2821883a 	mov	r16,r5
 c0073d4:	2023883a 	mov	r17,r4
 c0073d8:	3025883a 	mov	r18,r6
 c0073dc:	3827883a 	mov	r19,r7
 c0073e0:	18000526 	beq	r3,zero,c0073f8 <__swrite+0x48>
 c0073e4:	2940038f 	ldh	r5,14(r5)
 c0073e8:	01c00084 	movi	r7,2
 c0073ec:	000d883a 	mov	r6,zero
 c0073f0:	c0097100 	call	c009710 <_lseek_r>
 c0073f4:	8080030b 	ldhu	r2,12(r16)
 c0073f8:	8140038f 	ldh	r5,14(r16)
 c0073fc:	10bbffcc 	andi	r2,r2,61439
 c007400:	980f883a 	mov	r7,r19
 c007404:	900d883a 	mov	r6,r18
 c007408:	8809883a 	mov	r4,r17
 c00740c:	8080030d 	sth	r2,12(r16)
 c007410:	dfc00417 	ldw	ra,16(sp)
 c007414:	dcc00317 	ldw	r19,12(sp)
 c007418:	dc800217 	ldw	r18,8(sp)
 c00741c:	dc400117 	ldw	r17,4(sp)
 c007420:	dc000017 	ldw	r16,0(sp)
 c007424:	dec00504 	addi	sp,sp,20
 c007428:	c008cfc1 	jmpi	c008cfc <_write_r>

0c00742c <__sseek>:
 c00742c:	defffe04 	addi	sp,sp,-8
 c007430:	dc000015 	stw	r16,0(sp)
 c007434:	2821883a 	mov	r16,r5
 c007438:	2940038f 	ldh	r5,14(r5)
 c00743c:	dfc00115 	stw	ra,4(sp)
 c007440:	c0097100 	call	c009710 <_lseek_r>
 c007444:	00ffffc4 	movi	r3,-1
 c007448:	10c00826 	beq	r2,r3,c00746c <__sseek+0x40>
 c00744c:	80c0030b 	ldhu	r3,12(r16)
 c007450:	80801415 	stw	r2,80(r16)
 c007454:	18c40014 	ori	r3,r3,4096
 c007458:	80c0030d 	sth	r3,12(r16)
 c00745c:	dfc00117 	ldw	ra,4(sp)
 c007460:	dc000017 	ldw	r16,0(sp)
 c007464:	dec00204 	addi	sp,sp,8
 c007468:	f800283a 	ret
 c00746c:	80c0030b 	ldhu	r3,12(r16)
 c007470:	18fbffcc 	andi	r3,r3,61439
 c007474:	80c0030d 	sth	r3,12(r16)
 c007478:	dfc00117 	ldw	ra,4(sp)
 c00747c:	dc000017 	ldw	r16,0(sp)
 c007480:	dec00204 	addi	sp,sp,8
 c007484:	f800283a 	ret

0c007488 <__sclose>:
 c007488:	2940038f 	ldh	r5,14(r5)
 c00748c:	c008d5c1 	jmpi	c008d5c <_close_r>

0c007490 <strcmp>:
 c007490:	2144b03a 	or	r2,r4,r5
 c007494:	108000cc 	andi	r2,r2,3
 c007498:	1000171e 	bne	r2,zero,c0074f8 <strcmp+0x68>
 c00749c:	20800017 	ldw	r2,0(r4)
 c0074a0:	28c00017 	ldw	r3,0(r5)
 c0074a4:	10c0141e 	bne	r2,r3,c0074f8 <strcmp+0x68>
 c0074a8:	027fbff4 	movhi	r9,65279
 c0074ac:	4a7fbfc4 	addi	r9,r9,-257
 c0074b0:	0086303a 	nor	r3,zero,r2
 c0074b4:	02202074 	movhi	r8,32897
 c0074b8:	1245883a 	add	r2,r2,r9
 c0074bc:	42202004 	addi	r8,r8,-32640
 c0074c0:	10c4703a 	and	r2,r2,r3
 c0074c4:	1204703a 	and	r2,r2,r8
 c0074c8:	10000226 	beq	r2,zero,c0074d4 <strcmp+0x44>
 c0074cc:	00002306 	br	c00755c <strcmp+0xcc>
 c0074d0:	1000221e 	bne	r2,zero,c00755c <strcmp+0xcc>
 c0074d4:	21000104 	addi	r4,r4,4
 c0074d8:	20c00017 	ldw	r3,0(r4)
 c0074dc:	29400104 	addi	r5,r5,4
 c0074e0:	29800017 	ldw	r6,0(r5)
 c0074e4:	1a4f883a 	add	r7,r3,r9
 c0074e8:	00c4303a 	nor	r2,zero,r3
 c0074ec:	3884703a 	and	r2,r7,r2
 c0074f0:	1204703a 	and	r2,r2,r8
 c0074f4:	19bff626 	beq	r3,r6,c0074d0 <__alt_data_end+0xfc0074d0>
 c0074f8:	20800003 	ldbu	r2,0(r4)
 c0074fc:	10c03fcc 	andi	r3,r2,255
 c007500:	18c0201c 	xori	r3,r3,128
 c007504:	18ffe004 	addi	r3,r3,-128
 c007508:	18000c26 	beq	r3,zero,c00753c <strcmp+0xac>
 c00750c:	29800007 	ldb	r6,0(r5)
 c007510:	19800326 	beq	r3,r6,c007520 <strcmp+0x90>
 c007514:	00001306 	br	c007564 <strcmp+0xd4>
 c007518:	29800007 	ldb	r6,0(r5)
 c00751c:	11800b1e 	bne	r2,r6,c00754c <strcmp+0xbc>
 c007520:	21000044 	addi	r4,r4,1
 c007524:	20c00003 	ldbu	r3,0(r4)
 c007528:	29400044 	addi	r5,r5,1
 c00752c:	18803fcc 	andi	r2,r3,255
 c007530:	1080201c 	xori	r2,r2,128
 c007534:	10bfe004 	addi	r2,r2,-128
 c007538:	103ff71e 	bne	r2,zero,c007518 <__alt_data_end+0xfc007518>
 c00753c:	0007883a 	mov	r3,zero
 c007540:	28800003 	ldbu	r2,0(r5)
 c007544:	1885c83a 	sub	r2,r3,r2
 c007548:	f800283a 	ret
 c00754c:	28800003 	ldbu	r2,0(r5)
 c007550:	18c03fcc 	andi	r3,r3,255
 c007554:	1885c83a 	sub	r2,r3,r2
 c007558:	f800283a 	ret
 c00755c:	0005883a 	mov	r2,zero
 c007560:	f800283a 	ret
 c007564:	10c03fcc 	andi	r3,r2,255
 c007568:	003ff506 	br	c007540 <__alt_data_end+0xfc007540>

0c00756c <strlen>:
 c00756c:	208000cc 	andi	r2,r4,3
 c007570:	10002026 	beq	r2,zero,c0075f4 <strlen+0x88>
 c007574:	20800007 	ldb	r2,0(r4)
 c007578:	10002026 	beq	r2,zero,c0075fc <strlen+0x90>
 c00757c:	2005883a 	mov	r2,r4
 c007580:	00000206 	br	c00758c <strlen+0x20>
 c007584:	10c00007 	ldb	r3,0(r2)
 c007588:	18001826 	beq	r3,zero,c0075ec <strlen+0x80>
 c00758c:	10800044 	addi	r2,r2,1
 c007590:	10c000cc 	andi	r3,r2,3
 c007594:	183ffb1e 	bne	r3,zero,c007584 <__alt_data_end+0xfc007584>
 c007598:	10c00017 	ldw	r3,0(r2)
 c00759c:	01ffbff4 	movhi	r7,65279
 c0075a0:	39ffbfc4 	addi	r7,r7,-257
 c0075a4:	00ca303a 	nor	r5,zero,r3
 c0075a8:	01a02074 	movhi	r6,32897
 c0075ac:	19c7883a 	add	r3,r3,r7
 c0075b0:	31a02004 	addi	r6,r6,-32640
 c0075b4:	1946703a 	and	r3,r3,r5
 c0075b8:	1986703a 	and	r3,r3,r6
 c0075bc:	1800091e 	bne	r3,zero,c0075e4 <strlen+0x78>
 c0075c0:	10800104 	addi	r2,r2,4
 c0075c4:	10c00017 	ldw	r3,0(r2)
 c0075c8:	19cb883a 	add	r5,r3,r7
 c0075cc:	00c6303a 	nor	r3,zero,r3
 c0075d0:	28c6703a 	and	r3,r5,r3
 c0075d4:	1986703a 	and	r3,r3,r6
 c0075d8:	183ff926 	beq	r3,zero,c0075c0 <__alt_data_end+0xfc0075c0>
 c0075dc:	00000106 	br	c0075e4 <strlen+0x78>
 c0075e0:	10800044 	addi	r2,r2,1
 c0075e4:	10c00007 	ldb	r3,0(r2)
 c0075e8:	183ffd1e 	bne	r3,zero,c0075e0 <__alt_data_end+0xfc0075e0>
 c0075ec:	1105c83a 	sub	r2,r2,r4
 c0075f0:	f800283a 	ret
 c0075f4:	2005883a 	mov	r2,r4
 c0075f8:	003fe706 	br	c007598 <__alt_data_end+0xfc007598>
 c0075fc:	0005883a 	mov	r2,zero
 c007600:	f800283a 	ret

0c007604 <__sprint_r.part.0>:
 c007604:	28801917 	ldw	r2,100(r5)
 c007608:	defff604 	addi	sp,sp,-40
 c00760c:	dd400515 	stw	r21,20(sp)
 c007610:	dfc00915 	stw	ra,36(sp)
 c007614:	df000815 	stw	fp,32(sp)
 c007618:	ddc00715 	stw	r23,28(sp)
 c00761c:	dd800615 	stw	r22,24(sp)
 c007620:	dd000415 	stw	r20,16(sp)
 c007624:	dcc00315 	stw	r19,12(sp)
 c007628:	dc800215 	stw	r18,8(sp)
 c00762c:	dc400115 	stw	r17,4(sp)
 c007630:	dc000015 	stw	r16,0(sp)
 c007634:	1088000c 	andi	r2,r2,8192
 c007638:	302b883a 	mov	r21,r6
 c00763c:	10002e26 	beq	r2,zero,c0076f8 <__sprint_r.part.0+0xf4>
 c007640:	30800217 	ldw	r2,8(r6)
 c007644:	35800017 	ldw	r22,0(r6)
 c007648:	10002926 	beq	r2,zero,c0076f0 <__sprint_r.part.0+0xec>
 c00764c:	2827883a 	mov	r19,r5
 c007650:	2029883a 	mov	r20,r4
 c007654:	b5c00104 	addi	r23,r22,4
 c007658:	04bfffc4 	movi	r18,-1
 c00765c:	bc400017 	ldw	r17,0(r23)
 c007660:	b4000017 	ldw	r16,0(r22)
 c007664:	0039883a 	mov	fp,zero
 c007668:	8822d0ba 	srli	r17,r17,2
 c00766c:	8800031e 	bne	r17,zero,c00767c <__sprint_r.part.0+0x78>
 c007670:	00001806 	br	c0076d4 <__sprint_r.part.0+0xd0>
 c007674:	84000104 	addi	r16,r16,4
 c007678:	8f001526 	beq	r17,fp,c0076d0 <__sprint_r.part.0+0xcc>
 c00767c:	81400017 	ldw	r5,0(r16)
 c007680:	980d883a 	mov	r6,r19
 c007684:	a009883a 	mov	r4,r20
 c007688:	c0090f40 	call	c0090f4 <_fputwc_r>
 c00768c:	e7000044 	addi	fp,fp,1
 c007690:	14bff81e 	bne	r2,r18,c007674 <__alt_data_end+0xfc007674>
 c007694:	9005883a 	mov	r2,r18
 c007698:	a8000215 	stw	zero,8(r21)
 c00769c:	a8000115 	stw	zero,4(r21)
 c0076a0:	dfc00917 	ldw	ra,36(sp)
 c0076a4:	df000817 	ldw	fp,32(sp)
 c0076a8:	ddc00717 	ldw	r23,28(sp)
 c0076ac:	dd800617 	ldw	r22,24(sp)
 c0076b0:	dd400517 	ldw	r21,20(sp)
 c0076b4:	dd000417 	ldw	r20,16(sp)
 c0076b8:	dcc00317 	ldw	r19,12(sp)
 c0076bc:	dc800217 	ldw	r18,8(sp)
 c0076c0:	dc400117 	ldw	r17,4(sp)
 c0076c4:	dc000017 	ldw	r16,0(sp)
 c0076c8:	dec00a04 	addi	sp,sp,40
 c0076cc:	f800283a 	ret
 c0076d0:	a8800217 	ldw	r2,8(r21)
 c0076d4:	8c63883a 	add	r17,r17,r17
 c0076d8:	8c63883a 	add	r17,r17,r17
 c0076dc:	1445c83a 	sub	r2,r2,r17
 c0076e0:	a8800215 	stw	r2,8(r21)
 c0076e4:	b5800204 	addi	r22,r22,8
 c0076e8:	bdc00204 	addi	r23,r23,8
 c0076ec:	103fdb1e 	bne	r2,zero,c00765c <__alt_data_end+0xfc00765c>
 c0076f0:	0005883a 	mov	r2,zero
 c0076f4:	003fe806 	br	c007698 <__alt_data_end+0xfc007698>
 c0076f8:	c0091f40 	call	c0091f4 <__sfvwrite_r>
 c0076fc:	003fe606 	br	c007698 <__alt_data_end+0xfc007698>

0c007700 <__sprint_r>:
 c007700:	30c00217 	ldw	r3,8(r6)
 c007704:	18000126 	beq	r3,zero,c00770c <__sprint_r+0xc>
 c007708:	c0076041 	jmpi	c007604 <__sprint_r.part.0>
 c00770c:	30000115 	stw	zero,4(r6)
 c007710:	0005883a 	mov	r2,zero
 c007714:	f800283a 	ret

0c007718 <___vfiprintf_internal_r>:
 c007718:	deffca04 	addi	sp,sp,-216
 c00771c:	dd403115 	stw	r21,196(sp)
 c007720:	dfc03515 	stw	ra,212(sp)
 c007724:	df003415 	stw	fp,208(sp)
 c007728:	ddc03315 	stw	r23,204(sp)
 c00772c:	dd803215 	stw	r22,200(sp)
 c007730:	dd003015 	stw	r20,192(sp)
 c007734:	dcc02f15 	stw	r19,188(sp)
 c007738:	dc802e15 	stw	r18,184(sp)
 c00773c:	dc402d15 	stw	r17,180(sp)
 c007740:	dc002c15 	stw	r16,176(sp)
 c007744:	d9002115 	stw	r4,132(sp)
 c007748:	d9402015 	stw	r5,128(sp)
 c00774c:	d9c02215 	stw	r7,136(sp)
 c007750:	302b883a 	mov	r21,r6
 c007754:	20000226 	beq	r4,zero,c007760 <___vfiprintf_internal_r+0x48>
 c007758:	20800e17 	ldw	r2,56(r4)
 c00775c:	1000cf26 	beq	r2,zero,c007a9c <___vfiprintf_internal_r+0x384>
 c007760:	d8c02017 	ldw	r3,128(sp)
 c007764:	1880030b 	ldhu	r2,12(r3)
 c007768:	10c8000c 	andi	r3,r2,8192
 c00776c:	1800071e 	bne	r3,zero,c00778c <___vfiprintf_internal_r+0x74>
 c007770:	d9402017 	ldw	r5,128(sp)
 c007774:	00f7ffc4 	movi	r3,-8193
 c007778:	10880014 	ori	r2,r2,8192
 c00777c:	29001917 	ldw	r4,100(r5)
 c007780:	2880030d 	sth	r2,12(r5)
 c007784:	20c6703a 	and	r3,r4,r3
 c007788:	28c01915 	stw	r3,100(r5)
 c00778c:	10c0020c 	andi	r3,r2,8
 c007790:	1800a526 	beq	r3,zero,c007a28 <___vfiprintf_internal_r+0x310>
 c007794:	d9002017 	ldw	r4,128(sp)
 c007798:	20c00417 	ldw	r3,16(r4)
 c00779c:	1800a226 	beq	r3,zero,c007a28 <___vfiprintf_internal_r+0x310>
 c0077a0:	1080068c 	andi	r2,r2,26
 c0077a4:	00c00284 	movi	r3,10
 c0077a8:	10c0a826 	beq	r2,r3,c007a4c <___vfiprintf_internal_r+0x334>
 c0077ac:	d9001a04 	addi	r4,sp,104
 c0077b0:	d94019c4 	addi	r5,sp,103
 c0077b4:	04830074 	movhi	r18,3073
 c0077b8:	2145c83a 	sub	r2,r4,r5
 c0077bc:	9480f604 	addi	r18,r18,984
 c0077c0:	d9001e15 	stw	r4,120(sp)
 c0077c4:	d9401f15 	stw	r5,124(sp)
 c0077c8:	dec01a15 	stw	sp,104(sp)
 c0077cc:	d8001c15 	stw	zero,112(sp)
 c0077d0:	d8001b15 	stw	zero,108(sp)
 c0077d4:	d811883a 	mov	r8,sp
 c0077d8:	d8002615 	stw	zero,152(sp)
 c0077dc:	d8002415 	stw	zero,144(sp)
 c0077e0:	d8802815 	stw	r2,160(sp)
 c0077e4:	a82d883a 	mov	r22,r21
 c0077e8:	b0800007 	ldb	r2,0(r22)
 c0077ec:	10040d26 	beq	r2,zero,c008824 <___vfiprintf_internal_r+0x110c>
 c0077f0:	00c00944 	movi	r3,37
 c0077f4:	b029883a 	mov	r20,r22
 c0077f8:	10c0021e 	bne	r2,r3,c007804 <___vfiprintf_internal_r+0xec>
 c0077fc:	00001606 	br	c007858 <___vfiprintf_internal_r+0x140>
 c007800:	10c00326 	beq	r2,r3,c007810 <___vfiprintf_internal_r+0xf8>
 c007804:	a5000044 	addi	r20,r20,1
 c007808:	a0800007 	ldb	r2,0(r20)
 c00780c:	103ffc1e 	bne	r2,zero,c007800 <__alt_data_end+0xfc007800>
 c007810:	a5a1c83a 	sub	r16,r20,r22
 c007814:	80001026 	beq	r16,zero,c007858 <___vfiprintf_internal_r+0x140>
 c007818:	d8c01c17 	ldw	r3,112(sp)
 c00781c:	d8801b17 	ldw	r2,108(sp)
 c007820:	45800015 	stw	r22,0(r8)
 c007824:	80c7883a 	add	r3,r16,r3
 c007828:	10800044 	addi	r2,r2,1
 c00782c:	44000115 	stw	r16,4(r8)
 c007830:	d8c01c15 	stw	r3,112(sp)
 c007834:	d8801b15 	stw	r2,108(sp)
 c007838:	010001c4 	movi	r4,7
 c00783c:	2080750e 	bge	r4,r2,c007a14 <___vfiprintf_internal_r+0x2fc>
 c007840:	1803951e 	bne	r3,zero,c008698 <___vfiprintf_internal_r+0xf80>
 c007844:	d8c02417 	ldw	r3,144(sp)
 c007848:	d8001b15 	stw	zero,108(sp)
 c00784c:	d811883a 	mov	r8,sp
 c007850:	1c07883a 	add	r3,r3,r16
 c007854:	d8c02415 	stw	r3,144(sp)
 c007858:	a0800007 	ldb	r2,0(r20)
 c00785c:	1002e026 	beq	r2,zero,c0083e0 <___vfiprintf_internal_r+0xcc8>
 c007860:	a5800044 	addi	r22,r20,1
 c007864:	a0c00047 	ldb	r3,1(r20)
 c007868:	d8001d85 	stb	zero,118(sp)
 c00786c:	0027883a 	mov	r19,zero
 c007870:	d8002305 	stb	zero,140(sp)
 c007874:	043fffc4 	movi	r16,-1
 c007878:	d8002515 	stw	zero,148(sp)
 c00787c:	0023883a 	mov	r17,zero
 c007880:	05001604 	movi	r20,88
 c007884:	05400244 	movi	r21,9
 c007888:	402f883a 	mov	r23,r8
 c00788c:	b5800044 	addi	r22,r22,1
 c007890:	18bff804 	addi	r2,r3,-32
 c007894:	a0827736 	bltu	r20,r2,c008274 <___vfiprintf_internal_r+0xb5c>
 c007898:	100490ba 	slli	r2,r2,2
 c00789c:	01030034 	movhi	r4,3072
 c0078a0:	211e2c04 	addi	r4,r4,30896
 c0078a4:	1105883a 	add	r2,r2,r4
 c0078a8:	10800017 	ldw	r2,0(r2)
 c0078ac:	1000683a 	jmp	r2
 c0078b0:	0c007f74 	orhi	r16,at,509
 c0078b4:	0c008274 	orhi	r16,at,521
 c0078b8:	0c008274 	orhi	r16,at,521
 c0078bc:	0c007f90 	cmplti	r16,at,510
 c0078c0:	0c008274 	orhi	r16,at,521
 c0078c4:	0c008274 	orhi	r16,at,521
 c0078c8:	0c008274 	orhi	r16,at,521
 c0078cc:	0c008274 	orhi	r16,at,521
 c0078d0:	0c008274 	orhi	r16,at,521
 c0078d4:	0c008274 	orhi	r16,at,521
 c0078d8:	0c008198 	cmpnei	r16,at,518
 c0078dc:	0c0081bc 	xorhi	r16,at,518
 c0078e0:	0c008274 	orhi	r16,at,521
 c0078e4:	0c007ab4 	orhi	r16,at,490
 c0078e8:	0c0081d0 	cmplti	r16,at,519
 c0078ec:	0c008274 	orhi	r16,at,521
 c0078f0:	0c007f9c 	xori	r16,at,510
 c0078f4:	0c007fa8 	cmpgeui	r16,at,510
 c0078f8:	0c007fa8 	cmpgeui	r16,at,510
 c0078fc:	0c007fa8 	cmpgeui	r16,at,510
 c007900:	0c007fa8 	cmpgeui	r16,at,510
 c007904:	0c007fa8 	cmpgeui	r16,at,510
 c007908:	0c007fa8 	cmpgeui	r16,at,510
 c00790c:	0c007fa8 	cmpgeui	r16,at,510
 c007910:	0c007fa8 	cmpgeui	r16,at,510
 c007914:	0c007fa8 	cmpgeui	r16,at,510
 c007918:	0c008274 	orhi	r16,at,521
 c00791c:	0c008274 	orhi	r16,at,521
 c007920:	0c008274 	orhi	r16,at,521
 c007924:	0c008274 	orhi	r16,at,521
 c007928:	0c008274 	orhi	r16,at,521
 c00792c:	0c008274 	orhi	r16,at,521
 c007930:	0c008274 	orhi	r16,at,521
 c007934:	0c008274 	orhi	r16,at,521
 c007938:	0c008274 	orhi	r16,at,521
 c00793c:	0c008274 	orhi	r16,at,521
 c007940:	0c007fe8 	cmpgeui	r16,at,511
 c007944:	0c008274 	orhi	r16,at,521
 c007948:	0c008274 	orhi	r16,at,521
 c00794c:	0c008274 	orhi	r16,at,521
 c007950:	0c008274 	orhi	r16,at,521
 c007954:	0c008274 	orhi	r16,at,521
 c007958:	0c008274 	orhi	r16,at,521
 c00795c:	0c008274 	orhi	r16,at,521
 c007960:	0c008274 	orhi	r16,at,521
 c007964:	0c008274 	orhi	r16,at,521
 c007968:	0c008274 	orhi	r16,at,521
 c00796c:	0c008024 	muli	r16,at,512
 c007970:	0c008274 	orhi	r16,at,521
 c007974:	0c008274 	orhi	r16,at,521
 c007978:	0c008274 	orhi	r16,at,521
 c00797c:	0c008274 	orhi	r16,at,521
 c007980:	0c008274 	orhi	r16,at,521
 c007984:	0c008080 	call	c00808 <__alt_mem_onchip_memory2_0+0xc00808>
 c007988:	0c008274 	orhi	r16,at,521
 c00798c:	0c008274 	orhi	r16,at,521
 c007990:	0c0080f4 	orhi	r16,at,515
 c007994:	0c008274 	orhi	r16,at,521
 c007998:	0c008274 	orhi	r16,at,521
 c00799c:	0c008274 	orhi	r16,at,521
 c0079a0:	0c008274 	orhi	r16,at,521
 c0079a4:	0c008274 	orhi	r16,at,521
 c0079a8:	0c008274 	orhi	r16,at,521
 c0079ac:	0c008274 	orhi	r16,at,521
 c0079b0:	0c008274 	orhi	r16,at,521
 c0079b4:	0c008274 	orhi	r16,at,521
 c0079b8:	0c008274 	orhi	r16,at,521
 c0079bc:	0c007e9c 	xori	r16,at,506
 c0079c0:	0c007ecc 	andi	r16,at,507
 c0079c4:	0c008274 	orhi	r16,at,521
 c0079c8:	0c008274 	orhi	r16,at,521
 c0079cc:	0c008274 	orhi	r16,at,521
 c0079d0:	0c00821c 	xori	r16,at,520
 c0079d4:	0c007ecc 	andi	r16,at,507
 c0079d8:	0c008274 	orhi	r16,at,521
 c0079dc:	0c008274 	orhi	r16,at,521
 c0079e0:	0c007d74 	orhi	r16,at,501
 c0079e4:	0c008274 	orhi	r16,at,521
 c0079e8:	0c007d88 	cmpgei	r16,at,502
 c0079ec:	0c007dc0 	call	c007dc <__alt_mem_onchip_memory2_0+0xc007dc>
 c0079f0:	0c007ac0 	call	c007ac <__alt_mem_onchip_memory2_0+0xc007ac>
 c0079f4:	0c007d68 	cmpgeui	r16,at,501
 c0079f8:	0c008274 	orhi	r16,at,521
 c0079fc:	0c008134 	orhi	r16,at,516
 c007a00:	0c008274 	orhi	r16,at,521
 c007a04:	0c008180 	call	c00818 <__alt_mem_onchip_memory2_0+0xc00818>
 c007a08:	0c008274 	orhi	r16,at,521
 c007a0c:	0c008274 	orhi	r16,at,521
 c007a10:	0c007e44 	addi	r16,at,505
 c007a14:	42000204 	addi	r8,r8,8
 c007a18:	d8c02417 	ldw	r3,144(sp)
 c007a1c:	1c07883a 	add	r3,r3,r16
 c007a20:	d8c02415 	stw	r3,144(sp)
 c007a24:	003f8c06 	br	c007858 <__alt_data_end+0xfc007858>
 c007a28:	d9402017 	ldw	r5,128(sp)
 c007a2c:	d9002117 	ldw	r4,132(sp)
 c007a30:	c002f0c0 	call	c002f0c <__swsetup_r>
 c007a34:	1003c11e 	bne	r2,zero,c00893c <___vfiprintf_internal_r+0x1224>
 c007a38:	d9402017 	ldw	r5,128(sp)
 c007a3c:	00c00284 	movi	r3,10
 c007a40:	2880030b 	ldhu	r2,12(r5)
 c007a44:	1080068c 	andi	r2,r2,26
 c007a48:	10ff581e 	bne	r2,r3,c0077ac <__alt_data_end+0xfc0077ac>
 c007a4c:	d8c02017 	ldw	r3,128(sp)
 c007a50:	1880038f 	ldh	r2,14(r3)
 c007a54:	103f5516 	blt	r2,zero,c0077ac <__alt_data_end+0xfc0077ac>
 c007a58:	d9c02217 	ldw	r7,136(sp)
 c007a5c:	d9002117 	ldw	r4,132(sp)
 c007a60:	a80d883a 	mov	r6,r21
 c007a64:	180b883a 	mov	r5,r3
 c007a68:	c008c400 	call	c008c40 <__sbprintf>
 c007a6c:	dfc03517 	ldw	ra,212(sp)
 c007a70:	df003417 	ldw	fp,208(sp)
 c007a74:	ddc03317 	ldw	r23,204(sp)
 c007a78:	dd803217 	ldw	r22,200(sp)
 c007a7c:	dd403117 	ldw	r21,196(sp)
 c007a80:	dd003017 	ldw	r20,192(sp)
 c007a84:	dcc02f17 	ldw	r19,188(sp)
 c007a88:	dc802e17 	ldw	r18,184(sp)
 c007a8c:	dc402d17 	ldw	r17,180(sp)
 c007a90:	dc002c17 	ldw	r16,176(sp)
 c007a94:	dec03604 	addi	sp,sp,216
 c007a98:	f800283a 	ret
 c007a9c:	c004f180 	call	c004f18 <__sinit>
 c007aa0:	003f2f06 	br	c007760 <__alt_data_end+0xfc007760>
 c007aa4:	d8c02517 	ldw	r3,148(sp)
 c007aa8:	d8802215 	stw	r2,136(sp)
 c007aac:	00c7c83a 	sub	r3,zero,r3
 c007ab0:	d8c02515 	stw	r3,148(sp)
 c007ab4:	8c400114 	ori	r17,r17,4
 c007ab8:	b0c00007 	ldb	r3,0(r22)
 c007abc:	003f7306 	br	c00788c <__alt_data_end+0xfc00788c>
 c007ac0:	00800c04 	movi	r2,48
 c007ac4:	d9402217 	ldw	r5,136(sp)
 c007ac8:	d8801d05 	stb	r2,116(sp)
 c007acc:	00801e04 	movi	r2,120
 c007ad0:	d8801d45 	stb	r2,117(sp)
 c007ad4:	d8001d85 	stb	zero,118(sp)
 c007ad8:	b811883a 	mov	r8,r23
 c007adc:	28c00104 	addi	r3,r5,4
 c007ae0:	2cc00017 	ldw	r19,0(r5)
 c007ae4:	0029883a 	mov	r20,zero
 c007ae8:	88800094 	ori	r2,r17,2
 c007aec:	80032516 	blt	r16,zero,c008784 <___vfiprintf_internal_r+0x106c>
 c007af0:	00bfdfc4 	movi	r2,-129
 c007af4:	88a2703a 	and	r17,r17,r2
 c007af8:	d8c02215 	stw	r3,136(sp)
 c007afc:	8c400094 	ori	r17,r17,2
 c007b00:	98032a1e 	bne	r19,zero,c0087ac <___vfiprintf_internal_r+0x1094>
 c007b04:	00830074 	movhi	r2,3073
 c007b08:	10809504 	addi	r2,r2,596
 c007b0c:	d8802615 	stw	r2,152(sp)
 c007b10:	002b883a 	mov	r21,zero
 c007b14:	8001741e 	bne	r16,zero,c0080e8 <___vfiprintf_internal_r+0x9d0>
 c007b18:	0021883a 	mov	r16,zero
 c007b1c:	0029883a 	mov	r20,zero
 c007b20:	ddc01a04 	addi	r23,sp,104
 c007b24:	8027883a 	mov	r19,r16
 c007b28:	8500010e 	bge	r16,r20,c007b30 <___vfiprintf_internal_r+0x418>
 c007b2c:	a027883a 	mov	r19,r20
 c007b30:	ad403fcc 	andi	r21,r21,255
 c007b34:	ad40201c 	xori	r21,r21,128
 c007b38:	ad7fe004 	addi	r21,r21,-128
 c007b3c:	a8000126 	beq	r21,zero,c007b44 <___vfiprintf_internal_r+0x42c>
 c007b40:	9cc00044 	addi	r19,r19,1
 c007b44:	89c0008c 	andi	r7,r17,2
 c007b48:	38000126 	beq	r7,zero,c007b50 <___vfiprintf_internal_r+0x438>
 c007b4c:	9cc00084 	addi	r19,r19,2
 c007b50:	88c0210c 	andi	r3,r17,132
 c007b54:	1801dd1e 	bne	r3,zero,c0082cc <___vfiprintf_internal_r+0xbb4>
 c007b58:	d9402517 	ldw	r5,148(sp)
 c007b5c:	2cebc83a 	sub	r21,r5,r19
 c007b60:	0541da0e 	bge	zero,r21,c0082cc <___vfiprintf_internal_r+0xbb4>
 c007b64:	07000404 	movi	fp,16
 c007b68:	d8801c17 	ldw	r2,112(sp)
 c007b6c:	e543be0e 	bge	fp,r21,c008a68 <___vfiprintf_internal_r+0x1350>
 c007b70:	01430074 	movhi	r5,3073
 c007b74:	2940fa04 	addi	r5,r5,1000
 c007b78:	dc002715 	stw	r16,156(sp)
 c007b7c:	d9801b17 	ldw	r6,108(sp)
 c007b80:	a821883a 	mov	r16,r21
 c007b84:	d9402315 	stw	r5,140(sp)
 c007b88:	028001c4 	movi	r10,7
 c007b8c:	d9c02915 	stw	r7,164(sp)
 c007b90:	182b883a 	mov	r21,r3
 c007b94:	00000506 	br	c007bac <___vfiprintf_internal_r+0x494>
 c007b98:	31000084 	addi	r4,r6,2
 c007b9c:	42000204 	addi	r8,r8,8
 c007ba0:	180d883a 	mov	r6,r3
 c007ba4:	843ffc04 	addi	r16,r16,-16
 c007ba8:	e4000f0e 	bge	fp,r16,c007be8 <___vfiprintf_internal_r+0x4d0>
 c007bac:	01030074 	movhi	r4,3073
 c007bb0:	10800404 	addi	r2,r2,16
 c007bb4:	30c00044 	addi	r3,r6,1
 c007bb8:	2100fa04 	addi	r4,r4,1000
 c007bbc:	41000015 	stw	r4,0(r8)
 c007bc0:	47000115 	stw	fp,4(r8)
 c007bc4:	d8801c15 	stw	r2,112(sp)
 c007bc8:	d8c01b15 	stw	r3,108(sp)
 c007bcc:	50fff20e 	bge	r10,r3,c007b98 <__alt_data_end+0xfc007b98>
 c007bd0:	1001b21e 	bne	r2,zero,c00829c <___vfiprintf_internal_r+0xb84>
 c007bd4:	843ffc04 	addi	r16,r16,-16
 c007bd8:	000d883a 	mov	r6,zero
 c007bdc:	01000044 	movi	r4,1
 c007be0:	d811883a 	mov	r8,sp
 c007be4:	e43ff116 	blt	fp,r16,c007bac <__alt_data_end+0xfc007bac>
 c007be8:	a807883a 	mov	r3,r21
 c007bec:	d9c02917 	ldw	r7,164(sp)
 c007bf0:	802b883a 	mov	r21,r16
 c007bf4:	dc002717 	ldw	r16,156(sp)
 c007bf8:	d9402317 	ldw	r5,140(sp)
 c007bfc:	a885883a 	add	r2,r21,r2
 c007c00:	45400115 	stw	r21,4(r8)
 c007c04:	41400015 	stw	r5,0(r8)
 c007c08:	d8801c15 	stw	r2,112(sp)
 c007c0c:	d9001b15 	stw	r4,108(sp)
 c007c10:	014001c4 	movi	r5,7
 c007c14:	29026216 	blt	r5,r4,c0085a0 <___vfiprintf_internal_r+0xe88>
 c007c18:	d9801d87 	ldb	r6,118(sp)
 c007c1c:	42000204 	addi	r8,r8,8
 c007c20:	21400044 	addi	r5,r4,1
 c007c24:	3001ae1e 	bne	r6,zero,c0082e0 <___vfiprintf_internal_r+0xbc8>
 c007c28:	3801bb26 	beq	r7,zero,c008318 <___vfiprintf_internal_r+0xc00>
 c007c2c:	d9001d04 	addi	r4,sp,116
 c007c30:	10800084 	addi	r2,r2,2
 c007c34:	41000015 	stw	r4,0(r8)
 c007c38:	01000084 	movi	r4,2
 c007c3c:	41000115 	stw	r4,4(r8)
 c007c40:	d8801c15 	stw	r2,112(sp)
 c007c44:	d9401b15 	stw	r5,108(sp)
 c007c48:	010001c4 	movi	r4,7
 c007c4c:	2142680e 	bge	r4,r5,c0085f0 <___vfiprintf_internal_r+0xed8>
 c007c50:	1002b11e 	bne	r2,zero,c008718 <___vfiprintf_internal_r+0x1000>
 c007c54:	01802004 	movi	r6,128
 c007c58:	01400044 	movi	r5,1
 c007c5c:	0009883a 	mov	r4,zero
 c007c60:	d811883a 	mov	r8,sp
 c007c64:	1981ae1e 	bne	r3,r6,c008320 <___vfiprintf_internal_r+0xc08>
 c007c68:	d8c02517 	ldw	r3,148(sp)
 c007c6c:	1cf9c83a 	sub	fp,r3,r19
 c007c70:	0701ab0e 	bge	zero,fp,c008320 <___vfiprintf_internal_r+0xc08>
 c007c74:	05400404 	movi	r21,16
 c007c78:	af03a90e 	bge	r21,fp,c008b20 <___vfiprintf_internal_r+0x1408>
 c007c7c:	01430074 	movhi	r5,3073
 c007c80:	2940f604 	addi	r5,r5,984
 c007c84:	d9402315 	stw	r5,140(sp)
 c007c88:	01c001c4 	movi	r7,7
 c007c8c:	00000506 	br	c007ca4 <___vfiprintf_internal_r+0x58c>
 c007c90:	21800084 	addi	r6,r4,2
 c007c94:	42000204 	addi	r8,r8,8
 c007c98:	1809883a 	mov	r4,r3
 c007c9c:	e73ffc04 	addi	fp,fp,-16
 c007ca0:	af000d0e 	bge	r21,fp,c007cd8 <___vfiprintf_internal_r+0x5c0>
 c007ca4:	10800404 	addi	r2,r2,16
 c007ca8:	20c00044 	addi	r3,r4,1
 c007cac:	44800015 	stw	r18,0(r8)
 c007cb0:	45400115 	stw	r21,4(r8)
 c007cb4:	d8801c15 	stw	r2,112(sp)
 c007cb8:	d8c01b15 	stw	r3,108(sp)
 c007cbc:	38fff40e 	bge	r7,r3,c007c90 <__alt_data_end+0xfc007c90>
 c007cc0:	10022b1e 	bne	r2,zero,c008570 <___vfiprintf_internal_r+0xe58>
 c007cc4:	e73ffc04 	addi	fp,fp,-16
 c007cc8:	01800044 	movi	r6,1
 c007ccc:	0009883a 	mov	r4,zero
 c007cd0:	d811883a 	mov	r8,sp
 c007cd4:	af3ff316 	blt	r21,fp,c007ca4 <__alt_data_end+0xfc007ca4>
 c007cd8:	d8c02317 	ldw	r3,140(sp)
 c007cdc:	1705883a 	add	r2,r2,fp
 c007ce0:	47000115 	stw	fp,4(r8)
 c007ce4:	40c00015 	stw	r3,0(r8)
 c007ce8:	d8801c15 	stw	r2,112(sp)
 c007cec:	d9801b15 	stw	r6,108(sp)
 c007cf0:	00c001c4 	movi	r3,7
 c007cf4:	19829416 	blt	r3,r6,c008748 <___vfiprintf_internal_r+0x1030>
 c007cf8:	8521c83a 	sub	r16,r16,r20
 c007cfc:	42000204 	addi	r8,r8,8
 c007d00:	31400044 	addi	r5,r6,1
 c007d04:	3009883a 	mov	r4,r6
 c007d08:	04018716 	blt	zero,r16,c008328 <___vfiprintf_internal_r+0xc10>
 c007d0c:	a085883a 	add	r2,r20,r2
 c007d10:	45c00015 	stw	r23,0(r8)
 c007d14:	45000115 	stw	r20,4(r8)
 c007d18:	d8801c15 	stw	r2,112(sp)
 c007d1c:	d9401b15 	stw	r5,108(sp)
 c007d20:	00c001c4 	movi	r3,7
 c007d24:	1941c20e 	bge	r3,r5,c008430 <___vfiprintf_internal_r+0xd18>
 c007d28:	1002531e 	bne	r2,zero,c008678 <___vfiprintf_internal_r+0xf60>
 c007d2c:	d8001b15 	stw	zero,108(sp)
 c007d30:	8c40010c 	andi	r17,r17,4
 c007d34:	88023226 	beq	r17,zero,c008600 <___vfiprintf_internal_r+0xee8>
 c007d38:	d9002517 	ldw	r4,148(sp)
 c007d3c:	24e3c83a 	sub	r17,r4,r19
 c007d40:	04432916 	blt	zero,r17,c0089e8 <___vfiprintf_internal_r+0x12d0>
 c007d44:	d8802517 	ldw	r2,148(sp)
 c007d48:	14c0010e 	bge	r2,r19,c007d50 <___vfiprintf_internal_r+0x638>
 c007d4c:	9805883a 	mov	r2,r19
 c007d50:	d8c02417 	ldw	r3,144(sp)
 c007d54:	1887883a 	add	r3,r3,r2
 c007d58:	d8c02415 	stw	r3,144(sp)
 c007d5c:	d8001b15 	stw	zero,108(sp)
 c007d60:	d811883a 	mov	r8,sp
 c007d64:	003ea006 	br	c0077e8 <__alt_data_end+0xfc0077e8>
 c007d68:	8c400814 	ori	r17,r17,32
 c007d6c:	b0c00007 	ldb	r3,0(r22)
 c007d70:	003ec606 	br	c00788c <__alt_data_end+0xfc00788c>
 c007d74:	b0c00007 	ldb	r3,0(r22)
 c007d78:	00801b04 	movi	r2,108
 c007d7c:	18832026 	beq	r3,r2,c008a00 <___vfiprintf_internal_r+0x12e8>
 c007d80:	8c400414 	ori	r17,r17,16
 c007d84:	003ec106 	br	c00788c <__alt_data_end+0xfc00788c>
 c007d88:	9cc03fcc 	andi	r19,r19,255
 c007d8c:	b811883a 	mov	r8,r23
 c007d90:	9803981e 	bne	r19,zero,c008bf4 <___vfiprintf_internal_r+0x14dc>
 c007d94:	8880080c 	andi	r2,r17,32
 c007d98:	1002be26 	beq	r2,zero,c008894 <___vfiprintf_internal_r+0x117c>
 c007d9c:	d9002217 	ldw	r4,136(sp)
 c007da0:	d9402417 	ldw	r5,144(sp)
 c007da4:	20800017 	ldw	r2,0(r4)
 c007da8:	2807d7fa 	srai	r3,r5,31
 c007dac:	21000104 	addi	r4,r4,4
 c007db0:	d9002215 	stw	r4,136(sp)
 c007db4:	11400015 	stw	r5,0(r2)
 c007db8:	10c00115 	stw	r3,4(r2)
 c007dbc:	003e8a06 	br	c0077e8 <__alt_data_end+0xfc0077e8>
 c007dc0:	9cc03fcc 	andi	r19,r19,255
 c007dc4:	b811883a 	mov	r8,r23
 c007dc8:	9803871e 	bne	r19,zero,c008be8 <___vfiprintf_internal_r+0x14d0>
 c007dcc:	8880080c 	andi	r2,r17,32
 c007dd0:	10009a26 	beq	r2,zero,c00803c <___vfiprintf_internal_r+0x924>
 c007dd4:	d9002217 	ldw	r4,136(sp)
 c007dd8:	d8001d85 	stb	zero,118(sp)
 c007ddc:	20800204 	addi	r2,r4,8
 c007de0:	24c00017 	ldw	r19,0(r4)
 c007de4:	25000117 	ldw	r20,4(r4)
 c007de8:	8002a416 	blt	r16,zero,c00887c <___vfiprintf_internal_r+0x1164>
 c007dec:	013fdfc4 	movi	r4,-129
 c007df0:	9d06b03a 	or	r3,r19,r20
 c007df4:	d8802215 	stw	r2,136(sp)
 c007df8:	8922703a 	and	r17,r17,r4
 c007dfc:	18009b26 	beq	r3,zero,c00806c <___vfiprintf_internal_r+0x954>
 c007e00:	002b883a 	mov	r21,zero
 c007e04:	ddc01a04 	addi	r23,sp,104
 c007e08:	9806d0fa 	srli	r3,r19,3
 c007e0c:	a008977a 	slli	r4,r20,29
 c007e10:	a028d0fa 	srli	r20,r20,3
 c007e14:	9cc001cc 	andi	r19,r19,7
 c007e18:	98800c04 	addi	r2,r19,48
 c007e1c:	bdffffc4 	addi	r23,r23,-1
 c007e20:	20e6b03a 	or	r19,r4,r3
 c007e24:	b8800005 	stb	r2,0(r23)
 c007e28:	9d06b03a 	or	r3,r19,r20
 c007e2c:	183ff61e 	bne	r3,zero,c007e08 <__alt_data_end+0xfc007e08>
 c007e30:	88c0004c 	andi	r3,r17,1
 c007e34:	18021f1e 	bne	r3,zero,c0086b4 <___vfiprintf_internal_r+0xf9c>
 c007e38:	d9401e17 	ldw	r5,120(sp)
 c007e3c:	2de9c83a 	sub	r20,r5,r23
 c007e40:	003f3806 	br	c007b24 <__alt_data_end+0xfc007b24>
 c007e44:	9cc03fcc 	andi	r19,r19,255
 c007e48:	b811883a 	mov	r8,r23
 c007e4c:	98034f1e 	bne	r19,zero,c008b8c <___vfiprintf_internal_r+0x1474>
 c007e50:	00830074 	movhi	r2,3073
 c007e54:	10809504 	addi	r2,r2,596
 c007e58:	d8802615 	stw	r2,152(sp)
 c007e5c:	8880080c 	andi	r2,r17,32
 c007e60:	1000ac26 	beq	r2,zero,c008114 <___vfiprintf_internal_r+0x9fc>
 c007e64:	d9002217 	ldw	r4,136(sp)
 c007e68:	24c00017 	ldw	r19,0(r4)
 c007e6c:	25000117 	ldw	r20,4(r4)
 c007e70:	21000204 	addi	r4,r4,8
 c007e74:	d9002215 	stw	r4,136(sp)
 c007e78:	8880004c 	andi	r2,r17,1
 c007e7c:	1001e726 	beq	r2,zero,c00861c <___vfiprintf_internal_r+0xf04>
 c007e80:	9d04b03a 	or	r2,r19,r20
 c007e84:	10025c1e 	bne	r2,zero,c0087f8 <___vfiprintf_internal_r+0x10e0>
 c007e88:	d8001d85 	stb	zero,118(sp)
 c007e8c:	80024416 	blt	r16,zero,c0087a0 <___vfiprintf_internal_r+0x1088>
 c007e90:	00bfdfc4 	movi	r2,-129
 c007e94:	88a2703a 	and	r17,r17,r2
 c007e98:	003f1d06 	br	c007b10 <__alt_data_end+0xfc007b10>
 c007e9c:	d8c02217 	ldw	r3,136(sp)
 c007ea0:	04c00044 	movi	r19,1
 c007ea4:	b811883a 	mov	r8,r23
 c007ea8:	18800017 	ldw	r2,0(r3)
 c007eac:	18c00104 	addi	r3,r3,4
 c007eb0:	d8001d85 	stb	zero,118(sp)
 c007eb4:	d8801005 	stb	r2,64(sp)
 c007eb8:	d8c02215 	stw	r3,136(sp)
 c007ebc:	9829883a 	mov	r20,r19
 c007ec0:	ddc01004 	addi	r23,sp,64
 c007ec4:	0021883a 	mov	r16,zero
 c007ec8:	003f1e06 	br	c007b44 <__alt_data_end+0xfc007b44>
 c007ecc:	9cc03fcc 	andi	r19,r19,255
 c007ed0:	b811883a 	mov	r8,r23
 c007ed4:	9803331e 	bne	r19,zero,c008ba4 <___vfiprintf_internal_r+0x148c>
 c007ed8:	8880080c 	andi	r2,r17,32
 c007edc:	10004826 	beq	r2,zero,c008000 <___vfiprintf_internal_r+0x8e8>
 c007ee0:	d9002217 	ldw	r4,136(sp)
 c007ee4:	20800117 	ldw	r2,4(r4)
 c007ee8:	24c00017 	ldw	r19,0(r4)
 c007eec:	21000204 	addi	r4,r4,8
 c007ef0:	d9002215 	stw	r4,136(sp)
 c007ef4:	1029883a 	mov	r20,r2
 c007ef8:	10024c16 	blt	r2,zero,c00882c <___vfiprintf_internal_r+0x1114>
 c007efc:	dd401d83 	ldbu	r21,118(sp)
 c007f00:	80007116 	blt	r16,zero,c0080c8 <___vfiprintf_internal_r+0x9b0>
 c007f04:	00ffdfc4 	movi	r3,-129
 c007f08:	9d04b03a 	or	r2,r19,r20
 c007f0c:	88e2703a 	and	r17,r17,r3
 c007f10:	1000d126 	beq	r2,zero,c008258 <___vfiprintf_internal_r+0xb40>
 c007f14:	a0023526 	beq	r20,zero,c0087ec <___vfiprintf_internal_r+0x10d4>
 c007f18:	ddc01a04 	addi	r23,sp,104
 c007f1c:	4039883a 	mov	fp,r8
 c007f20:	9809883a 	mov	r4,r19
 c007f24:	a00b883a 	mov	r5,r20
 c007f28:	01800284 	movi	r6,10
 c007f2c:	000f883a 	mov	r7,zero
 c007f30:	c00a7cc0 	call	c00a7cc <__umoddi3>
 c007f34:	10800c04 	addi	r2,r2,48
 c007f38:	bdffffc4 	addi	r23,r23,-1
 c007f3c:	9809883a 	mov	r4,r19
 c007f40:	a00b883a 	mov	r5,r20
 c007f44:	b8800005 	stb	r2,0(r23)
 c007f48:	01800284 	movi	r6,10
 c007f4c:	000f883a 	mov	r7,zero
 c007f50:	c00a1d00 	call	c00a1d0 <__udivdi3>
 c007f54:	1027883a 	mov	r19,r2
 c007f58:	10c4b03a 	or	r2,r2,r3
 c007f5c:	1829883a 	mov	r20,r3
 c007f60:	103fef1e 	bne	r2,zero,c007f20 <__alt_data_end+0xfc007f20>
 c007f64:	d9001e17 	ldw	r4,120(sp)
 c007f68:	e011883a 	mov	r8,fp
 c007f6c:	25e9c83a 	sub	r20,r4,r23
 c007f70:	003eec06 	br	c007b24 <__alt_data_end+0xfc007b24>
 c007f74:	d8802307 	ldb	r2,140(sp)
 c007f78:	1002361e 	bne	r2,zero,c008854 <___vfiprintf_internal_r+0x113c>
 c007f7c:	00c00804 	movi	r3,32
 c007f80:	d8c02305 	stb	r3,140(sp)
 c007f84:	04c00044 	movi	r19,1
 c007f88:	b0c00007 	ldb	r3,0(r22)
 c007f8c:	003e3f06 	br	c00788c <__alt_data_end+0xfc00788c>
 c007f90:	8c400054 	ori	r17,r17,1
 c007f94:	b0c00007 	ldb	r3,0(r22)
 c007f98:	003e3c06 	br	c00788c <__alt_data_end+0xfc00788c>
 c007f9c:	8c402014 	ori	r17,r17,128
 c007fa0:	b0c00007 	ldb	r3,0(r22)
 c007fa4:	003e3906 	br	c00788c <__alt_data_end+0xfc00788c>
 c007fa8:	dc002715 	stw	r16,156(sp)
 c007fac:	d8002515 	stw	zero,148(sp)
 c007fb0:	1f3ff404 	addi	fp,r3,-48
 c007fb4:	0009883a 	mov	r4,zero
 c007fb8:	b021883a 	mov	r16,r22
 c007fbc:	01400284 	movi	r5,10
 c007fc0:	c00097c0 	call	c00097c <__mulsi3>
 c007fc4:	80c00007 	ldb	r3,0(r16)
 c007fc8:	e089883a 	add	r4,fp,r2
 c007fcc:	b5800044 	addi	r22,r22,1
 c007fd0:	1f3ff404 	addi	fp,r3,-48
 c007fd4:	b021883a 	mov	r16,r22
 c007fd8:	af3ff82e 	bgeu	r21,fp,c007fbc <__alt_data_end+0xfc007fbc>
 c007fdc:	d9002515 	stw	r4,148(sp)
 c007fe0:	dc002717 	ldw	r16,156(sp)
 c007fe4:	003e2a06 	br	c007890 <__alt_data_end+0xfc007890>
 c007fe8:	9cc03fcc 	andi	r19,r19,255
 c007fec:	b811883a 	mov	r8,r23
 c007ff0:	9802e91e 	bne	r19,zero,c008b98 <___vfiprintf_internal_r+0x1480>
 c007ff4:	8c400414 	ori	r17,r17,16
 c007ff8:	8880080c 	andi	r2,r17,32
 c007ffc:	103fb81e 	bne	r2,zero,c007ee0 <__alt_data_end+0xfc007ee0>
 c008000:	8880040c 	andi	r2,r17,16
 c008004:	10022e26 	beq	r2,zero,c0088c0 <___vfiprintf_internal_r+0x11a8>
 c008008:	d9402217 	ldw	r5,136(sp)
 c00800c:	2cc00017 	ldw	r19,0(r5)
 c008010:	29400104 	addi	r5,r5,4
 c008014:	d9402215 	stw	r5,136(sp)
 c008018:	9829d7fa 	srai	r20,r19,31
 c00801c:	a005883a 	mov	r2,r20
 c008020:	003fb506 	br	c007ef8 <__alt_data_end+0xfc007ef8>
 c008024:	9cc03fcc 	andi	r19,r19,255
 c008028:	b811883a 	mov	r8,r23
 c00802c:	9802fa1e 	bne	r19,zero,c008c18 <___vfiprintf_internal_r+0x1500>
 c008030:	8c400414 	ori	r17,r17,16
 c008034:	8880080c 	andi	r2,r17,32
 c008038:	103f661e 	bne	r2,zero,c007dd4 <__alt_data_end+0xfc007dd4>
 c00803c:	8880040c 	andi	r2,r17,16
 c008040:	10020626 	beq	r2,zero,c00885c <___vfiprintf_internal_r+0x1144>
 c008044:	d9402217 	ldw	r5,136(sp)
 c008048:	d8001d85 	stb	zero,118(sp)
 c00804c:	0029883a 	mov	r20,zero
 c008050:	28800104 	addi	r2,r5,4
 c008054:	2cc00017 	ldw	r19,0(r5)
 c008058:	80020816 	blt	r16,zero,c00887c <___vfiprintf_internal_r+0x1164>
 c00805c:	00ffdfc4 	movi	r3,-129
 c008060:	d8802215 	stw	r2,136(sp)
 c008064:	88e2703a 	and	r17,r17,r3
 c008068:	983f651e 	bne	r19,zero,c007e00 <__alt_data_end+0xfc007e00>
 c00806c:	002b883a 	mov	r21,zero
 c008070:	8002cf26 	beq	r16,zero,c008bb0 <___vfiprintf_internal_r+0x1498>
 c008074:	0027883a 	mov	r19,zero
 c008078:	0029883a 	mov	r20,zero
 c00807c:	003f6106 	br	c007e04 <__alt_data_end+0xfc007e04>
 c008080:	9cc03fcc 	andi	r19,r19,255
 c008084:	b811883a 	mov	r8,r23
 c008088:	9802e01e 	bne	r19,zero,c008c0c <___vfiprintf_internal_r+0x14f4>
 c00808c:	8c400414 	ori	r17,r17,16
 c008090:	8880080c 	andi	r2,r17,32
 c008094:	1000641e 	bne	r2,zero,c008228 <___vfiprintf_internal_r+0xb10>
 c008098:	8880040c 	andi	r2,r17,16
 c00809c:	1001c81e 	bne	r2,zero,c0087c0 <___vfiprintf_internal_r+0x10a8>
 c0080a0:	8880100c 	andi	r2,r17,64
 c0080a4:	d8001d85 	stb	zero,118(sp)
 c0080a8:	1002281e 	bne	r2,zero,c00894c <___vfiprintf_internal_r+0x1234>
 c0080ac:	d9002217 	ldw	r4,136(sp)
 c0080b0:	0029883a 	mov	r20,zero
 c0080b4:	20800104 	addi	r2,r4,4
 c0080b8:	24c00017 	ldw	r19,0(r4)
 c0080bc:	8001c60e 	bge	r16,zero,c0087d8 <___vfiprintf_internal_r+0x10c0>
 c0080c0:	d8802215 	stw	r2,136(sp)
 c0080c4:	002b883a 	mov	r21,zero
 c0080c8:	9d04b03a 	or	r2,r19,r20
 c0080cc:	103f911e 	bne	r2,zero,c007f14 <__alt_data_end+0xfc007f14>
 c0080d0:	00800044 	movi	r2,1
 c0080d4:	10803fcc 	andi	r2,r2,255
 c0080d8:	00c00044 	movi	r3,1
 c0080dc:	10c05f26 	beq	r2,r3,c00825c <___vfiprintf_internal_r+0xb44>
 c0080e0:	00c00084 	movi	r3,2
 c0080e4:	10ffe31e 	bne	r2,r3,c008074 <__alt_data_end+0xfc008074>
 c0080e8:	0027883a 	mov	r19,zero
 c0080ec:	0029883a 	mov	r20,zero
 c0080f0:	00015106 	br	c008638 <___vfiprintf_internal_r+0xf20>
 c0080f4:	9cc03fcc 	andi	r19,r19,255
 c0080f8:	b811883a 	mov	r8,r23
 c0080fc:	9802c01e 	bne	r19,zero,c008c00 <___vfiprintf_internal_r+0x14e8>
 c008100:	01430074 	movhi	r5,3073
 c008104:	29409004 	addi	r5,r5,576
 c008108:	d9402615 	stw	r5,152(sp)
 c00810c:	8880080c 	andi	r2,r17,32
 c008110:	103f541e 	bne	r2,zero,c007e64 <__alt_data_end+0xfc007e64>
 c008114:	8880040c 	andi	r2,r17,16
 c008118:	1001f226 	beq	r2,zero,c0088e4 <___vfiprintf_internal_r+0x11cc>
 c00811c:	d9402217 	ldw	r5,136(sp)
 c008120:	0029883a 	mov	r20,zero
 c008124:	2cc00017 	ldw	r19,0(r5)
 c008128:	29400104 	addi	r5,r5,4
 c00812c:	d9402215 	stw	r5,136(sp)
 c008130:	003f5106 	br	c007e78 <__alt_data_end+0xfc007e78>
 c008134:	d8c02217 	ldw	r3,136(sp)
 c008138:	b811883a 	mov	r8,r23
 c00813c:	d8001d85 	stb	zero,118(sp)
 c008140:	1dc00017 	ldw	r23,0(r3)
 c008144:	1f000104 	addi	fp,r3,4
 c008148:	b8025926 	beq	r23,zero,c008ab0 <___vfiprintf_internal_r+0x1398>
 c00814c:	80023316 	blt	r16,zero,c008a1c <___vfiprintf_internal_r+0x1304>
 c008150:	800d883a 	mov	r6,r16
 c008154:	000b883a 	mov	r5,zero
 c008158:	b809883a 	mov	r4,r23
 c00815c:	da002a15 	stw	r8,168(sp)
 c008160:	c005fc80 	call	c005fc8 <memchr>
 c008164:	da002a17 	ldw	r8,168(sp)
 c008168:	10026826 	beq	r2,zero,c008b0c <___vfiprintf_internal_r+0x13f4>
 c00816c:	15e9c83a 	sub	r20,r2,r23
 c008170:	dd401d83 	ldbu	r21,118(sp)
 c008174:	df002215 	stw	fp,136(sp)
 c008178:	0021883a 	mov	r16,zero
 c00817c:	003e6906 	br	c007b24 <__alt_data_end+0xfc007b24>
 c008180:	9cc03fcc 	andi	r19,r19,255
 c008184:	b811883a 	mov	r8,r23
 c008188:	983fc126 	beq	r19,zero,c008090 <__alt_data_end+0xfc008090>
 c00818c:	d8c02303 	ldbu	r3,140(sp)
 c008190:	d8c01d85 	stb	r3,118(sp)
 c008194:	003fbe06 	br	c008090 <__alt_data_end+0xfc008090>
 c008198:	d9002217 	ldw	r4,136(sp)
 c00819c:	d9402217 	ldw	r5,136(sp)
 c0081a0:	21000017 	ldw	r4,0(r4)
 c0081a4:	28800104 	addi	r2,r5,4
 c0081a8:	d9002515 	stw	r4,148(sp)
 c0081ac:	203e3d16 	blt	r4,zero,c007aa4 <__alt_data_end+0xfc007aa4>
 c0081b0:	d8802215 	stw	r2,136(sp)
 c0081b4:	b0c00007 	ldb	r3,0(r22)
 c0081b8:	003db406 	br	c00788c <__alt_data_end+0xfc00788c>
 c0081bc:	00c00ac4 	movi	r3,43
 c0081c0:	d8c02305 	stb	r3,140(sp)
 c0081c4:	04c00044 	movi	r19,1
 c0081c8:	b0c00007 	ldb	r3,0(r22)
 c0081cc:	003daf06 	br	c00788c <__alt_data_end+0xfc00788c>
 c0081d0:	b0c00007 	ldb	r3,0(r22)
 c0081d4:	01000a84 	movi	r4,42
 c0081d8:	b4000044 	addi	r16,r22,1
 c0081dc:	19025e26 	beq	r3,r4,c008b58 <___vfiprintf_internal_r+0x1440>
 c0081e0:	1f3ff404 	addi	fp,r3,-48
 c0081e4:	0009883a 	mov	r4,zero
 c0081e8:	af025236 	bltu	r21,fp,c008b34 <___vfiprintf_internal_r+0x141c>
 c0081ec:	01400284 	movi	r5,10
 c0081f0:	c00097c0 	call	c00097c <__mulsi3>
 c0081f4:	80c00007 	ldb	r3,0(r16)
 c0081f8:	1709883a 	add	r4,r2,fp
 c0081fc:	85800044 	addi	r22,r16,1
 c008200:	1f3ff404 	addi	fp,r3,-48
 c008204:	b021883a 	mov	r16,r22
 c008208:	af3ff82e 	bgeu	r21,fp,c0081ec <__alt_data_end+0xfc0081ec>
 c00820c:	2021883a 	mov	r16,r4
 c008210:	203d9f0e 	bge	r4,zero,c007890 <__alt_data_end+0xfc007890>
 c008214:	043fffc4 	movi	r16,-1
 c008218:	003d9d06 	br	c007890 <__alt_data_end+0xfc007890>
 c00821c:	8c401014 	ori	r17,r17,64
 c008220:	b0c00007 	ldb	r3,0(r22)
 c008224:	003d9906 	br	c00788c <__alt_data_end+0xfc00788c>
 c008228:	d9002217 	ldw	r4,136(sp)
 c00822c:	d8001d85 	stb	zero,118(sp)
 c008230:	20c00204 	addi	r3,r4,8
 c008234:	24c00017 	ldw	r19,0(r4)
 c008238:	25000117 	ldw	r20,4(r4)
 c00823c:	8001e716 	blt	r16,zero,c0089dc <___vfiprintf_internal_r+0x12c4>
 c008240:	013fdfc4 	movi	r4,-129
 c008244:	9d04b03a 	or	r2,r19,r20
 c008248:	d8c02215 	stw	r3,136(sp)
 c00824c:	8922703a 	and	r17,r17,r4
 c008250:	002b883a 	mov	r21,zero
 c008254:	103f2f1e 	bne	r2,zero,c007f14 <__alt_data_end+0xfc007f14>
 c008258:	803e2f26 	beq	r16,zero,c007b18 <__alt_data_end+0xfc007b18>
 c00825c:	0027883a 	mov	r19,zero
 c008260:	9cc00c04 	addi	r19,r19,48
 c008264:	dcc019c5 	stb	r19,103(sp)
 c008268:	dd002817 	ldw	r20,160(sp)
 c00826c:	ddc019c4 	addi	r23,sp,103
 c008270:	003e2c06 	br	c007b24 <__alt_data_end+0xfc007b24>
 c008274:	9cc03fcc 	andi	r19,r19,255
 c008278:	b811883a 	mov	r8,r23
 c00827c:	9802571e 	bne	r19,zero,c008bdc <___vfiprintf_internal_r+0x14c4>
 c008280:	18005726 	beq	r3,zero,c0083e0 <___vfiprintf_internal_r+0xcc8>
 c008284:	04c00044 	movi	r19,1
 c008288:	d8c01005 	stb	r3,64(sp)
 c00828c:	d8001d85 	stb	zero,118(sp)
 c008290:	9829883a 	mov	r20,r19
 c008294:	ddc01004 	addi	r23,sp,64
 c008298:	003f0a06 	br	c007ec4 <__alt_data_end+0xfc007ec4>
 c00829c:	d9402017 	ldw	r5,128(sp)
 c0082a0:	d9002117 	ldw	r4,132(sp)
 c0082a4:	d9801a04 	addi	r6,sp,104
 c0082a8:	da802a15 	stw	r10,168(sp)
 c0082ac:	c0076040 	call	c007604 <__sprint_r.part.0>
 c0082b0:	da802a17 	ldw	r10,168(sp)
 c0082b4:	1000501e 	bne	r2,zero,c0083f8 <___vfiprintf_internal_r+0xce0>
 c0082b8:	d9801b17 	ldw	r6,108(sp)
 c0082bc:	d8801c17 	ldw	r2,112(sp)
 c0082c0:	d811883a 	mov	r8,sp
 c0082c4:	31000044 	addi	r4,r6,1
 c0082c8:	003e3606 	br	c007ba4 <__alt_data_end+0xfc007ba4>
 c0082cc:	d9001b17 	ldw	r4,108(sp)
 c0082d0:	d8801c17 	ldw	r2,112(sp)
 c0082d4:	21400044 	addi	r5,r4,1
 c0082d8:	d9801d87 	ldb	r6,118(sp)
 c0082dc:	303e5226 	beq	r6,zero,c007c28 <__alt_data_end+0xfc007c28>
 c0082e0:	01800044 	movi	r6,1
 c0082e4:	d9001d84 	addi	r4,sp,118
 c0082e8:	1185883a 	add	r2,r2,r6
 c0082ec:	41000015 	stw	r4,0(r8)
 c0082f0:	41800115 	stw	r6,4(r8)
 c0082f4:	d8801c15 	stw	r2,112(sp)
 c0082f8:	d9401b15 	stw	r5,108(sp)
 c0082fc:	010001c4 	movi	r4,7
 c008300:	2140b00e 	bge	r4,r5,c0085c4 <___vfiprintf_internal_r+0xeac>
 c008304:	1000f61e 	bne	r2,zero,c0086e0 <___vfiprintf_internal_r+0xfc8>
 c008308:	3800b31e 	bne	r7,zero,c0085d8 <___vfiprintf_internal_r+0xec0>
 c00830c:	0009883a 	mov	r4,zero
 c008310:	300b883a 	mov	r5,r6
 c008314:	d811883a 	mov	r8,sp
 c008318:	01802004 	movi	r6,128
 c00831c:	19be5226 	beq	r3,r6,c007c68 <__alt_data_end+0xfc007c68>
 c008320:	8521c83a 	sub	r16,r16,r20
 c008324:	043e790e 	bge	zero,r16,c007d0c <__alt_data_end+0xfc007d0c>
 c008328:	05400404 	movi	r21,16
 c00832c:	ac01b00e 	bge	r21,r16,c0089f0 <___vfiprintf_internal_r+0x12d8>
 c008330:	01430074 	movhi	r5,3073
 c008334:	2940f604 	addi	r5,r5,984
 c008338:	d9402315 	stw	r5,140(sp)
 c00833c:	070001c4 	movi	fp,7
 c008340:	00000506 	br	c008358 <___vfiprintf_internal_r+0xc40>
 c008344:	21400084 	addi	r5,r4,2
 c008348:	42000204 	addi	r8,r8,8
 c00834c:	1809883a 	mov	r4,r3
 c008350:	843ffc04 	addi	r16,r16,-16
 c008354:	ac000d0e 	bge	r21,r16,c00838c <___vfiprintf_internal_r+0xc74>
 c008358:	10800404 	addi	r2,r2,16
 c00835c:	20c00044 	addi	r3,r4,1
 c008360:	44800015 	stw	r18,0(r8)
 c008364:	45400115 	stw	r21,4(r8)
 c008368:	d8801c15 	stw	r2,112(sp)
 c00836c:	d8c01b15 	stw	r3,108(sp)
 c008370:	e0fff40e 	bge	fp,r3,c008344 <__alt_data_end+0xfc008344>
 c008374:	1000101e 	bne	r2,zero,c0083b8 <___vfiprintf_internal_r+0xca0>
 c008378:	843ffc04 	addi	r16,r16,-16
 c00837c:	01400044 	movi	r5,1
 c008380:	0009883a 	mov	r4,zero
 c008384:	d811883a 	mov	r8,sp
 c008388:	ac3ff316 	blt	r21,r16,c008358 <__alt_data_end+0xfc008358>
 c00838c:	d8c02317 	ldw	r3,140(sp)
 c008390:	1405883a 	add	r2,r2,r16
 c008394:	44000115 	stw	r16,4(r8)
 c008398:	40c00015 	stw	r3,0(r8)
 c00839c:	d8801c15 	stw	r2,112(sp)
 c0083a0:	d9401b15 	stw	r5,108(sp)
 c0083a4:	00c001c4 	movi	r3,7
 c0083a8:	19401916 	blt	r3,r5,c008410 <___vfiprintf_internal_r+0xcf8>
 c0083ac:	42000204 	addi	r8,r8,8
 c0083b0:	29400044 	addi	r5,r5,1
 c0083b4:	003e5506 	br	c007d0c <__alt_data_end+0xfc007d0c>
 c0083b8:	d9402017 	ldw	r5,128(sp)
 c0083bc:	d9002117 	ldw	r4,132(sp)
 c0083c0:	d9801a04 	addi	r6,sp,104
 c0083c4:	c0076040 	call	c007604 <__sprint_r.part.0>
 c0083c8:	10000b1e 	bne	r2,zero,c0083f8 <___vfiprintf_internal_r+0xce0>
 c0083cc:	d9001b17 	ldw	r4,108(sp)
 c0083d0:	d8801c17 	ldw	r2,112(sp)
 c0083d4:	d811883a 	mov	r8,sp
 c0083d8:	21400044 	addi	r5,r4,1
 c0083dc:	003fdc06 	br	c008350 <__alt_data_end+0xfc008350>
 c0083e0:	d8801c17 	ldw	r2,112(sp)
 c0083e4:	10000426 	beq	r2,zero,c0083f8 <___vfiprintf_internal_r+0xce0>
 c0083e8:	d9402017 	ldw	r5,128(sp)
 c0083ec:	d9002117 	ldw	r4,132(sp)
 c0083f0:	d9801a04 	addi	r6,sp,104
 c0083f4:	c0076040 	call	c007604 <__sprint_r.part.0>
 c0083f8:	d9402017 	ldw	r5,128(sp)
 c0083fc:	2880030b 	ldhu	r2,12(r5)
 c008400:	1080100c 	andi	r2,r2,64
 c008404:	10014d1e 	bne	r2,zero,c00893c <___vfiprintf_internal_r+0x1224>
 c008408:	d8802417 	ldw	r2,144(sp)
 c00840c:	003d9706 	br	c007a6c <__alt_data_end+0xfc007a6c>
 c008410:	1000d21e 	bne	r2,zero,c00875c <___vfiprintf_internal_r+0x1044>
 c008414:	00c00044 	movi	r3,1
 c008418:	a005883a 	mov	r2,r20
 c00841c:	ddc00015 	stw	r23,0(sp)
 c008420:	dd000115 	stw	r20,4(sp)
 c008424:	dd001c15 	stw	r20,112(sp)
 c008428:	d8c01b15 	stw	r3,108(sp)
 c00842c:	d811883a 	mov	r8,sp
 c008430:	42000204 	addi	r8,r8,8
 c008434:	8c40010c 	andi	r17,r17,4
 c008438:	88004026 	beq	r17,zero,c00853c <___vfiprintf_internal_r+0xe24>
 c00843c:	d9002517 	ldw	r4,148(sp)
 c008440:	24e3c83a 	sub	r17,r4,r19
 c008444:	04403d0e 	bge	zero,r17,c00853c <___vfiprintf_internal_r+0xe24>
 c008448:	04000404 	movi	r16,16
 c00844c:	8441a90e 	bge	r16,r17,c008af4 <___vfiprintf_internal_r+0x13dc>
 c008450:	00c30074 	movhi	r3,3073
 c008454:	18c0fa04 	addi	r3,r3,1000
 c008458:	d9001b17 	ldw	r4,108(sp)
 c00845c:	d8c02315 	stw	r3,140(sp)
 c008460:	050001c4 	movi	r20,7
 c008464:	dd402117 	ldw	r21,132(sp)
 c008468:	ddc02017 	ldw	r23,128(sp)
 c00846c:	00000506 	br	c008484 <___vfiprintf_internal_r+0xd6c>
 c008470:	21400084 	addi	r5,r4,2
 c008474:	42000204 	addi	r8,r8,8
 c008478:	1809883a 	mov	r4,r3
 c00847c:	8c7ffc04 	addi	r17,r17,-16
 c008480:	84400f0e 	bge	r16,r17,c0084c0 <___vfiprintf_internal_r+0xda8>
 c008484:	01430074 	movhi	r5,3073
 c008488:	10800404 	addi	r2,r2,16
 c00848c:	20c00044 	addi	r3,r4,1
 c008490:	2940fa04 	addi	r5,r5,1000
 c008494:	41400015 	stw	r5,0(r8)
 c008498:	44000115 	stw	r16,4(r8)
 c00849c:	d8801c15 	stw	r2,112(sp)
 c0084a0:	d8c01b15 	stw	r3,108(sp)
 c0084a4:	a0fff20e 	bge	r20,r3,c008470 <__alt_data_end+0xfc008470>
 c0084a8:	1000141e 	bne	r2,zero,c0084fc <___vfiprintf_internal_r+0xde4>
 c0084ac:	8c7ffc04 	addi	r17,r17,-16
 c0084b0:	01400044 	movi	r5,1
 c0084b4:	0009883a 	mov	r4,zero
 c0084b8:	d811883a 	mov	r8,sp
 c0084bc:	847ff116 	blt	r16,r17,c008484 <__alt_data_end+0xfc008484>
 c0084c0:	d8c02317 	ldw	r3,140(sp)
 c0084c4:	1445883a 	add	r2,r2,r17
 c0084c8:	44400115 	stw	r17,4(r8)
 c0084cc:	40c00015 	stw	r3,0(r8)
 c0084d0:	d8801c15 	stw	r2,112(sp)
 c0084d4:	d9401b15 	stw	r5,108(sp)
 c0084d8:	00c001c4 	movi	r3,7
 c0084dc:	1940170e 	bge	r3,r5,c00853c <___vfiprintf_internal_r+0xe24>
 c0084e0:	1000101e 	bne	r2,zero,c008524 <___vfiprintf_internal_r+0xe0c>
 c0084e4:	d8802517 	ldw	r2,148(sp)
 c0084e8:	14c11616 	blt	r2,r19,c008944 <___vfiprintf_internal_r+0x122c>
 c0084ec:	d9002417 	ldw	r4,144(sp)
 c0084f0:	2089883a 	add	r4,r4,r2
 c0084f4:	d9002415 	stw	r4,144(sp)
 c0084f8:	003e1806 	br	c007d5c <__alt_data_end+0xfc007d5c>
 c0084fc:	d9801a04 	addi	r6,sp,104
 c008500:	b80b883a 	mov	r5,r23
 c008504:	a809883a 	mov	r4,r21
 c008508:	c0076040 	call	c007604 <__sprint_r.part.0>
 c00850c:	103fba1e 	bne	r2,zero,c0083f8 <__alt_data_end+0xfc0083f8>
 c008510:	d9001b17 	ldw	r4,108(sp)
 c008514:	d8801c17 	ldw	r2,112(sp)
 c008518:	d811883a 	mov	r8,sp
 c00851c:	21400044 	addi	r5,r4,1
 c008520:	003fd606 	br	c00847c <__alt_data_end+0xfc00847c>
 c008524:	d9402017 	ldw	r5,128(sp)
 c008528:	d9002117 	ldw	r4,132(sp)
 c00852c:	d9801a04 	addi	r6,sp,104
 c008530:	c0076040 	call	c007604 <__sprint_r.part.0>
 c008534:	103fb01e 	bne	r2,zero,c0083f8 <__alt_data_end+0xfc0083f8>
 c008538:	d8801c17 	ldw	r2,112(sp)
 c00853c:	d8c02517 	ldw	r3,148(sp)
 c008540:	1cc0010e 	bge	r3,r19,c008548 <___vfiprintf_internal_r+0xe30>
 c008544:	9807883a 	mov	r3,r19
 c008548:	d9002417 	ldw	r4,144(sp)
 c00854c:	20c9883a 	add	r4,r4,r3
 c008550:	d9002415 	stw	r4,144(sp)
 c008554:	103e0126 	beq	r2,zero,c007d5c <__alt_data_end+0xfc007d5c>
 c008558:	d9402017 	ldw	r5,128(sp)
 c00855c:	d9002117 	ldw	r4,132(sp)
 c008560:	d9801a04 	addi	r6,sp,104
 c008564:	c0076040 	call	c007604 <__sprint_r.part.0>
 c008568:	103dfc26 	beq	r2,zero,c007d5c <__alt_data_end+0xfc007d5c>
 c00856c:	003fa206 	br	c0083f8 <__alt_data_end+0xfc0083f8>
 c008570:	d9402017 	ldw	r5,128(sp)
 c008574:	d9002117 	ldw	r4,132(sp)
 c008578:	d9801a04 	addi	r6,sp,104
 c00857c:	d9c02b15 	stw	r7,172(sp)
 c008580:	c0076040 	call	c007604 <__sprint_r.part.0>
 c008584:	d9c02b17 	ldw	r7,172(sp)
 c008588:	103f9b1e 	bne	r2,zero,c0083f8 <__alt_data_end+0xfc0083f8>
 c00858c:	d9001b17 	ldw	r4,108(sp)
 c008590:	d8801c17 	ldw	r2,112(sp)
 c008594:	d811883a 	mov	r8,sp
 c008598:	21800044 	addi	r6,r4,1
 c00859c:	003dbf06 	br	c007c9c <__alt_data_end+0xfc007c9c>
 c0085a0:	1000d81e 	bne	r2,zero,c008904 <___vfiprintf_internal_r+0x11ec>
 c0085a4:	d9001d87 	ldb	r4,118(sp)
 c0085a8:	20000a26 	beq	r4,zero,c0085d4 <___vfiprintf_internal_r+0xebc>
 c0085ac:	00800044 	movi	r2,1
 c0085b0:	d9001d84 	addi	r4,sp,118
 c0085b4:	100b883a 	mov	r5,r2
 c0085b8:	d9000015 	stw	r4,0(sp)
 c0085bc:	d8800115 	stw	r2,4(sp)
 c0085c0:	d811883a 	mov	r8,sp
 c0085c4:	2809883a 	mov	r4,r5
 c0085c8:	42000204 	addi	r8,r8,8
 c0085cc:	29400044 	addi	r5,r5,1
 c0085d0:	003d9506 	br	c007c28 <__alt_data_end+0xfc007c28>
 c0085d4:	3800fd26 	beq	r7,zero,c0089cc <___vfiprintf_internal_r+0x12b4>
 c0085d8:	00800084 	movi	r2,2
 c0085dc:	d9001d04 	addi	r4,sp,116
 c0085e0:	d9000015 	stw	r4,0(sp)
 c0085e4:	d8800115 	stw	r2,4(sp)
 c0085e8:	01400044 	movi	r5,1
 c0085ec:	d811883a 	mov	r8,sp
 c0085f0:	2809883a 	mov	r4,r5
 c0085f4:	42000204 	addi	r8,r8,8
 c0085f8:	29400044 	addi	r5,r5,1
 c0085fc:	003f4606 	br	c008318 <__alt_data_end+0xfc008318>
 c008600:	d8802517 	ldw	r2,148(sp)
 c008604:	14c0010e 	bge	r2,r19,c00860c <___vfiprintf_internal_r+0xef4>
 c008608:	9805883a 	mov	r2,r19
 c00860c:	d9402417 	ldw	r5,144(sp)
 c008610:	288b883a 	add	r5,r5,r2
 c008614:	d9402415 	stw	r5,144(sp)
 c008618:	003dd006 	br	c007d5c <__alt_data_end+0xfc007d5c>
 c00861c:	d8001d85 	stb	zero,118(sp)
 c008620:	80005d16 	blt	r16,zero,c008798 <___vfiprintf_internal_r+0x1080>
 c008624:	00ffdfc4 	movi	r3,-129
 c008628:	9d04b03a 	or	r2,r19,r20
 c00862c:	88e2703a 	and	r17,r17,r3
 c008630:	103d3726 	beq	r2,zero,c007b10 <__alt_data_end+0xfc007b10>
 c008634:	002b883a 	mov	r21,zero
 c008638:	d9002617 	ldw	r4,152(sp)
 c00863c:	ddc01a04 	addi	r23,sp,104
 c008640:	988003cc 	andi	r2,r19,15
 c008644:	a006973a 	slli	r3,r20,28
 c008648:	2085883a 	add	r2,r4,r2
 c00864c:	9826d13a 	srli	r19,r19,4
 c008650:	10800003 	ldbu	r2,0(r2)
 c008654:	a028d13a 	srli	r20,r20,4
 c008658:	bdffffc4 	addi	r23,r23,-1
 c00865c:	1ce6b03a 	or	r19,r3,r19
 c008660:	b8800005 	stb	r2,0(r23)
 c008664:	9d04b03a 	or	r2,r19,r20
 c008668:	103ff51e 	bne	r2,zero,c008640 <__alt_data_end+0xfc008640>
 c00866c:	d8801e17 	ldw	r2,120(sp)
 c008670:	15e9c83a 	sub	r20,r2,r23
 c008674:	003d2b06 	br	c007b24 <__alt_data_end+0xfc007b24>
 c008678:	d9402017 	ldw	r5,128(sp)
 c00867c:	d9002117 	ldw	r4,132(sp)
 c008680:	d9801a04 	addi	r6,sp,104
 c008684:	c0076040 	call	c007604 <__sprint_r.part.0>
 c008688:	103f5b1e 	bne	r2,zero,c0083f8 <__alt_data_end+0xfc0083f8>
 c00868c:	d8801c17 	ldw	r2,112(sp)
 c008690:	d811883a 	mov	r8,sp
 c008694:	003f6706 	br	c008434 <__alt_data_end+0xfc008434>
 c008698:	d9402017 	ldw	r5,128(sp)
 c00869c:	d9002117 	ldw	r4,132(sp)
 c0086a0:	d9801a04 	addi	r6,sp,104
 c0086a4:	c0076040 	call	c007604 <__sprint_r.part.0>
 c0086a8:	103f531e 	bne	r2,zero,c0083f8 <__alt_data_end+0xfc0083f8>
 c0086ac:	d811883a 	mov	r8,sp
 c0086b0:	003cd906 	br	c007a18 <__alt_data_end+0xfc007a18>
 c0086b4:	10803fcc 	andi	r2,r2,255
 c0086b8:	1080201c 	xori	r2,r2,128
 c0086bc:	10bfe004 	addi	r2,r2,-128
 c0086c0:	00c00c04 	movi	r3,48
 c0086c4:	10ffe926 	beq	r2,r3,c00866c <__alt_data_end+0xfc00866c>
 c0086c8:	b8ffffc5 	stb	r3,-1(r23)
 c0086cc:	d8c01e17 	ldw	r3,120(sp)
 c0086d0:	b8bfffc4 	addi	r2,r23,-1
 c0086d4:	102f883a 	mov	r23,r2
 c0086d8:	18a9c83a 	sub	r20,r3,r2
 c0086dc:	003d1106 	br	c007b24 <__alt_data_end+0xfc007b24>
 c0086e0:	d9402017 	ldw	r5,128(sp)
 c0086e4:	d9002117 	ldw	r4,132(sp)
 c0086e8:	d9801a04 	addi	r6,sp,104
 c0086ec:	d8c02a15 	stw	r3,168(sp)
 c0086f0:	d9c02b15 	stw	r7,172(sp)
 c0086f4:	c0076040 	call	c007604 <__sprint_r.part.0>
 c0086f8:	d8c02a17 	ldw	r3,168(sp)
 c0086fc:	d9c02b17 	ldw	r7,172(sp)
 c008700:	103f3d1e 	bne	r2,zero,c0083f8 <__alt_data_end+0xfc0083f8>
 c008704:	d9001b17 	ldw	r4,108(sp)
 c008708:	d8801c17 	ldw	r2,112(sp)
 c00870c:	d811883a 	mov	r8,sp
 c008710:	21400044 	addi	r5,r4,1
 c008714:	003d4406 	br	c007c28 <__alt_data_end+0xfc007c28>
 c008718:	d9402017 	ldw	r5,128(sp)
 c00871c:	d9002117 	ldw	r4,132(sp)
 c008720:	d9801a04 	addi	r6,sp,104
 c008724:	d8c02a15 	stw	r3,168(sp)
 c008728:	c0076040 	call	c007604 <__sprint_r.part.0>
 c00872c:	d8c02a17 	ldw	r3,168(sp)
 c008730:	103f311e 	bne	r2,zero,c0083f8 <__alt_data_end+0xfc0083f8>
 c008734:	d9001b17 	ldw	r4,108(sp)
 c008738:	d8801c17 	ldw	r2,112(sp)
 c00873c:	d811883a 	mov	r8,sp
 c008740:	21400044 	addi	r5,r4,1
 c008744:	003ef406 	br	c008318 <__alt_data_end+0xfc008318>
 c008748:	1000bd1e 	bne	r2,zero,c008a40 <___vfiprintf_internal_r+0x1328>
 c00874c:	01400044 	movi	r5,1
 c008750:	0009883a 	mov	r4,zero
 c008754:	d811883a 	mov	r8,sp
 c008758:	003ef106 	br	c008320 <__alt_data_end+0xfc008320>
 c00875c:	d9402017 	ldw	r5,128(sp)
 c008760:	d9002117 	ldw	r4,132(sp)
 c008764:	d9801a04 	addi	r6,sp,104
 c008768:	c0076040 	call	c007604 <__sprint_r.part.0>
 c00876c:	103f221e 	bne	r2,zero,c0083f8 <__alt_data_end+0xfc0083f8>
 c008770:	d9401b17 	ldw	r5,108(sp)
 c008774:	d8801c17 	ldw	r2,112(sp)
 c008778:	d811883a 	mov	r8,sp
 c00877c:	29400044 	addi	r5,r5,1
 c008780:	003d6206 	br	c007d0c <__alt_data_end+0xfc007d0c>
 c008784:	01430074 	movhi	r5,3073
 c008788:	29409504 	addi	r5,r5,596
 c00878c:	d9402615 	stw	r5,152(sp)
 c008790:	d8c02215 	stw	r3,136(sp)
 c008794:	1023883a 	mov	r17,r2
 c008798:	9d04b03a 	or	r2,r19,r20
 c00879c:	103fa51e 	bne	r2,zero,c008634 <__alt_data_end+0xfc008634>
 c0087a0:	002b883a 	mov	r21,zero
 c0087a4:	00800084 	movi	r2,2
 c0087a8:	003e4a06 	br	c0080d4 <__alt_data_end+0xfc0080d4>
 c0087ac:	01430074 	movhi	r5,3073
 c0087b0:	29409504 	addi	r5,r5,596
 c0087b4:	002b883a 	mov	r21,zero
 c0087b8:	d9402615 	stw	r5,152(sp)
 c0087bc:	003f9e06 	br	c008638 <__alt_data_end+0xfc008638>
 c0087c0:	d9402217 	ldw	r5,136(sp)
 c0087c4:	d8001d85 	stb	zero,118(sp)
 c0087c8:	0029883a 	mov	r20,zero
 c0087cc:	28800104 	addi	r2,r5,4
 c0087d0:	2cc00017 	ldw	r19,0(r5)
 c0087d4:	803e3a16 	blt	r16,zero,c0080c0 <__alt_data_end+0xfc0080c0>
 c0087d8:	00ffdfc4 	movi	r3,-129
 c0087dc:	d8802215 	stw	r2,136(sp)
 c0087e0:	88e2703a 	and	r17,r17,r3
 c0087e4:	002b883a 	mov	r21,zero
 c0087e8:	983e9b26 	beq	r19,zero,c008258 <__alt_data_end+0xfc008258>
 c0087ec:	00800244 	movi	r2,9
 c0087f0:	14fdc936 	bltu	r2,r19,c007f18 <__alt_data_end+0xfc007f18>
 c0087f4:	003e9a06 	br	c008260 <__alt_data_end+0xfc008260>
 c0087f8:	00800c04 	movi	r2,48
 c0087fc:	d8c01d45 	stb	r3,117(sp)
 c008800:	d8801d05 	stb	r2,116(sp)
 c008804:	d8001d85 	stb	zero,118(sp)
 c008808:	88c00094 	ori	r3,r17,2
 c00880c:	80009c16 	blt	r16,zero,c008a80 <___vfiprintf_internal_r+0x1368>
 c008810:	00bfdfc4 	movi	r2,-129
 c008814:	88a2703a 	and	r17,r17,r2
 c008818:	8c400094 	ori	r17,r17,2
 c00881c:	002b883a 	mov	r21,zero
 c008820:	003f8506 	br	c008638 <__alt_data_end+0xfc008638>
 c008824:	b029883a 	mov	r20,r22
 c008828:	003c0b06 	br	c007858 <__alt_data_end+0xfc007858>
 c00882c:	04e7c83a 	sub	r19,zero,r19
 c008830:	05400b44 	movi	r21,45
 c008834:	9804c03a 	cmpne	r2,r19,zero
 c008838:	0529c83a 	sub	r20,zero,r20
 c00883c:	dd401d85 	stb	r21,118(sp)
 c008840:	a0a9c83a 	sub	r20,r20,r2
 c008844:	80009716 	blt	r16,zero,c008aa4 <___vfiprintf_internal_r+0x138c>
 c008848:	00bfdfc4 	movi	r2,-129
 c00884c:	88a2703a 	and	r17,r17,r2
 c008850:	003db006 	br	c007f14 <__alt_data_end+0xfc007f14>
 c008854:	b0c00007 	ldb	r3,0(r22)
 c008858:	003c0c06 	br	c00788c <__alt_data_end+0xfc00788c>
 c00885c:	8880100c 	andi	r2,r17,64
 c008860:	d8001d85 	stb	zero,118(sp)
 c008864:	1000461e 	bne	r2,zero,c008980 <___vfiprintf_internal_r+0x1268>
 c008868:	d9002217 	ldw	r4,136(sp)
 c00886c:	0029883a 	mov	r20,zero
 c008870:	20800104 	addi	r2,r4,4
 c008874:	24c00017 	ldw	r19,0(r4)
 c008878:	803df80e 	bge	r16,zero,c00805c <__alt_data_end+0xfc00805c>
 c00887c:	9d06b03a 	or	r3,r19,r20
 c008880:	d8802215 	stw	r2,136(sp)
 c008884:	183d5e1e 	bne	r3,zero,c007e00 <__alt_data_end+0xfc007e00>
 c008888:	002b883a 	mov	r21,zero
 c00888c:	0005883a 	mov	r2,zero
 c008890:	003e1006 	br	c0080d4 <__alt_data_end+0xfc0080d4>
 c008894:	8880040c 	andi	r2,r17,16
 c008898:	1000321e 	bne	r2,zero,c008964 <___vfiprintf_internal_r+0x124c>
 c00889c:	8c40100c 	andi	r17,r17,64
 c0088a0:	88008d26 	beq	r17,zero,c008ad8 <___vfiprintf_internal_r+0x13c0>
 c0088a4:	d9402217 	ldw	r5,136(sp)
 c0088a8:	d8c02417 	ldw	r3,144(sp)
 c0088ac:	28800017 	ldw	r2,0(r5)
 c0088b0:	29400104 	addi	r5,r5,4
 c0088b4:	d9402215 	stw	r5,136(sp)
 c0088b8:	10c0000d 	sth	r3,0(r2)
 c0088bc:	003bca06 	br	c0077e8 <__alt_data_end+0xfc0077e8>
 c0088c0:	8880100c 	andi	r2,r17,64
 c0088c4:	10003a26 	beq	r2,zero,c0089b0 <___vfiprintf_internal_r+0x1298>
 c0088c8:	d8802217 	ldw	r2,136(sp)
 c0088cc:	14c0000f 	ldh	r19,0(r2)
 c0088d0:	10800104 	addi	r2,r2,4
 c0088d4:	d8802215 	stw	r2,136(sp)
 c0088d8:	9829d7fa 	srai	r20,r19,31
 c0088dc:	a005883a 	mov	r2,r20
 c0088e0:	003d8506 	br	c007ef8 <__alt_data_end+0xfc007ef8>
 c0088e4:	8880100c 	andi	r2,r17,64
 c0088e8:	10002b26 	beq	r2,zero,c008998 <___vfiprintf_internal_r+0x1280>
 c0088ec:	d8802217 	ldw	r2,136(sp)
 c0088f0:	0029883a 	mov	r20,zero
 c0088f4:	14c0000b 	ldhu	r19,0(r2)
 c0088f8:	10800104 	addi	r2,r2,4
 c0088fc:	d8802215 	stw	r2,136(sp)
 c008900:	003d5d06 	br	c007e78 <__alt_data_end+0xfc007e78>
 c008904:	d9402017 	ldw	r5,128(sp)
 c008908:	d9002117 	ldw	r4,132(sp)
 c00890c:	d9801a04 	addi	r6,sp,104
 c008910:	d8c02a15 	stw	r3,168(sp)
 c008914:	d9c02b15 	stw	r7,172(sp)
 c008918:	c0076040 	call	c007604 <__sprint_r.part.0>
 c00891c:	d8c02a17 	ldw	r3,168(sp)
 c008920:	d9c02b17 	ldw	r7,172(sp)
 c008924:	103eb41e 	bne	r2,zero,c0083f8 <__alt_data_end+0xfc0083f8>
 c008928:	d9001b17 	ldw	r4,108(sp)
 c00892c:	d8801c17 	ldw	r2,112(sp)
 c008930:	d811883a 	mov	r8,sp
 c008934:	21400044 	addi	r5,r4,1
 c008938:	003e6706 	br	c0082d8 <__alt_data_end+0xfc0082d8>
 c00893c:	00bfffc4 	movi	r2,-1
 c008940:	003c4a06 	br	c007a6c <__alt_data_end+0xfc007a6c>
 c008944:	9805883a 	mov	r2,r19
 c008948:	003ee806 	br	c0084ec <__alt_data_end+0xfc0084ec>
 c00894c:	d8c02217 	ldw	r3,136(sp)
 c008950:	0029883a 	mov	r20,zero
 c008954:	18800104 	addi	r2,r3,4
 c008958:	1cc0000b 	ldhu	r19,0(r3)
 c00895c:	803f9e0e 	bge	r16,zero,c0087d8 <__alt_data_end+0xfc0087d8>
 c008960:	003dd706 	br	c0080c0 <__alt_data_end+0xfc0080c0>
 c008964:	d8c02217 	ldw	r3,136(sp)
 c008968:	d9002417 	ldw	r4,144(sp)
 c00896c:	18800017 	ldw	r2,0(r3)
 c008970:	18c00104 	addi	r3,r3,4
 c008974:	d8c02215 	stw	r3,136(sp)
 c008978:	11000015 	stw	r4,0(r2)
 c00897c:	003b9a06 	br	c0077e8 <__alt_data_end+0xfc0077e8>
 c008980:	d8c02217 	ldw	r3,136(sp)
 c008984:	0029883a 	mov	r20,zero
 c008988:	18800104 	addi	r2,r3,4
 c00898c:	1cc0000b 	ldhu	r19,0(r3)
 c008990:	803db20e 	bge	r16,zero,c00805c <__alt_data_end+0xfc00805c>
 c008994:	003fb906 	br	c00887c <__alt_data_end+0xfc00887c>
 c008998:	d9002217 	ldw	r4,136(sp)
 c00899c:	0029883a 	mov	r20,zero
 c0089a0:	24c00017 	ldw	r19,0(r4)
 c0089a4:	21000104 	addi	r4,r4,4
 c0089a8:	d9002215 	stw	r4,136(sp)
 c0089ac:	003d3206 	br	c007e78 <__alt_data_end+0xfc007e78>
 c0089b0:	d8c02217 	ldw	r3,136(sp)
 c0089b4:	1cc00017 	ldw	r19,0(r3)
 c0089b8:	18c00104 	addi	r3,r3,4
 c0089bc:	d8c02215 	stw	r3,136(sp)
 c0089c0:	9829d7fa 	srai	r20,r19,31
 c0089c4:	a005883a 	mov	r2,r20
 c0089c8:	003d4b06 	br	c007ef8 <__alt_data_end+0xfc007ef8>
 c0089cc:	0009883a 	mov	r4,zero
 c0089d0:	01400044 	movi	r5,1
 c0089d4:	d811883a 	mov	r8,sp
 c0089d8:	003e4f06 	br	c008318 <__alt_data_end+0xfc008318>
 c0089dc:	d8c02215 	stw	r3,136(sp)
 c0089e0:	002b883a 	mov	r21,zero
 c0089e4:	003db806 	br	c0080c8 <__alt_data_end+0xfc0080c8>
 c0089e8:	d811883a 	mov	r8,sp
 c0089ec:	003e9606 	br	c008448 <__alt_data_end+0xfc008448>
 c0089f0:	01030074 	movhi	r4,3073
 c0089f4:	2100f604 	addi	r4,r4,984
 c0089f8:	d9002315 	stw	r4,140(sp)
 c0089fc:	003e6306 	br	c00838c <__alt_data_end+0xfc00838c>
 c008a00:	b0c00043 	ldbu	r3,1(r22)
 c008a04:	8c400814 	ori	r17,r17,32
 c008a08:	b5800044 	addi	r22,r22,1
 c008a0c:	18c03fcc 	andi	r3,r3,255
 c008a10:	18c0201c 	xori	r3,r3,128
 c008a14:	18ffe004 	addi	r3,r3,-128
 c008a18:	003b9c06 	br	c00788c <__alt_data_end+0xfc00788c>
 c008a1c:	b809883a 	mov	r4,r23
 c008a20:	da002a15 	stw	r8,168(sp)
 c008a24:	c00756c0 	call	c00756c <strlen>
 c008a28:	1029883a 	mov	r20,r2
 c008a2c:	dd401d83 	ldbu	r21,118(sp)
 c008a30:	df002215 	stw	fp,136(sp)
 c008a34:	0021883a 	mov	r16,zero
 c008a38:	da002a17 	ldw	r8,168(sp)
 c008a3c:	003c3906 	br	c007b24 <__alt_data_end+0xfc007b24>
 c008a40:	d9402017 	ldw	r5,128(sp)
 c008a44:	d9002117 	ldw	r4,132(sp)
 c008a48:	d9801a04 	addi	r6,sp,104
 c008a4c:	c0076040 	call	c007604 <__sprint_r.part.0>
 c008a50:	103e691e 	bne	r2,zero,c0083f8 <__alt_data_end+0xfc0083f8>
 c008a54:	d9001b17 	ldw	r4,108(sp)
 c008a58:	d8801c17 	ldw	r2,112(sp)
 c008a5c:	d811883a 	mov	r8,sp
 c008a60:	21400044 	addi	r5,r4,1
 c008a64:	003e2e06 	br	c008320 <__alt_data_end+0xfc008320>
 c008a68:	01030074 	movhi	r4,3073
 c008a6c:	2100fa04 	addi	r4,r4,1000
 c008a70:	d9002315 	stw	r4,140(sp)
 c008a74:	d9001b17 	ldw	r4,108(sp)
 c008a78:	21000044 	addi	r4,r4,1
 c008a7c:	003c5e06 	br	c007bf8 <__alt_data_end+0xfc007bf8>
 c008a80:	002b883a 	mov	r21,zero
 c008a84:	00800084 	movi	r2,2
 c008a88:	10803fcc 	andi	r2,r2,255
 c008a8c:	01000044 	movi	r4,1
 c008a90:	11002b26 	beq	r2,r4,c008b40 <___vfiprintf_internal_r+0x1428>
 c008a94:	01000084 	movi	r4,2
 c008a98:	11002b1e 	bne	r2,r4,c008b48 <___vfiprintf_internal_r+0x1430>
 c008a9c:	1823883a 	mov	r17,r3
 c008aa0:	003ee506 	br	c008638 <__alt_data_end+0xfc008638>
 c008aa4:	8807883a 	mov	r3,r17
 c008aa8:	00800044 	movi	r2,1
 c008aac:	003ff606 	br	c008a88 <__alt_data_end+0xfc008a88>
 c008ab0:	00800184 	movi	r2,6
 c008ab4:	1400012e 	bgeu	r2,r16,c008abc <___vfiprintf_internal_r+0x13a4>
 c008ab8:	1021883a 	mov	r16,r2
 c008abc:	8029883a 	mov	r20,r16
 c008ac0:	8027883a 	mov	r19,r16
 c008ac4:	80002216 	blt	r16,zero,c008b50 <___vfiprintf_internal_r+0x1438>
 c008ac8:	05c30074 	movhi	r23,3073
 c008acc:	df002215 	stw	fp,136(sp)
 c008ad0:	bdc09a04 	addi	r23,r23,616
 c008ad4:	003cfb06 	br	c007ec4 <__alt_data_end+0xfc007ec4>
 c008ad8:	d9002217 	ldw	r4,136(sp)
 c008adc:	d9402417 	ldw	r5,144(sp)
 c008ae0:	20800017 	ldw	r2,0(r4)
 c008ae4:	21000104 	addi	r4,r4,4
 c008ae8:	d9002215 	stw	r4,136(sp)
 c008aec:	11400015 	stw	r5,0(r2)
 c008af0:	003b3d06 	br	c0077e8 <__alt_data_end+0xfc0077e8>
 c008af4:	01430074 	movhi	r5,3073
 c008af8:	2940fa04 	addi	r5,r5,1000
 c008afc:	d9402315 	stw	r5,140(sp)
 c008b00:	d9401b17 	ldw	r5,108(sp)
 c008b04:	29400044 	addi	r5,r5,1
 c008b08:	003e6d06 	br	c0084c0 <__alt_data_end+0xfc0084c0>
 c008b0c:	8029883a 	mov	r20,r16
 c008b10:	dd401d83 	ldbu	r21,118(sp)
 c008b14:	df002215 	stw	fp,136(sp)
 c008b18:	0021883a 	mov	r16,zero
 c008b1c:	003c0106 	br	c007b24 <__alt_data_end+0xfc007b24>
 c008b20:	00c30074 	movhi	r3,3073
 c008b24:	18c0f604 	addi	r3,r3,984
 c008b28:	d8c02315 	stw	r3,140(sp)
 c008b2c:	280d883a 	mov	r6,r5
 c008b30:	003c6906 	br	c007cd8 <__alt_data_end+0xfc007cd8>
 c008b34:	802d883a 	mov	r22,r16
 c008b38:	0021883a 	mov	r16,zero
 c008b3c:	003b5406 	br	c007890 <__alt_data_end+0xfc007890>
 c008b40:	1823883a 	mov	r17,r3
 c008b44:	003cf306 	br	c007f14 <__alt_data_end+0xfc007f14>
 c008b48:	1823883a 	mov	r17,r3
 c008b4c:	003cad06 	br	c007e04 <__alt_data_end+0xfc007e04>
 c008b50:	0027883a 	mov	r19,zero
 c008b54:	003fdc06 	br	c008ac8 <__alt_data_end+0xfc008ac8>
 c008b58:	d9402217 	ldw	r5,136(sp)
 c008b5c:	8005883a 	mov	r2,r16
 c008b60:	b0c00043 	ldbu	r3,1(r22)
 c008b64:	2c000017 	ldw	r16,0(r5)
 c008b68:	29000104 	addi	r4,r5,4
 c008b6c:	d9002215 	stw	r4,136(sp)
 c008b70:	102d883a 	mov	r22,r2
 c008b74:	803fa50e 	bge	r16,zero,c008a0c <__alt_data_end+0xfc008a0c>
 c008b78:	18c03fcc 	andi	r3,r3,255
 c008b7c:	18c0201c 	xori	r3,r3,128
 c008b80:	043fffc4 	movi	r16,-1
 c008b84:	18ffe004 	addi	r3,r3,-128
 c008b88:	003b4006 	br	c00788c <__alt_data_end+0xfc00788c>
 c008b8c:	d9402303 	ldbu	r5,140(sp)
 c008b90:	d9401d85 	stb	r5,118(sp)
 c008b94:	003cae06 	br	c007e50 <__alt_data_end+0xfc007e50>
 c008b98:	d8c02303 	ldbu	r3,140(sp)
 c008b9c:	d8c01d85 	stb	r3,118(sp)
 c008ba0:	003d1406 	br	c007ff4 <__alt_data_end+0xfc007ff4>
 c008ba4:	d8c02303 	ldbu	r3,140(sp)
 c008ba8:	d8c01d85 	stb	r3,118(sp)
 c008bac:	003cca06 	br	c007ed8 <__alt_data_end+0xfc007ed8>
 c008bb0:	8880004c 	andi	r2,r17,1
 c008bb4:	002b883a 	mov	r21,zero
 c008bb8:	10000526 	beq	r2,zero,c008bd0 <___vfiprintf_internal_r+0x14b8>
 c008bbc:	00800c04 	movi	r2,48
 c008bc0:	d88019c5 	stb	r2,103(sp)
 c008bc4:	dd002817 	ldw	r20,160(sp)
 c008bc8:	ddc019c4 	addi	r23,sp,103
 c008bcc:	003bd506 	br	c007b24 <__alt_data_end+0xfc007b24>
 c008bd0:	0029883a 	mov	r20,zero
 c008bd4:	ddc01a04 	addi	r23,sp,104
 c008bd8:	003bd206 	br	c007b24 <__alt_data_end+0xfc007b24>
 c008bdc:	d9002303 	ldbu	r4,140(sp)
 c008be0:	d9001d85 	stb	r4,118(sp)
 c008be4:	003da606 	br	c008280 <__alt_data_end+0xfc008280>
 c008be8:	d8c02303 	ldbu	r3,140(sp)
 c008bec:	d8c01d85 	stb	r3,118(sp)
 c008bf0:	003c7606 	br	c007dcc <__alt_data_end+0xfc007dcc>
 c008bf4:	d8c02303 	ldbu	r3,140(sp)
 c008bf8:	d8c01d85 	stb	r3,118(sp)
 c008bfc:	003c6506 	br	c007d94 <__alt_data_end+0xfc007d94>
 c008c00:	d9002303 	ldbu	r4,140(sp)
 c008c04:	d9001d85 	stb	r4,118(sp)
 c008c08:	003d3d06 	br	c008100 <__alt_data_end+0xfc008100>
 c008c0c:	d8c02303 	ldbu	r3,140(sp)
 c008c10:	d8c01d85 	stb	r3,118(sp)
 c008c14:	003d1d06 	br	c00808c <__alt_data_end+0xfc00808c>
 c008c18:	d8c02303 	ldbu	r3,140(sp)
 c008c1c:	d8c01d85 	stb	r3,118(sp)
 c008c20:	003d0306 	br	c008030 <__alt_data_end+0xfc008030>

0c008c24 <__vfiprintf_internal>:
 c008c24:	00830074 	movhi	r2,3073
 c008c28:	1087f904 	addi	r2,r2,8164
 c008c2c:	300f883a 	mov	r7,r6
 c008c30:	280d883a 	mov	r6,r5
 c008c34:	200b883a 	mov	r5,r4
 c008c38:	11000017 	ldw	r4,0(r2)
 c008c3c:	c0077181 	jmpi	c007718 <___vfiprintf_internal_r>

0c008c40 <__sbprintf>:
 c008c40:	2880030b 	ldhu	r2,12(r5)
 c008c44:	2ac01917 	ldw	r11,100(r5)
 c008c48:	2a80038b 	ldhu	r10,14(r5)
 c008c4c:	2a400717 	ldw	r9,28(r5)
 c008c50:	2a000917 	ldw	r8,36(r5)
 c008c54:	defee204 	addi	sp,sp,-1144
 c008c58:	00c10004 	movi	r3,1024
 c008c5c:	dc011a15 	stw	r16,1128(sp)
 c008c60:	10bfff4c 	andi	r2,r2,65533
 c008c64:	2821883a 	mov	r16,r5
 c008c68:	d8cb883a 	add	r5,sp,r3
 c008c6c:	dc811c15 	stw	r18,1136(sp)
 c008c70:	dc411b15 	stw	r17,1132(sp)
 c008c74:	dfc11d15 	stw	ra,1140(sp)
 c008c78:	2025883a 	mov	r18,r4
 c008c7c:	d881030d 	sth	r2,1036(sp)
 c008c80:	dac11915 	stw	r11,1124(sp)
 c008c84:	da81038d 	sth	r10,1038(sp)
 c008c88:	da410715 	stw	r9,1052(sp)
 c008c8c:	da010915 	stw	r8,1060(sp)
 c008c90:	dec10015 	stw	sp,1024(sp)
 c008c94:	dec10415 	stw	sp,1040(sp)
 c008c98:	d8c10215 	stw	r3,1032(sp)
 c008c9c:	d8c10515 	stw	r3,1044(sp)
 c008ca0:	d8010615 	stw	zero,1048(sp)
 c008ca4:	c0077180 	call	c007718 <___vfiprintf_internal_r>
 c008ca8:	1023883a 	mov	r17,r2
 c008cac:	10000416 	blt	r2,zero,c008cc0 <__sbprintf+0x80>
 c008cb0:	d9410004 	addi	r5,sp,1024
 c008cb4:	9009883a 	mov	r4,r18
 c008cb8:	c004b2c0 	call	c004b2c <_fflush_r>
 c008cbc:	10000d1e 	bne	r2,zero,c008cf4 <__sbprintf+0xb4>
 c008cc0:	d881030b 	ldhu	r2,1036(sp)
 c008cc4:	1080100c 	andi	r2,r2,64
 c008cc8:	10000326 	beq	r2,zero,c008cd8 <__sbprintf+0x98>
 c008ccc:	8080030b 	ldhu	r2,12(r16)
 c008cd0:	10801014 	ori	r2,r2,64
 c008cd4:	8080030d 	sth	r2,12(r16)
 c008cd8:	8805883a 	mov	r2,r17
 c008cdc:	dfc11d17 	ldw	ra,1140(sp)
 c008ce0:	dc811c17 	ldw	r18,1136(sp)
 c008ce4:	dc411b17 	ldw	r17,1132(sp)
 c008ce8:	dc011a17 	ldw	r16,1128(sp)
 c008cec:	dec11e04 	addi	sp,sp,1144
 c008cf0:	f800283a 	ret
 c008cf4:	047fffc4 	movi	r17,-1
 c008cf8:	003ff106 	br	c008cc0 <__alt_data_end+0xfc008cc0>

0c008cfc <_write_r>:
 c008cfc:	defffd04 	addi	sp,sp,-12
 c008d00:	2805883a 	mov	r2,r5
 c008d04:	dc000015 	stw	r16,0(sp)
 c008d08:	04030074 	movhi	r16,3073
 c008d0c:	dc400115 	stw	r17,4(sp)
 c008d10:	300b883a 	mov	r5,r6
 c008d14:	840ecb04 	addi	r16,r16,15148
 c008d18:	2023883a 	mov	r17,r4
 c008d1c:	380d883a 	mov	r6,r7
 c008d20:	1009883a 	mov	r4,r2
 c008d24:	dfc00215 	stw	ra,8(sp)
 c008d28:	80000015 	stw	zero,0(r16)
 c008d2c:	c00e0ac0 	call	c00e0ac <write>
 c008d30:	00ffffc4 	movi	r3,-1
 c008d34:	10c00526 	beq	r2,r3,c008d4c <_write_r+0x50>
 c008d38:	dfc00217 	ldw	ra,8(sp)
 c008d3c:	dc400117 	ldw	r17,4(sp)
 c008d40:	dc000017 	ldw	r16,0(sp)
 c008d44:	dec00304 	addi	sp,sp,12
 c008d48:	f800283a 	ret
 c008d4c:	80c00017 	ldw	r3,0(r16)
 c008d50:	183ff926 	beq	r3,zero,c008d38 <__alt_data_end+0xfc008d38>
 c008d54:	88c00015 	stw	r3,0(r17)
 c008d58:	003ff706 	br	c008d38 <__alt_data_end+0xfc008d38>

0c008d5c <_close_r>:
 c008d5c:	defffd04 	addi	sp,sp,-12
 c008d60:	dc000015 	stw	r16,0(sp)
 c008d64:	04030074 	movhi	r16,3073
 c008d68:	dc400115 	stw	r17,4(sp)
 c008d6c:	840ecb04 	addi	r16,r16,15148
 c008d70:	2023883a 	mov	r17,r4
 c008d74:	2809883a 	mov	r4,r5
 c008d78:	dfc00215 	stw	ra,8(sp)
 c008d7c:	80000015 	stw	zero,0(r16)
 c008d80:	c00d8240 	call	c00d824 <close>
 c008d84:	00ffffc4 	movi	r3,-1
 c008d88:	10c00526 	beq	r2,r3,c008da0 <_close_r+0x44>
 c008d8c:	dfc00217 	ldw	ra,8(sp)
 c008d90:	dc400117 	ldw	r17,4(sp)
 c008d94:	dc000017 	ldw	r16,0(sp)
 c008d98:	dec00304 	addi	sp,sp,12
 c008d9c:	f800283a 	ret
 c008da0:	80c00017 	ldw	r3,0(r16)
 c008da4:	183ff926 	beq	r3,zero,c008d8c <__alt_data_end+0xfc008d8c>
 c008da8:	88c00015 	stw	r3,0(r17)
 c008dac:	003ff706 	br	c008d8c <__alt_data_end+0xfc008d8c>

0c008db0 <_calloc_r>:
 c008db0:	defffe04 	addi	sp,sp,-8
 c008db4:	2805883a 	mov	r2,r5
 c008db8:	dc000015 	stw	r16,0(sp)
 c008dbc:	300b883a 	mov	r5,r6
 c008dc0:	2021883a 	mov	r16,r4
 c008dc4:	1009883a 	mov	r4,r2
 c008dc8:	dfc00115 	stw	ra,4(sp)
 c008dcc:	c00097c0 	call	c00097c <__mulsi3>
 c008dd0:	100b883a 	mov	r5,r2
 c008dd4:	8009883a 	mov	r4,r16
 c008dd8:	c0057bc0 	call	c0057bc <_malloc_r>
 c008ddc:	10002926 	beq	r2,zero,c008e84 <_calloc_r+0xd4>
 c008de0:	11bfff17 	ldw	r6,-4(r2)
 c008de4:	1021883a 	mov	r16,r2
 c008de8:	00bfff04 	movi	r2,-4
 c008dec:	308c703a 	and	r6,r6,r2
 c008df0:	00c00904 	movi	r3,36
 c008df4:	308d883a 	add	r6,r6,r2
 c008df8:	19801636 	bltu	r3,r6,c008e54 <_calloc_r+0xa4>
 c008dfc:	008004c4 	movi	r2,19
 c008e00:	11800b2e 	bgeu	r2,r6,c008e30 <_calloc_r+0x80>
 c008e04:	80000015 	stw	zero,0(r16)
 c008e08:	80000115 	stw	zero,4(r16)
 c008e0c:	008006c4 	movi	r2,27
 c008e10:	11801a2e 	bgeu	r2,r6,c008e7c <_calloc_r+0xcc>
 c008e14:	80000215 	stw	zero,8(r16)
 c008e18:	80000315 	stw	zero,12(r16)
 c008e1c:	30c0151e 	bne	r6,r3,c008e74 <_calloc_r+0xc4>
 c008e20:	80000415 	stw	zero,16(r16)
 c008e24:	80800604 	addi	r2,r16,24
 c008e28:	80000515 	stw	zero,20(r16)
 c008e2c:	00000106 	br	c008e34 <_calloc_r+0x84>
 c008e30:	8005883a 	mov	r2,r16
 c008e34:	10000015 	stw	zero,0(r2)
 c008e38:	10000115 	stw	zero,4(r2)
 c008e3c:	10000215 	stw	zero,8(r2)
 c008e40:	8005883a 	mov	r2,r16
 c008e44:	dfc00117 	ldw	ra,4(sp)
 c008e48:	dc000017 	ldw	r16,0(sp)
 c008e4c:	dec00204 	addi	sp,sp,8
 c008e50:	f800283a 	ret
 c008e54:	000b883a 	mov	r5,zero
 c008e58:	8009883a 	mov	r4,r16
 c008e5c:	c0060ac0 	call	c0060ac <memset>
 c008e60:	8005883a 	mov	r2,r16
 c008e64:	dfc00117 	ldw	ra,4(sp)
 c008e68:	dc000017 	ldw	r16,0(sp)
 c008e6c:	dec00204 	addi	sp,sp,8
 c008e70:	f800283a 	ret
 c008e74:	80800404 	addi	r2,r16,16
 c008e78:	003fee06 	br	c008e34 <__alt_data_end+0xfc008e34>
 c008e7c:	80800204 	addi	r2,r16,8
 c008e80:	003fec06 	br	c008e34 <__alt_data_end+0xfc008e34>
 c008e84:	0005883a 	mov	r2,zero
 c008e88:	003fee06 	br	c008e44 <__alt_data_end+0xfc008e44>

0c008e8c <_fclose_r>:
 c008e8c:	28003926 	beq	r5,zero,c008f74 <_fclose_r+0xe8>
 c008e90:	defffc04 	addi	sp,sp,-16
 c008e94:	dc400115 	stw	r17,4(sp)
 c008e98:	dc000015 	stw	r16,0(sp)
 c008e9c:	dfc00315 	stw	ra,12(sp)
 c008ea0:	dc800215 	stw	r18,8(sp)
 c008ea4:	2023883a 	mov	r17,r4
 c008ea8:	2821883a 	mov	r16,r5
 c008eac:	20000226 	beq	r4,zero,c008eb8 <_fclose_r+0x2c>
 c008eb0:	20800e17 	ldw	r2,56(r4)
 c008eb4:	10002726 	beq	r2,zero,c008f54 <_fclose_r+0xc8>
 c008eb8:	8080030f 	ldh	r2,12(r16)
 c008ebc:	1000071e 	bne	r2,zero,c008edc <_fclose_r+0x50>
 c008ec0:	0005883a 	mov	r2,zero
 c008ec4:	dfc00317 	ldw	ra,12(sp)
 c008ec8:	dc800217 	ldw	r18,8(sp)
 c008ecc:	dc400117 	ldw	r17,4(sp)
 c008ed0:	dc000017 	ldw	r16,0(sp)
 c008ed4:	dec00404 	addi	sp,sp,16
 c008ed8:	f800283a 	ret
 c008edc:	800b883a 	mov	r5,r16
 c008ee0:	8809883a 	mov	r4,r17
 c008ee4:	c0049100 	call	c004910 <__sflush_r>
 c008ee8:	1025883a 	mov	r18,r2
 c008eec:	80800b17 	ldw	r2,44(r16)
 c008ef0:	10000426 	beq	r2,zero,c008f04 <_fclose_r+0x78>
 c008ef4:	81400717 	ldw	r5,28(r16)
 c008ef8:	8809883a 	mov	r4,r17
 c008efc:	103ee83a 	callr	r2
 c008f00:	10001616 	blt	r2,zero,c008f5c <_fclose_r+0xd0>
 c008f04:	8080030b 	ldhu	r2,12(r16)
 c008f08:	1080200c 	andi	r2,r2,128
 c008f0c:	1000151e 	bne	r2,zero,c008f64 <_fclose_r+0xd8>
 c008f10:	81400c17 	ldw	r5,48(r16)
 c008f14:	28000526 	beq	r5,zero,c008f2c <_fclose_r+0xa0>
 c008f18:	80801004 	addi	r2,r16,64
 c008f1c:	28800226 	beq	r5,r2,c008f28 <_fclose_r+0x9c>
 c008f20:	8809883a 	mov	r4,r17
 c008f24:	c00508c0 	call	c00508c <_free_r>
 c008f28:	80000c15 	stw	zero,48(r16)
 c008f2c:	81401117 	ldw	r5,68(r16)
 c008f30:	28000326 	beq	r5,zero,c008f40 <_fclose_r+0xb4>
 c008f34:	8809883a 	mov	r4,r17
 c008f38:	c00508c0 	call	c00508c <_free_r>
 c008f3c:	80001115 	stw	zero,68(r16)
 c008f40:	c004f280 	call	c004f28 <__sfp_lock_acquire>
 c008f44:	8000030d 	sth	zero,12(r16)
 c008f48:	c004f2c0 	call	c004f2c <__sfp_lock_release>
 c008f4c:	9005883a 	mov	r2,r18
 c008f50:	003fdc06 	br	c008ec4 <__alt_data_end+0xfc008ec4>
 c008f54:	c004f180 	call	c004f18 <__sinit>
 c008f58:	003fd706 	br	c008eb8 <__alt_data_end+0xfc008eb8>
 c008f5c:	04bfffc4 	movi	r18,-1
 c008f60:	003fe806 	br	c008f04 <__alt_data_end+0xfc008f04>
 c008f64:	81400417 	ldw	r5,16(r16)
 c008f68:	8809883a 	mov	r4,r17
 c008f6c:	c00508c0 	call	c00508c <_free_r>
 c008f70:	003fe706 	br	c008f10 <__alt_data_end+0xfc008f10>
 c008f74:	0005883a 	mov	r2,zero
 c008f78:	f800283a 	ret

0c008f7c <fclose>:
 c008f7c:	00830074 	movhi	r2,3073
 c008f80:	1087f904 	addi	r2,r2,8164
 c008f84:	200b883a 	mov	r5,r4
 c008f88:	11000017 	ldw	r4,0(r2)
 c008f8c:	c008e8c1 	jmpi	c008e8c <_fclose_r>

0c008f90 <__fputwc>:
 c008f90:	defff804 	addi	sp,sp,-32
 c008f94:	dcc00415 	stw	r19,16(sp)
 c008f98:	dc800315 	stw	r18,12(sp)
 c008f9c:	dc000115 	stw	r16,4(sp)
 c008fa0:	dfc00715 	stw	ra,28(sp)
 c008fa4:	dd400615 	stw	r21,24(sp)
 c008fa8:	dd000515 	stw	r20,20(sp)
 c008fac:	dc400215 	stw	r17,8(sp)
 c008fb0:	2027883a 	mov	r19,r4
 c008fb4:	2825883a 	mov	r18,r5
 c008fb8:	3021883a 	mov	r16,r6
 c008fbc:	c0055ac0 	call	c0055ac <__locale_mb_cur_max>
 c008fc0:	00c00044 	movi	r3,1
 c008fc4:	10c03e26 	beq	r2,r3,c0090c0 <__fputwc+0x130>
 c008fc8:	81c01704 	addi	r7,r16,92
 c008fcc:	900d883a 	mov	r6,r18
 c008fd0:	d80b883a 	mov	r5,sp
 c008fd4:	9809883a 	mov	r4,r19
 c008fd8:	c009fe80 	call	c009fe8 <_wcrtomb_r>
 c008fdc:	1029883a 	mov	r20,r2
 c008fe0:	00bfffc4 	movi	r2,-1
 c008fe4:	a0802026 	beq	r20,r2,c009068 <__fputwc+0xd8>
 c008fe8:	d9400003 	ldbu	r5,0(sp)
 c008fec:	a0001c26 	beq	r20,zero,c009060 <__fputwc+0xd0>
 c008ff0:	0023883a 	mov	r17,zero
 c008ff4:	05400284 	movi	r21,10
 c008ff8:	00000906 	br	c009020 <__fputwc+0x90>
 c008ffc:	80800017 	ldw	r2,0(r16)
 c009000:	11400005 	stb	r5,0(r2)
 c009004:	80c00017 	ldw	r3,0(r16)
 c009008:	18c00044 	addi	r3,r3,1
 c00900c:	80c00015 	stw	r3,0(r16)
 c009010:	8c400044 	addi	r17,r17,1
 c009014:	dc45883a 	add	r2,sp,r17
 c009018:	8d00112e 	bgeu	r17,r20,c009060 <__fputwc+0xd0>
 c00901c:	11400003 	ldbu	r5,0(r2)
 c009020:	80c00217 	ldw	r3,8(r16)
 c009024:	18ffffc4 	addi	r3,r3,-1
 c009028:	80c00215 	stw	r3,8(r16)
 c00902c:	183ff30e 	bge	r3,zero,c008ffc <__alt_data_end+0xfc008ffc>
 c009030:	80800617 	ldw	r2,24(r16)
 c009034:	18801916 	blt	r3,r2,c00909c <__fputwc+0x10c>
 c009038:	80800017 	ldw	r2,0(r16)
 c00903c:	11400005 	stb	r5,0(r2)
 c009040:	80800017 	ldw	r2,0(r16)
 c009044:	10c00003 	ldbu	r3,0(r2)
 c009048:	10800044 	addi	r2,r2,1
 c00904c:	1d402326 	beq	r3,r21,c0090dc <__fputwc+0x14c>
 c009050:	80800015 	stw	r2,0(r16)
 c009054:	8c400044 	addi	r17,r17,1
 c009058:	dc45883a 	add	r2,sp,r17
 c00905c:	8d3fef36 	bltu	r17,r20,c00901c <__alt_data_end+0xfc00901c>
 c009060:	9005883a 	mov	r2,r18
 c009064:	00000406 	br	c009078 <__fputwc+0xe8>
 c009068:	80c0030b 	ldhu	r3,12(r16)
 c00906c:	a005883a 	mov	r2,r20
 c009070:	18c01014 	ori	r3,r3,64
 c009074:	80c0030d 	sth	r3,12(r16)
 c009078:	dfc00717 	ldw	ra,28(sp)
 c00907c:	dd400617 	ldw	r21,24(sp)
 c009080:	dd000517 	ldw	r20,20(sp)
 c009084:	dcc00417 	ldw	r19,16(sp)
 c009088:	dc800317 	ldw	r18,12(sp)
 c00908c:	dc400217 	ldw	r17,8(sp)
 c009090:	dc000117 	ldw	r16,4(sp)
 c009094:	dec00804 	addi	sp,sp,32
 c009098:	f800283a 	ret
 c00909c:	800d883a 	mov	r6,r16
 c0090a0:	29403fcc 	andi	r5,r5,255
 c0090a4:	9809883a 	mov	r4,r19
 c0090a8:	c009e900 	call	c009e90 <__swbuf_r>
 c0090ac:	10bfffe0 	cmpeqi	r2,r2,-1
 c0090b0:	10803fcc 	andi	r2,r2,255
 c0090b4:	103fd626 	beq	r2,zero,c009010 <__alt_data_end+0xfc009010>
 c0090b8:	00bfffc4 	movi	r2,-1
 c0090bc:	003fee06 	br	c009078 <__alt_data_end+0xfc009078>
 c0090c0:	90ffffc4 	addi	r3,r18,-1
 c0090c4:	01003f84 	movi	r4,254
 c0090c8:	20ffbf36 	bltu	r4,r3,c008fc8 <__alt_data_end+0xfc008fc8>
 c0090cc:	900b883a 	mov	r5,r18
 c0090d0:	dc800005 	stb	r18,0(sp)
 c0090d4:	1029883a 	mov	r20,r2
 c0090d8:	003fc506 	br	c008ff0 <__alt_data_end+0xfc008ff0>
 c0090dc:	800d883a 	mov	r6,r16
 c0090e0:	a80b883a 	mov	r5,r21
 c0090e4:	9809883a 	mov	r4,r19
 c0090e8:	c009e900 	call	c009e90 <__swbuf_r>
 c0090ec:	10bfffe0 	cmpeqi	r2,r2,-1
 c0090f0:	003fef06 	br	c0090b0 <__alt_data_end+0xfc0090b0>

0c0090f4 <_fputwc_r>:
 c0090f4:	3080030b 	ldhu	r2,12(r6)
 c0090f8:	10c8000c 	andi	r3,r2,8192
 c0090fc:	1800051e 	bne	r3,zero,c009114 <_fputwc_r+0x20>
 c009100:	30c01917 	ldw	r3,100(r6)
 c009104:	10880014 	ori	r2,r2,8192
 c009108:	3080030d 	sth	r2,12(r6)
 c00910c:	18880014 	ori	r2,r3,8192
 c009110:	30801915 	stw	r2,100(r6)
 c009114:	c008f901 	jmpi	c008f90 <__fputwc>

0c009118 <fputwc>:
 c009118:	00830074 	movhi	r2,3073
 c00911c:	defffc04 	addi	sp,sp,-16
 c009120:	1087f904 	addi	r2,r2,8164
 c009124:	dc000115 	stw	r16,4(sp)
 c009128:	14000017 	ldw	r16,0(r2)
 c00912c:	dc400215 	stw	r17,8(sp)
 c009130:	dfc00315 	stw	ra,12(sp)
 c009134:	2023883a 	mov	r17,r4
 c009138:	80000226 	beq	r16,zero,c009144 <fputwc+0x2c>
 c00913c:	80800e17 	ldw	r2,56(r16)
 c009140:	10001026 	beq	r2,zero,c009184 <fputwc+0x6c>
 c009144:	2880030b 	ldhu	r2,12(r5)
 c009148:	10c8000c 	andi	r3,r2,8192
 c00914c:	1800051e 	bne	r3,zero,c009164 <fputwc+0x4c>
 c009150:	28c01917 	ldw	r3,100(r5)
 c009154:	10880014 	ori	r2,r2,8192
 c009158:	2880030d 	sth	r2,12(r5)
 c00915c:	18880014 	ori	r2,r3,8192
 c009160:	28801915 	stw	r2,100(r5)
 c009164:	280d883a 	mov	r6,r5
 c009168:	8009883a 	mov	r4,r16
 c00916c:	880b883a 	mov	r5,r17
 c009170:	dfc00317 	ldw	ra,12(sp)
 c009174:	dc400217 	ldw	r17,8(sp)
 c009178:	dc000117 	ldw	r16,4(sp)
 c00917c:	dec00404 	addi	sp,sp,16
 c009180:	c008f901 	jmpi	c008f90 <__fputwc>
 c009184:	8009883a 	mov	r4,r16
 c009188:	d9400015 	stw	r5,0(sp)
 c00918c:	c004f180 	call	c004f18 <__sinit>
 c009190:	d9400017 	ldw	r5,0(sp)
 c009194:	003feb06 	br	c009144 <__alt_data_end+0xfc009144>

0c009198 <_fstat_r>:
 c009198:	defffd04 	addi	sp,sp,-12
 c00919c:	2805883a 	mov	r2,r5
 c0091a0:	dc000015 	stw	r16,0(sp)
 c0091a4:	04030074 	movhi	r16,3073
 c0091a8:	dc400115 	stw	r17,4(sp)
 c0091ac:	840ecb04 	addi	r16,r16,15148
 c0091b0:	2023883a 	mov	r17,r4
 c0091b4:	300b883a 	mov	r5,r6
 c0091b8:	1009883a 	mov	r4,r2
 c0091bc:	dfc00215 	stw	ra,8(sp)
 c0091c0:	80000015 	stw	zero,0(r16)
 c0091c4:	c00d9640 	call	c00d964 <fstat>
 c0091c8:	00ffffc4 	movi	r3,-1
 c0091cc:	10c00526 	beq	r2,r3,c0091e4 <_fstat_r+0x4c>
 c0091d0:	dfc00217 	ldw	ra,8(sp)
 c0091d4:	dc400117 	ldw	r17,4(sp)
 c0091d8:	dc000017 	ldw	r16,0(sp)
 c0091dc:	dec00304 	addi	sp,sp,12
 c0091e0:	f800283a 	ret
 c0091e4:	80c00017 	ldw	r3,0(r16)
 c0091e8:	183ff926 	beq	r3,zero,c0091d0 <__alt_data_end+0xfc0091d0>
 c0091ec:	88c00015 	stw	r3,0(r17)
 c0091f0:	003ff706 	br	c0091d0 <__alt_data_end+0xfc0091d0>

0c0091f4 <__sfvwrite_r>:
 c0091f4:	30800217 	ldw	r2,8(r6)
 c0091f8:	10006726 	beq	r2,zero,c009398 <__sfvwrite_r+0x1a4>
 c0091fc:	28c0030b 	ldhu	r3,12(r5)
 c009200:	defff404 	addi	sp,sp,-48
 c009204:	dd400715 	stw	r21,28(sp)
 c009208:	dd000615 	stw	r20,24(sp)
 c00920c:	dc000215 	stw	r16,8(sp)
 c009210:	dfc00b15 	stw	ra,44(sp)
 c009214:	df000a15 	stw	fp,40(sp)
 c009218:	ddc00915 	stw	r23,36(sp)
 c00921c:	dd800815 	stw	r22,32(sp)
 c009220:	dcc00515 	stw	r19,20(sp)
 c009224:	dc800415 	stw	r18,16(sp)
 c009228:	dc400315 	stw	r17,12(sp)
 c00922c:	1880020c 	andi	r2,r3,8
 c009230:	2821883a 	mov	r16,r5
 c009234:	202b883a 	mov	r21,r4
 c009238:	3029883a 	mov	r20,r6
 c00923c:	10002726 	beq	r2,zero,c0092dc <__sfvwrite_r+0xe8>
 c009240:	28800417 	ldw	r2,16(r5)
 c009244:	10002526 	beq	r2,zero,c0092dc <__sfvwrite_r+0xe8>
 c009248:	1880008c 	andi	r2,r3,2
 c00924c:	a4400017 	ldw	r17,0(r20)
 c009250:	10002a26 	beq	r2,zero,c0092fc <__sfvwrite_r+0x108>
 c009254:	05a00034 	movhi	r22,32768
 c009258:	0027883a 	mov	r19,zero
 c00925c:	0025883a 	mov	r18,zero
 c009260:	b5bf0004 	addi	r22,r22,-1024
 c009264:	980d883a 	mov	r6,r19
 c009268:	a809883a 	mov	r4,r21
 c00926c:	90004626 	beq	r18,zero,c009388 <__sfvwrite_r+0x194>
 c009270:	900f883a 	mov	r7,r18
 c009274:	b480022e 	bgeu	r22,r18,c009280 <__sfvwrite_r+0x8c>
 c009278:	01e00034 	movhi	r7,32768
 c00927c:	39ff0004 	addi	r7,r7,-1024
 c009280:	80800917 	ldw	r2,36(r16)
 c009284:	81400717 	ldw	r5,28(r16)
 c009288:	103ee83a 	callr	r2
 c00928c:	00805a0e 	bge	zero,r2,c0093f8 <__sfvwrite_r+0x204>
 c009290:	a0c00217 	ldw	r3,8(r20)
 c009294:	98a7883a 	add	r19,r19,r2
 c009298:	90a5c83a 	sub	r18,r18,r2
 c00929c:	1885c83a 	sub	r2,r3,r2
 c0092a0:	a0800215 	stw	r2,8(r20)
 c0092a4:	103fef1e 	bne	r2,zero,c009264 <__alt_data_end+0xfc009264>
 c0092a8:	0005883a 	mov	r2,zero
 c0092ac:	dfc00b17 	ldw	ra,44(sp)
 c0092b0:	df000a17 	ldw	fp,40(sp)
 c0092b4:	ddc00917 	ldw	r23,36(sp)
 c0092b8:	dd800817 	ldw	r22,32(sp)
 c0092bc:	dd400717 	ldw	r21,28(sp)
 c0092c0:	dd000617 	ldw	r20,24(sp)
 c0092c4:	dcc00517 	ldw	r19,20(sp)
 c0092c8:	dc800417 	ldw	r18,16(sp)
 c0092cc:	dc400317 	ldw	r17,12(sp)
 c0092d0:	dc000217 	ldw	r16,8(sp)
 c0092d4:	dec00c04 	addi	sp,sp,48
 c0092d8:	f800283a 	ret
 c0092dc:	800b883a 	mov	r5,r16
 c0092e0:	a809883a 	mov	r4,r21
 c0092e4:	c002f0c0 	call	c002f0c <__swsetup_r>
 c0092e8:	1000ee1e 	bne	r2,zero,c0096a4 <__sfvwrite_r+0x4b0>
 c0092ec:	80c0030b 	ldhu	r3,12(r16)
 c0092f0:	a4400017 	ldw	r17,0(r20)
 c0092f4:	1880008c 	andi	r2,r3,2
 c0092f8:	103fd61e 	bne	r2,zero,c009254 <__alt_data_end+0xfc009254>
 c0092fc:	1880004c 	andi	r2,r3,1
 c009300:	1000421e 	bne	r2,zero,c00940c <__sfvwrite_r+0x218>
 c009304:	0039883a 	mov	fp,zero
 c009308:	0025883a 	mov	r18,zero
 c00930c:	90001a26 	beq	r18,zero,c009378 <__sfvwrite_r+0x184>
 c009310:	1880800c 	andi	r2,r3,512
 c009314:	84c00217 	ldw	r19,8(r16)
 c009318:	10002126 	beq	r2,zero,c0093a0 <__sfvwrite_r+0x1ac>
 c00931c:	982f883a 	mov	r23,r19
 c009320:	94c09636 	bltu	r18,r19,c00957c <__sfvwrite_r+0x388>
 c009324:	1881200c 	andi	r2,r3,1152
 c009328:	1000a11e 	bne	r2,zero,c0095b0 <__sfvwrite_r+0x3bc>
 c00932c:	81000017 	ldw	r4,0(r16)
 c009330:	b80d883a 	mov	r6,r23
 c009334:	e00b883a 	mov	r5,fp
 c009338:	c0097700 	call	c009770 <memmove>
 c00933c:	80c00217 	ldw	r3,8(r16)
 c009340:	81000017 	ldw	r4,0(r16)
 c009344:	9005883a 	mov	r2,r18
 c009348:	1ce7c83a 	sub	r19,r3,r19
 c00934c:	25cf883a 	add	r7,r4,r23
 c009350:	84c00215 	stw	r19,8(r16)
 c009354:	81c00015 	stw	r7,0(r16)
 c009358:	a0c00217 	ldw	r3,8(r20)
 c00935c:	e0b9883a 	add	fp,fp,r2
 c009360:	90a5c83a 	sub	r18,r18,r2
 c009364:	18a7c83a 	sub	r19,r3,r2
 c009368:	a4c00215 	stw	r19,8(r20)
 c00936c:	983fce26 	beq	r19,zero,c0092a8 <__alt_data_end+0xfc0092a8>
 c009370:	80c0030b 	ldhu	r3,12(r16)
 c009374:	903fe61e 	bne	r18,zero,c009310 <__alt_data_end+0xfc009310>
 c009378:	8f000017 	ldw	fp,0(r17)
 c00937c:	8c800117 	ldw	r18,4(r17)
 c009380:	8c400204 	addi	r17,r17,8
 c009384:	003fe106 	br	c00930c <__alt_data_end+0xfc00930c>
 c009388:	8cc00017 	ldw	r19,0(r17)
 c00938c:	8c800117 	ldw	r18,4(r17)
 c009390:	8c400204 	addi	r17,r17,8
 c009394:	003fb306 	br	c009264 <__alt_data_end+0xfc009264>
 c009398:	0005883a 	mov	r2,zero
 c00939c:	f800283a 	ret
 c0093a0:	81000017 	ldw	r4,0(r16)
 c0093a4:	80800417 	ldw	r2,16(r16)
 c0093a8:	11005a36 	bltu	r2,r4,c009514 <__sfvwrite_r+0x320>
 c0093ac:	85c00517 	ldw	r23,20(r16)
 c0093b0:	95c05836 	bltu	r18,r23,c009514 <__sfvwrite_r+0x320>
 c0093b4:	00a00034 	movhi	r2,32768
 c0093b8:	10bfffc4 	addi	r2,r2,-1
 c0093bc:	9009883a 	mov	r4,r18
 c0093c0:	1480012e 	bgeu	r2,r18,c0093c8 <__sfvwrite_r+0x1d4>
 c0093c4:	1009883a 	mov	r4,r2
 c0093c8:	b80b883a 	mov	r5,r23
 c0093cc:	c00ad900 	call	c00ad90 <__divsi3>
 c0093d0:	b80b883a 	mov	r5,r23
 c0093d4:	1009883a 	mov	r4,r2
 c0093d8:	c00097c0 	call	c00097c <__mulsi3>
 c0093dc:	81400717 	ldw	r5,28(r16)
 c0093e0:	80c00917 	ldw	r3,36(r16)
 c0093e4:	100f883a 	mov	r7,r2
 c0093e8:	e00d883a 	mov	r6,fp
 c0093ec:	a809883a 	mov	r4,r21
 c0093f0:	183ee83a 	callr	r3
 c0093f4:	00bfd816 	blt	zero,r2,c009358 <__alt_data_end+0xfc009358>
 c0093f8:	8080030b 	ldhu	r2,12(r16)
 c0093fc:	10801014 	ori	r2,r2,64
 c009400:	8080030d 	sth	r2,12(r16)
 c009404:	00bfffc4 	movi	r2,-1
 c009408:	003fa806 	br	c0092ac <__alt_data_end+0xfc0092ac>
 c00940c:	0027883a 	mov	r19,zero
 c009410:	0011883a 	mov	r8,zero
 c009414:	0039883a 	mov	fp,zero
 c009418:	0025883a 	mov	r18,zero
 c00941c:	90001f26 	beq	r18,zero,c00949c <__sfvwrite_r+0x2a8>
 c009420:	40005a26 	beq	r8,zero,c00958c <__sfvwrite_r+0x398>
 c009424:	982d883a 	mov	r22,r19
 c009428:	94c0012e 	bgeu	r18,r19,c009430 <__sfvwrite_r+0x23c>
 c00942c:	902d883a 	mov	r22,r18
 c009430:	81000017 	ldw	r4,0(r16)
 c009434:	80800417 	ldw	r2,16(r16)
 c009438:	b02f883a 	mov	r23,r22
 c00943c:	81c00517 	ldw	r7,20(r16)
 c009440:	1100032e 	bgeu	r2,r4,c009450 <__sfvwrite_r+0x25c>
 c009444:	80c00217 	ldw	r3,8(r16)
 c009448:	38c7883a 	add	r3,r7,r3
 c00944c:	1d801816 	blt	r3,r22,c0094b0 <__sfvwrite_r+0x2bc>
 c009450:	b1c03e16 	blt	r22,r7,c00954c <__sfvwrite_r+0x358>
 c009454:	80800917 	ldw	r2,36(r16)
 c009458:	81400717 	ldw	r5,28(r16)
 c00945c:	e00d883a 	mov	r6,fp
 c009460:	da000115 	stw	r8,4(sp)
 c009464:	a809883a 	mov	r4,r21
 c009468:	103ee83a 	callr	r2
 c00946c:	102f883a 	mov	r23,r2
 c009470:	da000117 	ldw	r8,4(sp)
 c009474:	00bfe00e 	bge	zero,r2,c0093f8 <__alt_data_end+0xfc0093f8>
 c009478:	9de7c83a 	sub	r19,r19,r23
 c00947c:	98001f26 	beq	r19,zero,c0094fc <__sfvwrite_r+0x308>
 c009480:	a0800217 	ldw	r2,8(r20)
 c009484:	e5f9883a 	add	fp,fp,r23
 c009488:	95e5c83a 	sub	r18,r18,r23
 c00948c:	15efc83a 	sub	r23,r2,r23
 c009490:	a5c00215 	stw	r23,8(r20)
 c009494:	b83f8426 	beq	r23,zero,c0092a8 <__alt_data_end+0xfc0092a8>
 c009498:	903fe11e 	bne	r18,zero,c009420 <__alt_data_end+0xfc009420>
 c00949c:	8f000017 	ldw	fp,0(r17)
 c0094a0:	8c800117 	ldw	r18,4(r17)
 c0094a4:	0011883a 	mov	r8,zero
 c0094a8:	8c400204 	addi	r17,r17,8
 c0094ac:	003fdb06 	br	c00941c <__alt_data_end+0xfc00941c>
 c0094b0:	180d883a 	mov	r6,r3
 c0094b4:	e00b883a 	mov	r5,fp
 c0094b8:	da000115 	stw	r8,4(sp)
 c0094bc:	d8c00015 	stw	r3,0(sp)
 c0094c0:	c0097700 	call	c009770 <memmove>
 c0094c4:	d8c00017 	ldw	r3,0(sp)
 c0094c8:	80800017 	ldw	r2,0(r16)
 c0094cc:	800b883a 	mov	r5,r16
 c0094d0:	a809883a 	mov	r4,r21
 c0094d4:	10c5883a 	add	r2,r2,r3
 c0094d8:	80800015 	stw	r2,0(r16)
 c0094dc:	d8c00015 	stw	r3,0(sp)
 c0094e0:	c004b2c0 	call	c004b2c <_fflush_r>
 c0094e4:	d8c00017 	ldw	r3,0(sp)
 c0094e8:	da000117 	ldw	r8,4(sp)
 c0094ec:	103fc21e 	bne	r2,zero,c0093f8 <__alt_data_end+0xfc0093f8>
 c0094f0:	182f883a 	mov	r23,r3
 c0094f4:	9de7c83a 	sub	r19,r19,r23
 c0094f8:	983fe11e 	bne	r19,zero,c009480 <__alt_data_end+0xfc009480>
 c0094fc:	800b883a 	mov	r5,r16
 c009500:	a809883a 	mov	r4,r21
 c009504:	c004b2c0 	call	c004b2c <_fflush_r>
 c009508:	103fbb1e 	bne	r2,zero,c0093f8 <__alt_data_end+0xfc0093f8>
 c00950c:	0011883a 	mov	r8,zero
 c009510:	003fdb06 	br	c009480 <__alt_data_end+0xfc009480>
 c009514:	94c0012e 	bgeu	r18,r19,c00951c <__sfvwrite_r+0x328>
 c009518:	9027883a 	mov	r19,r18
 c00951c:	980d883a 	mov	r6,r19
 c009520:	e00b883a 	mov	r5,fp
 c009524:	c0097700 	call	c009770 <memmove>
 c009528:	80800217 	ldw	r2,8(r16)
 c00952c:	80c00017 	ldw	r3,0(r16)
 c009530:	14c5c83a 	sub	r2,r2,r19
 c009534:	1cc7883a 	add	r3,r3,r19
 c009538:	80800215 	stw	r2,8(r16)
 c00953c:	80c00015 	stw	r3,0(r16)
 c009540:	10004326 	beq	r2,zero,c009650 <__sfvwrite_r+0x45c>
 c009544:	9805883a 	mov	r2,r19
 c009548:	003f8306 	br	c009358 <__alt_data_end+0xfc009358>
 c00954c:	b00d883a 	mov	r6,r22
 c009550:	e00b883a 	mov	r5,fp
 c009554:	da000115 	stw	r8,4(sp)
 c009558:	c0097700 	call	c009770 <memmove>
 c00955c:	80800217 	ldw	r2,8(r16)
 c009560:	80c00017 	ldw	r3,0(r16)
 c009564:	da000117 	ldw	r8,4(sp)
 c009568:	1585c83a 	sub	r2,r2,r22
 c00956c:	1dad883a 	add	r22,r3,r22
 c009570:	80800215 	stw	r2,8(r16)
 c009574:	85800015 	stw	r22,0(r16)
 c009578:	003fbf06 	br	c009478 <__alt_data_end+0xfc009478>
 c00957c:	81000017 	ldw	r4,0(r16)
 c009580:	9027883a 	mov	r19,r18
 c009584:	902f883a 	mov	r23,r18
 c009588:	003f6906 	br	c009330 <__alt_data_end+0xfc009330>
 c00958c:	900d883a 	mov	r6,r18
 c009590:	01400284 	movi	r5,10
 c009594:	e009883a 	mov	r4,fp
 c009598:	c005fc80 	call	c005fc8 <memchr>
 c00959c:	10003e26 	beq	r2,zero,c009698 <__sfvwrite_r+0x4a4>
 c0095a0:	10800044 	addi	r2,r2,1
 c0095a4:	1727c83a 	sub	r19,r2,fp
 c0095a8:	02000044 	movi	r8,1
 c0095ac:	003f9d06 	br	c009424 <__alt_data_end+0xfc009424>
 c0095b0:	80800517 	ldw	r2,20(r16)
 c0095b4:	81400417 	ldw	r5,16(r16)
 c0095b8:	81c00017 	ldw	r7,0(r16)
 c0095bc:	10a7883a 	add	r19,r2,r2
 c0095c0:	9885883a 	add	r2,r19,r2
 c0095c4:	1026d7fa 	srli	r19,r2,31
 c0095c8:	396dc83a 	sub	r22,r7,r5
 c0095cc:	b1000044 	addi	r4,r22,1
 c0095d0:	9885883a 	add	r2,r19,r2
 c0095d4:	1027d07a 	srai	r19,r2,1
 c0095d8:	2485883a 	add	r2,r4,r18
 c0095dc:	980d883a 	mov	r6,r19
 c0095e0:	9880022e 	bgeu	r19,r2,c0095ec <__sfvwrite_r+0x3f8>
 c0095e4:	1027883a 	mov	r19,r2
 c0095e8:	100d883a 	mov	r6,r2
 c0095ec:	18c1000c 	andi	r3,r3,1024
 c0095f0:	18001c26 	beq	r3,zero,c009664 <__sfvwrite_r+0x470>
 c0095f4:	300b883a 	mov	r5,r6
 c0095f8:	a809883a 	mov	r4,r21
 c0095fc:	c0057bc0 	call	c0057bc <_malloc_r>
 c009600:	102f883a 	mov	r23,r2
 c009604:	10002926 	beq	r2,zero,c0096ac <__sfvwrite_r+0x4b8>
 c009608:	81400417 	ldw	r5,16(r16)
 c00960c:	b00d883a 	mov	r6,r22
 c009610:	1009883a 	mov	r4,r2
 c009614:	c0009a40 	call	c0009a4 <memcpy>
 c009618:	8080030b 	ldhu	r2,12(r16)
 c00961c:	00fedfc4 	movi	r3,-1153
 c009620:	10c4703a 	and	r2,r2,r3
 c009624:	10802014 	ori	r2,r2,128
 c009628:	8080030d 	sth	r2,12(r16)
 c00962c:	bd89883a 	add	r4,r23,r22
 c009630:	9d8fc83a 	sub	r7,r19,r22
 c009634:	85c00415 	stw	r23,16(r16)
 c009638:	84c00515 	stw	r19,20(r16)
 c00963c:	81000015 	stw	r4,0(r16)
 c009640:	9027883a 	mov	r19,r18
 c009644:	81c00215 	stw	r7,8(r16)
 c009648:	902f883a 	mov	r23,r18
 c00964c:	003f3806 	br	c009330 <__alt_data_end+0xfc009330>
 c009650:	800b883a 	mov	r5,r16
 c009654:	a809883a 	mov	r4,r21
 c009658:	c004b2c0 	call	c004b2c <_fflush_r>
 c00965c:	103fb926 	beq	r2,zero,c009544 <__alt_data_end+0xfc009544>
 c009660:	003f6506 	br	c0093f8 <__alt_data_end+0xfc0093f8>
 c009664:	a809883a 	mov	r4,r21
 c009668:	c00992c0 	call	c00992c <_realloc_r>
 c00966c:	102f883a 	mov	r23,r2
 c009670:	103fee1e 	bne	r2,zero,c00962c <__alt_data_end+0xfc00962c>
 c009674:	81400417 	ldw	r5,16(r16)
 c009678:	a809883a 	mov	r4,r21
 c00967c:	c00508c0 	call	c00508c <_free_r>
 c009680:	8080030b 	ldhu	r2,12(r16)
 c009684:	00ffdfc4 	movi	r3,-129
 c009688:	1884703a 	and	r2,r3,r2
 c00968c:	00c00304 	movi	r3,12
 c009690:	a8c00015 	stw	r3,0(r21)
 c009694:	003f5906 	br	c0093fc <__alt_data_end+0xfc0093fc>
 c009698:	94c00044 	addi	r19,r18,1
 c00969c:	02000044 	movi	r8,1
 c0096a0:	003f6006 	br	c009424 <__alt_data_end+0xfc009424>
 c0096a4:	00bfffc4 	movi	r2,-1
 c0096a8:	003f0006 	br	c0092ac <__alt_data_end+0xfc0092ac>
 c0096ac:	00800304 	movi	r2,12
 c0096b0:	a8800015 	stw	r2,0(r21)
 c0096b4:	8080030b 	ldhu	r2,12(r16)
 c0096b8:	003f5006 	br	c0093fc <__alt_data_end+0xfc0093fc>

0c0096bc <_isatty_r>:
 c0096bc:	defffd04 	addi	sp,sp,-12
 c0096c0:	dc000015 	stw	r16,0(sp)
 c0096c4:	04030074 	movhi	r16,3073
 c0096c8:	dc400115 	stw	r17,4(sp)
 c0096cc:	840ecb04 	addi	r16,r16,15148
 c0096d0:	2023883a 	mov	r17,r4
 c0096d4:	2809883a 	mov	r4,r5
 c0096d8:	dfc00215 	stw	ra,8(sp)
 c0096dc:	80000015 	stw	zero,0(r16)
 c0096e0:	c00da580 	call	c00da58 <isatty>
 c0096e4:	00ffffc4 	movi	r3,-1
 c0096e8:	10c00526 	beq	r2,r3,c009700 <_isatty_r+0x44>
 c0096ec:	dfc00217 	ldw	ra,8(sp)
 c0096f0:	dc400117 	ldw	r17,4(sp)
 c0096f4:	dc000017 	ldw	r16,0(sp)
 c0096f8:	dec00304 	addi	sp,sp,12
 c0096fc:	f800283a 	ret
 c009700:	80c00017 	ldw	r3,0(r16)
 c009704:	183ff926 	beq	r3,zero,c0096ec <__alt_data_end+0xfc0096ec>
 c009708:	88c00015 	stw	r3,0(r17)
 c00970c:	003ff706 	br	c0096ec <__alt_data_end+0xfc0096ec>

0c009710 <_lseek_r>:
 c009710:	defffd04 	addi	sp,sp,-12
 c009714:	2805883a 	mov	r2,r5
 c009718:	dc000015 	stw	r16,0(sp)
 c00971c:	04030074 	movhi	r16,3073
 c009720:	dc400115 	stw	r17,4(sp)
 c009724:	300b883a 	mov	r5,r6
 c009728:	840ecb04 	addi	r16,r16,15148
 c00972c:	2023883a 	mov	r17,r4
 c009730:	380d883a 	mov	r6,r7
 c009734:	1009883a 	mov	r4,r2
 c009738:	dfc00215 	stw	ra,8(sp)
 c00973c:	80000015 	stw	zero,0(r16)
 c009740:	c00dc2c0 	call	c00dc2c <lseek>
 c009744:	00ffffc4 	movi	r3,-1
 c009748:	10c00526 	beq	r2,r3,c009760 <_lseek_r+0x50>
 c00974c:	dfc00217 	ldw	ra,8(sp)
 c009750:	dc400117 	ldw	r17,4(sp)
 c009754:	dc000017 	ldw	r16,0(sp)
 c009758:	dec00304 	addi	sp,sp,12
 c00975c:	f800283a 	ret
 c009760:	80c00017 	ldw	r3,0(r16)
 c009764:	183ff926 	beq	r3,zero,c00974c <__alt_data_end+0xfc00974c>
 c009768:	88c00015 	stw	r3,0(r17)
 c00976c:	003ff706 	br	c00974c <__alt_data_end+0xfc00974c>

0c009770 <memmove>:
 c009770:	2005883a 	mov	r2,r4
 c009774:	29000b2e 	bgeu	r5,r4,c0097a4 <memmove+0x34>
 c009778:	298f883a 	add	r7,r5,r6
 c00977c:	21c0092e 	bgeu	r4,r7,c0097a4 <memmove+0x34>
 c009780:	2187883a 	add	r3,r4,r6
 c009784:	198bc83a 	sub	r5,r3,r6
 c009788:	30004826 	beq	r6,zero,c0098ac <memmove+0x13c>
 c00978c:	39ffffc4 	addi	r7,r7,-1
 c009790:	39000003 	ldbu	r4,0(r7)
 c009794:	18ffffc4 	addi	r3,r3,-1
 c009798:	19000005 	stb	r4,0(r3)
 c00979c:	28fffb1e 	bne	r5,r3,c00978c <__alt_data_end+0xfc00978c>
 c0097a0:	f800283a 	ret
 c0097a4:	00c003c4 	movi	r3,15
 c0097a8:	1980412e 	bgeu	r3,r6,c0098b0 <memmove+0x140>
 c0097ac:	2886b03a 	or	r3,r5,r2
 c0097b0:	18c000cc 	andi	r3,r3,3
 c0097b4:	1800401e 	bne	r3,zero,c0098b8 <memmove+0x148>
 c0097b8:	33fffc04 	addi	r15,r6,-16
 c0097bc:	781ed13a 	srli	r15,r15,4
 c0097c0:	28c00104 	addi	r3,r5,4
 c0097c4:	13400104 	addi	r13,r2,4
 c0097c8:	781c913a 	slli	r14,r15,4
 c0097cc:	2b000204 	addi	r12,r5,8
 c0097d0:	12c00204 	addi	r11,r2,8
 c0097d4:	73800504 	addi	r14,r14,20
 c0097d8:	2a800304 	addi	r10,r5,12
 c0097dc:	12400304 	addi	r9,r2,12
 c0097e0:	2b9d883a 	add	r14,r5,r14
 c0097e4:	2811883a 	mov	r8,r5
 c0097e8:	100f883a 	mov	r7,r2
 c0097ec:	41000017 	ldw	r4,0(r8)
 c0097f0:	39c00404 	addi	r7,r7,16
 c0097f4:	18c00404 	addi	r3,r3,16
 c0097f8:	393ffc15 	stw	r4,-16(r7)
 c0097fc:	193ffc17 	ldw	r4,-16(r3)
 c009800:	6b400404 	addi	r13,r13,16
 c009804:	5ac00404 	addi	r11,r11,16
 c009808:	693ffc15 	stw	r4,-16(r13)
 c00980c:	61000017 	ldw	r4,0(r12)
 c009810:	4a400404 	addi	r9,r9,16
 c009814:	42000404 	addi	r8,r8,16
 c009818:	593ffc15 	stw	r4,-16(r11)
 c00981c:	51000017 	ldw	r4,0(r10)
 c009820:	63000404 	addi	r12,r12,16
 c009824:	52800404 	addi	r10,r10,16
 c009828:	493ffc15 	stw	r4,-16(r9)
 c00982c:	1bbfef1e 	bne	r3,r14,c0097ec <__alt_data_end+0xfc0097ec>
 c009830:	79000044 	addi	r4,r15,1
 c009834:	2008913a 	slli	r4,r4,4
 c009838:	328003cc 	andi	r10,r6,15
 c00983c:	02c000c4 	movi	r11,3
 c009840:	1107883a 	add	r3,r2,r4
 c009844:	290b883a 	add	r5,r5,r4
 c009848:	5a801e2e 	bgeu	r11,r10,c0098c4 <memmove+0x154>
 c00984c:	1813883a 	mov	r9,r3
 c009850:	2811883a 	mov	r8,r5
 c009854:	500f883a 	mov	r7,r10
 c009858:	41000017 	ldw	r4,0(r8)
 c00985c:	4a400104 	addi	r9,r9,4
 c009860:	39ffff04 	addi	r7,r7,-4
 c009864:	493fff15 	stw	r4,-4(r9)
 c009868:	42000104 	addi	r8,r8,4
 c00986c:	59fffa36 	bltu	r11,r7,c009858 <__alt_data_end+0xfc009858>
 c009870:	513fff04 	addi	r4,r10,-4
 c009874:	2008d0ba 	srli	r4,r4,2
 c009878:	318000cc 	andi	r6,r6,3
 c00987c:	21000044 	addi	r4,r4,1
 c009880:	2109883a 	add	r4,r4,r4
 c009884:	2109883a 	add	r4,r4,r4
 c009888:	1907883a 	add	r3,r3,r4
 c00988c:	290b883a 	add	r5,r5,r4
 c009890:	30000b26 	beq	r6,zero,c0098c0 <memmove+0x150>
 c009894:	198d883a 	add	r6,r3,r6
 c009898:	29c00003 	ldbu	r7,0(r5)
 c00989c:	18c00044 	addi	r3,r3,1
 c0098a0:	29400044 	addi	r5,r5,1
 c0098a4:	19ffffc5 	stb	r7,-1(r3)
 c0098a8:	19bffb1e 	bne	r3,r6,c009898 <__alt_data_end+0xfc009898>
 c0098ac:	f800283a 	ret
 c0098b0:	1007883a 	mov	r3,r2
 c0098b4:	003ff606 	br	c009890 <__alt_data_end+0xfc009890>
 c0098b8:	1007883a 	mov	r3,r2
 c0098bc:	003ff506 	br	c009894 <__alt_data_end+0xfc009894>
 c0098c0:	f800283a 	ret
 c0098c4:	500d883a 	mov	r6,r10
 c0098c8:	003ff106 	br	c009890 <__alt_data_end+0xfc009890>

0c0098cc <_read_r>:
 c0098cc:	defffd04 	addi	sp,sp,-12
 c0098d0:	2805883a 	mov	r2,r5
 c0098d4:	dc000015 	stw	r16,0(sp)
 c0098d8:	04030074 	movhi	r16,3073
 c0098dc:	dc400115 	stw	r17,4(sp)
 c0098e0:	300b883a 	mov	r5,r6
 c0098e4:	840ecb04 	addi	r16,r16,15148
 c0098e8:	2023883a 	mov	r17,r4
 c0098ec:	380d883a 	mov	r6,r7
 c0098f0:	1009883a 	mov	r4,r2
 c0098f4:	dfc00215 	stw	ra,8(sp)
 c0098f8:	80000015 	stw	zero,0(r16)
 c0098fc:	c00de080 	call	c00de08 <read>
 c009900:	00ffffc4 	movi	r3,-1
 c009904:	10c00526 	beq	r2,r3,c00991c <_read_r+0x50>
 c009908:	dfc00217 	ldw	ra,8(sp)
 c00990c:	dc400117 	ldw	r17,4(sp)
 c009910:	dc000017 	ldw	r16,0(sp)
 c009914:	dec00304 	addi	sp,sp,12
 c009918:	f800283a 	ret
 c00991c:	80c00017 	ldw	r3,0(r16)
 c009920:	183ff926 	beq	r3,zero,c009908 <__alt_data_end+0xfc009908>
 c009924:	88c00015 	stw	r3,0(r17)
 c009928:	003ff706 	br	c009908 <__alt_data_end+0xfc009908>

0c00992c <_realloc_r>:
 c00992c:	defff604 	addi	sp,sp,-40
 c009930:	dc800215 	stw	r18,8(sp)
 c009934:	dfc00915 	stw	ra,36(sp)
 c009938:	df000815 	stw	fp,32(sp)
 c00993c:	ddc00715 	stw	r23,28(sp)
 c009940:	dd800615 	stw	r22,24(sp)
 c009944:	dd400515 	stw	r21,20(sp)
 c009948:	dd000415 	stw	r20,16(sp)
 c00994c:	dcc00315 	stw	r19,12(sp)
 c009950:	dc400115 	stw	r17,4(sp)
 c009954:	dc000015 	stw	r16,0(sp)
 c009958:	3025883a 	mov	r18,r6
 c00995c:	2800b726 	beq	r5,zero,c009c3c <_realloc_r+0x310>
 c009960:	282b883a 	mov	r21,r5
 c009964:	2029883a 	mov	r20,r4
 c009968:	c00dd840 	call	c00dd84 <__malloc_lock>
 c00996c:	a8bfff17 	ldw	r2,-4(r21)
 c009970:	043fff04 	movi	r16,-4
 c009974:	90c002c4 	addi	r3,r18,11
 c009978:	01000584 	movi	r4,22
 c00997c:	acfffe04 	addi	r19,r21,-8
 c009980:	1420703a 	and	r16,r2,r16
 c009984:	20c0332e 	bgeu	r4,r3,c009a54 <_realloc_r+0x128>
 c009988:	047ffe04 	movi	r17,-8
 c00998c:	1c62703a 	and	r17,r3,r17
 c009990:	8807883a 	mov	r3,r17
 c009994:	88005816 	blt	r17,zero,c009af8 <_realloc_r+0x1cc>
 c009998:	8c805736 	bltu	r17,r18,c009af8 <_realloc_r+0x1cc>
 c00999c:	80c0300e 	bge	r16,r3,c009a60 <_realloc_r+0x134>
 c0099a0:	07030074 	movhi	fp,3073
 c0099a4:	e7027204 	addi	fp,fp,2504
 c0099a8:	e1c00217 	ldw	r7,8(fp)
 c0099ac:	9c09883a 	add	r4,r19,r16
 c0099b0:	22000117 	ldw	r8,4(r4)
 c0099b4:	21c06326 	beq	r4,r7,c009b44 <_realloc_r+0x218>
 c0099b8:	017fff84 	movi	r5,-2
 c0099bc:	414a703a 	and	r5,r8,r5
 c0099c0:	214b883a 	add	r5,r4,r5
 c0099c4:	29800117 	ldw	r6,4(r5)
 c0099c8:	3180004c 	andi	r6,r6,1
 c0099cc:	30003f26 	beq	r6,zero,c009acc <_realloc_r+0x1a0>
 c0099d0:	1080004c 	andi	r2,r2,1
 c0099d4:	10008326 	beq	r2,zero,c009be4 <_realloc_r+0x2b8>
 c0099d8:	900b883a 	mov	r5,r18
 c0099dc:	a009883a 	mov	r4,r20
 c0099e0:	c0057bc0 	call	c0057bc <_malloc_r>
 c0099e4:	1025883a 	mov	r18,r2
 c0099e8:	10011e26 	beq	r2,zero,c009e64 <_realloc_r+0x538>
 c0099ec:	a93fff17 	ldw	r4,-4(r21)
 c0099f0:	10fffe04 	addi	r3,r2,-8
 c0099f4:	00bfff84 	movi	r2,-2
 c0099f8:	2084703a 	and	r2,r4,r2
 c0099fc:	9885883a 	add	r2,r19,r2
 c009a00:	1880ee26 	beq	r3,r2,c009dbc <_realloc_r+0x490>
 c009a04:	81bfff04 	addi	r6,r16,-4
 c009a08:	00800904 	movi	r2,36
 c009a0c:	1180b836 	bltu	r2,r6,c009cf0 <_realloc_r+0x3c4>
 c009a10:	00c004c4 	movi	r3,19
 c009a14:	19809636 	bltu	r3,r6,c009c70 <_realloc_r+0x344>
 c009a18:	9005883a 	mov	r2,r18
 c009a1c:	a807883a 	mov	r3,r21
 c009a20:	19000017 	ldw	r4,0(r3)
 c009a24:	11000015 	stw	r4,0(r2)
 c009a28:	19000117 	ldw	r4,4(r3)
 c009a2c:	11000115 	stw	r4,4(r2)
 c009a30:	18c00217 	ldw	r3,8(r3)
 c009a34:	10c00215 	stw	r3,8(r2)
 c009a38:	a80b883a 	mov	r5,r21
 c009a3c:	a009883a 	mov	r4,r20
 c009a40:	c00508c0 	call	c00508c <_free_r>
 c009a44:	a009883a 	mov	r4,r20
 c009a48:	c00dda80 	call	c00dda8 <__malloc_unlock>
 c009a4c:	9005883a 	mov	r2,r18
 c009a50:	00001206 	br	c009a9c <_realloc_r+0x170>
 c009a54:	00c00404 	movi	r3,16
 c009a58:	1823883a 	mov	r17,r3
 c009a5c:	003fce06 	br	c009998 <__alt_data_end+0xfc009998>
 c009a60:	a825883a 	mov	r18,r21
 c009a64:	8445c83a 	sub	r2,r16,r17
 c009a68:	00c003c4 	movi	r3,15
 c009a6c:	18802636 	bltu	r3,r2,c009b08 <_realloc_r+0x1dc>
 c009a70:	99800117 	ldw	r6,4(r19)
 c009a74:	9c07883a 	add	r3,r19,r16
 c009a78:	3180004c 	andi	r6,r6,1
 c009a7c:	3420b03a 	or	r16,r6,r16
 c009a80:	9c000115 	stw	r16,4(r19)
 c009a84:	18800117 	ldw	r2,4(r3)
 c009a88:	10800054 	ori	r2,r2,1
 c009a8c:	18800115 	stw	r2,4(r3)
 c009a90:	a009883a 	mov	r4,r20
 c009a94:	c00dda80 	call	c00dda8 <__malloc_unlock>
 c009a98:	9005883a 	mov	r2,r18
 c009a9c:	dfc00917 	ldw	ra,36(sp)
 c009aa0:	df000817 	ldw	fp,32(sp)
 c009aa4:	ddc00717 	ldw	r23,28(sp)
 c009aa8:	dd800617 	ldw	r22,24(sp)
 c009aac:	dd400517 	ldw	r21,20(sp)
 c009ab0:	dd000417 	ldw	r20,16(sp)
 c009ab4:	dcc00317 	ldw	r19,12(sp)
 c009ab8:	dc800217 	ldw	r18,8(sp)
 c009abc:	dc400117 	ldw	r17,4(sp)
 c009ac0:	dc000017 	ldw	r16,0(sp)
 c009ac4:	dec00a04 	addi	sp,sp,40
 c009ac8:	f800283a 	ret
 c009acc:	017fff04 	movi	r5,-4
 c009ad0:	414a703a 	and	r5,r8,r5
 c009ad4:	814d883a 	add	r6,r16,r5
 c009ad8:	30c01f16 	blt	r6,r3,c009b58 <_realloc_r+0x22c>
 c009adc:	20800317 	ldw	r2,12(r4)
 c009ae0:	20c00217 	ldw	r3,8(r4)
 c009ae4:	a825883a 	mov	r18,r21
 c009ae8:	3021883a 	mov	r16,r6
 c009aec:	18800315 	stw	r2,12(r3)
 c009af0:	10c00215 	stw	r3,8(r2)
 c009af4:	003fdb06 	br	c009a64 <__alt_data_end+0xfc009a64>
 c009af8:	00800304 	movi	r2,12
 c009afc:	a0800015 	stw	r2,0(r20)
 c009b00:	0005883a 	mov	r2,zero
 c009b04:	003fe506 	br	c009a9c <__alt_data_end+0xfc009a9c>
 c009b08:	98c00117 	ldw	r3,4(r19)
 c009b0c:	9c4b883a 	add	r5,r19,r17
 c009b10:	11000054 	ori	r4,r2,1
 c009b14:	18c0004c 	andi	r3,r3,1
 c009b18:	1c62b03a 	or	r17,r3,r17
 c009b1c:	9c400115 	stw	r17,4(r19)
 c009b20:	29000115 	stw	r4,4(r5)
 c009b24:	2885883a 	add	r2,r5,r2
 c009b28:	10c00117 	ldw	r3,4(r2)
 c009b2c:	29400204 	addi	r5,r5,8
 c009b30:	a009883a 	mov	r4,r20
 c009b34:	18c00054 	ori	r3,r3,1
 c009b38:	10c00115 	stw	r3,4(r2)
 c009b3c:	c00508c0 	call	c00508c <_free_r>
 c009b40:	003fd306 	br	c009a90 <__alt_data_end+0xfc009a90>
 c009b44:	017fff04 	movi	r5,-4
 c009b48:	414a703a 	and	r5,r8,r5
 c009b4c:	89800404 	addi	r6,r17,16
 c009b50:	8151883a 	add	r8,r16,r5
 c009b54:	4180590e 	bge	r8,r6,c009cbc <_realloc_r+0x390>
 c009b58:	1080004c 	andi	r2,r2,1
 c009b5c:	103f9e1e 	bne	r2,zero,c0099d8 <__alt_data_end+0xfc0099d8>
 c009b60:	adbffe17 	ldw	r22,-8(r21)
 c009b64:	00bfff04 	movi	r2,-4
 c009b68:	9dadc83a 	sub	r22,r19,r22
 c009b6c:	b1800117 	ldw	r6,4(r22)
 c009b70:	3084703a 	and	r2,r6,r2
 c009b74:	20002026 	beq	r4,zero,c009bf8 <_realloc_r+0x2cc>
 c009b78:	80af883a 	add	r23,r16,r2
 c009b7c:	b96f883a 	add	r23,r23,r5
 c009b80:	21c05f26 	beq	r4,r7,c009d00 <_realloc_r+0x3d4>
 c009b84:	b8c01c16 	blt	r23,r3,c009bf8 <_realloc_r+0x2cc>
 c009b88:	20800317 	ldw	r2,12(r4)
 c009b8c:	20c00217 	ldw	r3,8(r4)
 c009b90:	81bfff04 	addi	r6,r16,-4
 c009b94:	01000904 	movi	r4,36
 c009b98:	18800315 	stw	r2,12(r3)
 c009b9c:	10c00215 	stw	r3,8(r2)
 c009ba0:	b0c00217 	ldw	r3,8(r22)
 c009ba4:	b0800317 	ldw	r2,12(r22)
 c009ba8:	b4800204 	addi	r18,r22,8
 c009bac:	18800315 	stw	r2,12(r3)
 c009bb0:	10c00215 	stw	r3,8(r2)
 c009bb4:	21801b36 	bltu	r4,r6,c009c24 <_realloc_r+0x2f8>
 c009bb8:	008004c4 	movi	r2,19
 c009bbc:	1180352e 	bgeu	r2,r6,c009c94 <_realloc_r+0x368>
 c009bc0:	a8800017 	ldw	r2,0(r21)
 c009bc4:	b0800215 	stw	r2,8(r22)
 c009bc8:	a8800117 	ldw	r2,4(r21)
 c009bcc:	b0800315 	stw	r2,12(r22)
 c009bd0:	008006c4 	movi	r2,27
 c009bd4:	11807f36 	bltu	r2,r6,c009dd4 <_realloc_r+0x4a8>
 c009bd8:	b0800404 	addi	r2,r22,16
 c009bdc:	ad400204 	addi	r21,r21,8
 c009be0:	00002d06 	br	c009c98 <_realloc_r+0x36c>
 c009be4:	adbffe17 	ldw	r22,-8(r21)
 c009be8:	00bfff04 	movi	r2,-4
 c009bec:	9dadc83a 	sub	r22,r19,r22
 c009bf0:	b1000117 	ldw	r4,4(r22)
 c009bf4:	2084703a 	and	r2,r4,r2
 c009bf8:	b03f7726 	beq	r22,zero,c0099d8 <__alt_data_end+0xfc0099d8>
 c009bfc:	80af883a 	add	r23,r16,r2
 c009c00:	b8ff7516 	blt	r23,r3,c0099d8 <__alt_data_end+0xfc0099d8>
 c009c04:	b0800317 	ldw	r2,12(r22)
 c009c08:	b0c00217 	ldw	r3,8(r22)
 c009c0c:	81bfff04 	addi	r6,r16,-4
 c009c10:	01000904 	movi	r4,36
 c009c14:	18800315 	stw	r2,12(r3)
 c009c18:	10c00215 	stw	r3,8(r2)
 c009c1c:	b4800204 	addi	r18,r22,8
 c009c20:	21bfe52e 	bgeu	r4,r6,c009bb8 <__alt_data_end+0xfc009bb8>
 c009c24:	a80b883a 	mov	r5,r21
 c009c28:	9009883a 	mov	r4,r18
 c009c2c:	c0097700 	call	c009770 <memmove>
 c009c30:	b821883a 	mov	r16,r23
 c009c34:	b027883a 	mov	r19,r22
 c009c38:	003f8a06 	br	c009a64 <__alt_data_end+0xfc009a64>
 c009c3c:	300b883a 	mov	r5,r6
 c009c40:	dfc00917 	ldw	ra,36(sp)
 c009c44:	df000817 	ldw	fp,32(sp)
 c009c48:	ddc00717 	ldw	r23,28(sp)
 c009c4c:	dd800617 	ldw	r22,24(sp)
 c009c50:	dd400517 	ldw	r21,20(sp)
 c009c54:	dd000417 	ldw	r20,16(sp)
 c009c58:	dcc00317 	ldw	r19,12(sp)
 c009c5c:	dc800217 	ldw	r18,8(sp)
 c009c60:	dc400117 	ldw	r17,4(sp)
 c009c64:	dc000017 	ldw	r16,0(sp)
 c009c68:	dec00a04 	addi	sp,sp,40
 c009c6c:	c0057bc1 	jmpi	c0057bc <_malloc_r>
 c009c70:	a8c00017 	ldw	r3,0(r21)
 c009c74:	90c00015 	stw	r3,0(r18)
 c009c78:	a8c00117 	ldw	r3,4(r21)
 c009c7c:	90c00115 	stw	r3,4(r18)
 c009c80:	00c006c4 	movi	r3,27
 c009c84:	19804536 	bltu	r3,r6,c009d9c <_realloc_r+0x470>
 c009c88:	90800204 	addi	r2,r18,8
 c009c8c:	a8c00204 	addi	r3,r21,8
 c009c90:	003f6306 	br	c009a20 <__alt_data_end+0xfc009a20>
 c009c94:	9005883a 	mov	r2,r18
 c009c98:	a8c00017 	ldw	r3,0(r21)
 c009c9c:	b821883a 	mov	r16,r23
 c009ca0:	b027883a 	mov	r19,r22
 c009ca4:	10c00015 	stw	r3,0(r2)
 c009ca8:	a8c00117 	ldw	r3,4(r21)
 c009cac:	10c00115 	stw	r3,4(r2)
 c009cb0:	a8c00217 	ldw	r3,8(r21)
 c009cb4:	10c00215 	stw	r3,8(r2)
 c009cb8:	003f6a06 	br	c009a64 <__alt_data_end+0xfc009a64>
 c009cbc:	9c67883a 	add	r19,r19,r17
 c009cc0:	4445c83a 	sub	r2,r8,r17
 c009cc4:	e4c00215 	stw	r19,8(fp)
 c009cc8:	10800054 	ori	r2,r2,1
 c009ccc:	98800115 	stw	r2,4(r19)
 c009cd0:	a8bfff17 	ldw	r2,-4(r21)
 c009cd4:	a009883a 	mov	r4,r20
 c009cd8:	1080004c 	andi	r2,r2,1
 c009cdc:	1462b03a 	or	r17,r2,r17
 c009ce0:	ac7fff15 	stw	r17,-4(r21)
 c009ce4:	c00dda80 	call	c00dda8 <__malloc_unlock>
 c009ce8:	a805883a 	mov	r2,r21
 c009cec:	003f6b06 	br	c009a9c <__alt_data_end+0xfc009a9c>
 c009cf0:	a80b883a 	mov	r5,r21
 c009cf4:	9009883a 	mov	r4,r18
 c009cf8:	c0097700 	call	c009770 <memmove>
 c009cfc:	003f4e06 	br	c009a38 <__alt_data_end+0xfc009a38>
 c009d00:	89000404 	addi	r4,r17,16
 c009d04:	b93fbc16 	blt	r23,r4,c009bf8 <__alt_data_end+0xfc009bf8>
 c009d08:	b0800317 	ldw	r2,12(r22)
 c009d0c:	b0c00217 	ldw	r3,8(r22)
 c009d10:	81bfff04 	addi	r6,r16,-4
 c009d14:	01000904 	movi	r4,36
 c009d18:	18800315 	stw	r2,12(r3)
 c009d1c:	10c00215 	stw	r3,8(r2)
 c009d20:	b4800204 	addi	r18,r22,8
 c009d24:	21804336 	bltu	r4,r6,c009e34 <_realloc_r+0x508>
 c009d28:	008004c4 	movi	r2,19
 c009d2c:	11803f2e 	bgeu	r2,r6,c009e2c <_realloc_r+0x500>
 c009d30:	a8800017 	ldw	r2,0(r21)
 c009d34:	b0800215 	stw	r2,8(r22)
 c009d38:	a8800117 	ldw	r2,4(r21)
 c009d3c:	b0800315 	stw	r2,12(r22)
 c009d40:	008006c4 	movi	r2,27
 c009d44:	11803f36 	bltu	r2,r6,c009e44 <_realloc_r+0x518>
 c009d48:	b0800404 	addi	r2,r22,16
 c009d4c:	ad400204 	addi	r21,r21,8
 c009d50:	a8c00017 	ldw	r3,0(r21)
 c009d54:	10c00015 	stw	r3,0(r2)
 c009d58:	a8c00117 	ldw	r3,4(r21)
 c009d5c:	10c00115 	stw	r3,4(r2)
 c009d60:	a8c00217 	ldw	r3,8(r21)
 c009d64:	10c00215 	stw	r3,8(r2)
 c009d68:	b447883a 	add	r3,r22,r17
 c009d6c:	bc45c83a 	sub	r2,r23,r17
 c009d70:	e0c00215 	stw	r3,8(fp)
 c009d74:	10800054 	ori	r2,r2,1
 c009d78:	18800115 	stw	r2,4(r3)
 c009d7c:	b0800117 	ldw	r2,4(r22)
 c009d80:	a009883a 	mov	r4,r20
 c009d84:	1080004c 	andi	r2,r2,1
 c009d88:	1462b03a 	or	r17,r2,r17
 c009d8c:	b4400115 	stw	r17,4(r22)
 c009d90:	c00dda80 	call	c00dda8 <__malloc_unlock>
 c009d94:	9005883a 	mov	r2,r18
 c009d98:	003f4006 	br	c009a9c <__alt_data_end+0xfc009a9c>
 c009d9c:	a8c00217 	ldw	r3,8(r21)
 c009da0:	90c00215 	stw	r3,8(r18)
 c009da4:	a8c00317 	ldw	r3,12(r21)
 c009da8:	90c00315 	stw	r3,12(r18)
 c009dac:	30801126 	beq	r6,r2,c009df4 <_realloc_r+0x4c8>
 c009db0:	90800404 	addi	r2,r18,16
 c009db4:	a8c00404 	addi	r3,r21,16
 c009db8:	003f1906 	br	c009a20 <__alt_data_end+0xfc009a20>
 c009dbc:	90ffff17 	ldw	r3,-4(r18)
 c009dc0:	00bfff04 	movi	r2,-4
 c009dc4:	a825883a 	mov	r18,r21
 c009dc8:	1884703a 	and	r2,r3,r2
 c009dcc:	80a1883a 	add	r16,r16,r2
 c009dd0:	003f2406 	br	c009a64 <__alt_data_end+0xfc009a64>
 c009dd4:	a8800217 	ldw	r2,8(r21)
 c009dd8:	b0800415 	stw	r2,16(r22)
 c009ddc:	a8800317 	ldw	r2,12(r21)
 c009de0:	b0800515 	stw	r2,20(r22)
 c009de4:	31000a26 	beq	r6,r4,c009e10 <_realloc_r+0x4e4>
 c009de8:	b0800604 	addi	r2,r22,24
 c009dec:	ad400404 	addi	r21,r21,16
 c009df0:	003fa906 	br	c009c98 <__alt_data_end+0xfc009c98>
 c009df4:	a9000417 	ldw	r4,16(r21)
 c009df8:	90800604 	addi	r2,r18,24
 c009dfc:	a8c00604 	addi	r3,r21,24
 c009e00:	91000415 	stw	r4,16(r18)
 c009e04:	a9000517 	ldw	r4,20(r21)
 c009e08:	91000515 	stw	r4,20(r18)
 c009e0c:	003f0406 	br	c009a20 <__alt_data_end+0xfc009a20>
 c009e10:	a8c00417 	ldw	r3,16(r21)
 c009e14:	ad400604 	addi	r21,r21,24
 c009e18:	b0800804 	addi	r2,r22,32
 c009e1c:	b0c00615 	stw	r3,24(r22)
 c009e20:	a8ffff17 	ldw	r3,-4(r21)
 c009e24:	b0c00715 	stw	r3,28(r22)
 c009e28:	003f9b06 	br	c009c98 <__alt_data_end+0xfc009c98>
 c009e2c:	9005883a 	mov	r2,r18
 c009e30:	003fc706 	br	c009d50 <__alt_data_end+0xfc009d50>
 c009e34:	a80b883a 	mov	r5,r21
 c009e38:	9009883a 	mov	r4,r18
 c009e3c:	c0097700 	call	c009770 <memmove>
 c009e40:	003fc906 	br	c009d68 <__alt_data_end+0xfc009d68>
 c009e44:	a8800217 	ldw	r2,8(r21)
 c009e48:	b0800415 	stw	r2,16(r22)
 c009e4c:	a8800317 	ldw	r2,12(r21)
 c009e50:	b0800515 	stw	r2,20(r22)
 c009e54:	31000726 	beq	r6,r4,c009e74 <_realloc_r+0x548>
 c009e58:	b0800604 	addi	r2,r22,24
 c009e5c:	ad400404 	addi	r21,r21,16
 c009e60:	003fbb06 	br	c009d50 <__alt_data_end+0xfc009d50>
 c009e64:	a009883a 	mov	r4,r20
 c009e68:	c00dda80 	call	c00dda8 <__malloc_unlock>
 c009e6c:	0005883a 	mov	r2,zero
 c009e70:	003f0a06 	br	c009a9c <__alt_data_end+0xfc009a9c>
 c009e74:	a8c00417 	ldw	r3,16(r21)
 c009e78:	ad400604 	addi	r21,r21,24
 c009e7c:	b0800804 	addi	r2,r22,32
 c009e80:	b0c00615 	stw	r3,24(r22)
 c009e84:	a8ffff17 	ldw	r3,-4(r21)
 c009e88:	b0c00715 	stw	r3,28(r22)
 c009e8c:	003fb006 	br	c009d50 <__alt_data_end+0xfc009d50>

0c009e90 <__swbuf_r>:
 c009e90:	defffb04 	addi	sp,sp,-20
 c009e94:	dcc00315 	stw	r19,12(sp)
 c009e98:	dc800215 	stw	r18,8(sp)
 c009e9c:	dc000015 	stw	r16,0(sp)
 c009ea0:	dfc00415 	stw	ra,16(sp)
 c009ea4:	dc400115 	stw	r17,4(sp)
 c009ea8:	2025883a 	mov	r18,r4
 c009eac:	2827883a 	mov	r19,r5
 c009eb0:	3021883a 	mov	r16,r6
 c009eb4:	20000226 	beq	r4,zero,c009ec0 <__swbuf_r+0x30>
 c009eb8:	20800e17 	ldw	r2,56(r4)
 c009ebc:	10004226 	beq	r2,zero,c009fc8 <__swbuf_r+0x138>
 c009ec0:	80800617 	ldw	r2,24(r16)
 c009ec4:	8100030b 	ldhu	r4,12(r16)
 c009ec8:	80800215 	stw	r2,8(r16)
 c009ecc:	2080020c 	andi	r2,r4,8
 c009ed0:	10003626 	beq	r2,zero,c009fac <__swbuf_r+0x11c>
 c009ed4:	80c00417 	ldw	r3,16(r16)
 c009ed8:	18003426 	beq	r3,zero,c009fac <__swbuf_r+0x11c>
 c009edc:	2088000c 	andi	r2,r4,8192
 c009ee0:	9c403fcc 	andi	r17,r19,255
 c009ee4:	10001a26 	beq	r2,zero,c009f50 <__swbuf_r+0xc0>
 c009ee8:	80800017 	ldw	r2,0(r16)
 c009eec:	81000517 	ldw	r4,20(r16)
 c009ef0:	10c7c83a 	sub	r3,r2,r3
 c009ef4:	1900200e 	bge	r3,r4,c009f78 <__swbuf_r+0xe8>
 c009ef8:	18c00044 	addi	r3,r3,1
 c009efc:	81000217 	ldw	r4,8(r16)
 c009f00:	11400044 	addi	r5,r2,1
 c009f04:	81400015 	stw	r5,0(r16)
 c009f08:	213fffc4 	addi	r4,r4,-1
 c009f0c:	81000215 	stw	r4,8(r16)
 c009f10:	14c00005 	stb	r19,0(r2)
 c009f14:	80800517 	ldw	r2,20(r16)
 c009f18:	10c01e26 	beq	r2,r3,c009f94 <__swbuf_r+0x104>
 c009f1c:	8080030b 	ldhu	r2,12(r16)
 c009f20:	1080004c 	andi	r2,r2,1
 c009f24:	10000226 	beq	r2,zero,c009f30 <__swbuf_r+0xa0>
 c009f28:	00800284 	movi	r2,10
 c009f2c:	88801926 	beq	r17,r2,c009f94 <__swbuf_r+0x104>
 c009f30:	8805883a 	mov	r2,r17
 c009f34:	dfc00417 	ldw	ra,16(sp)
 c009f38:	dcc00317 	ldw	r19,12(sp)
 c009f3c:	dc800217 	ldw	r18,8(sp)
 c009f40:	dc400117 	ldw	r17,4(sp)
 c009f44:	dc000017 	ldw	r16,0(sp)
 c009f48:	dec00504 	addi	sp,sp,20
 c009f4c:	f800283a 	ret
 c009f50:	81401917 	ldw	r5,100(r16)
 c009f54:	00b7ffc4 	movi	r2,-8193
 c009f58:	21080014 	ori	r4,r4,8192
 c009f5c:	2884703a 	and	r2,r5,r2
 c009f60:	80801915 	stw	r2,100(r16)
 c009f64:	80800017 	ldw	r2,0(r16)
 c009f68:	8100030d 	sth	r4,12(r16)
 c009f6c:	81000517 	ldw	r4,20(r16)
 c009f70:	10c7c83a 	sub	r3,r2,r3
 c009f74:	193fe016 	blt	r3,r4,c009ef8 <__alt_data_end+0xfc009ef8>
 c009f78:	800b883a 	mov	r5,r16
 c009f7c:	9009883a 	mov	r4,r18
 c009f80:	c004b2c0 	call	c004b2c <_fflush_r>
 c009f84:	1000071e 	bne	r2,zero,c009fa4 <__swbuf_r+0x114>
 c009f88:	80800017 	ldw	r2,0(r16)
 c009f8c:	00c00044 	movi	r3,1
 c009f90:	003fda06 	br	c009efc <__alt_data_end+0xfc009efc>
 c009f94:	800b883a 	mov	r5,r16
 c009f98:	9009883a 	mov	r4,r18
 c009f9c:	c004b2c0 	call	c004b2c <_fflush_r>
 c009fa0:	103fe326 	beq	r2,zero,c009f30 <__alt_data_end+0xfc009f30>
 c009fa4:	00bfffc4 	movi	r2,-1
 c009fa8:	003fe206 	br	c009f34 <__alt_data_end+0xfc009f34>
 c009fac:	800b883a 	mov	r5,r16
 c009fb0:	9009883a 	mov	r4,r18
 c009fb4:	c002f0c0 	call	c002f0c <__swsetup_r>
 c009fb8:	103ffa1e 	bne	r2,zero,c009fa4 <__alt_data_end+0xfc009fa4>
 c009fbc:	8100030b 	ldhu	r4,12(r16)
 c009fc0:	80c00417 	ldw	r3,16(r16)
 c009fc4:	003fc506 	br	c009edc <__alt_data_end+0xfc009edc>
 c009fc8:	c004f180 	call	c004f18 <__sinit>
 c009fcc:	003fbc06 	br	c009ec0 <__alt_data_end+0xfc009ec0>

0c009fd0 <__swbuf>:
 c009fd0:	00830074 	movhi	r2,3073
 c009fd4:	1087f904 	addi	r2,r2,8164
 c009fd8:	280d883a 	mov	r6,r5
 c009fdc:	200b883a 	mov	r5,r4
 c009fe0:	11000017 	ldw	r4,0(r2)
 c009fe4:	c009e901 	jmpi	c009e90 <__swbuf_r>

0c009fe8 <_wcrtomb_r>:
 c009fe8:	defff604 	addi	sp,sp,-40
 c009fec:	00830074 	movhi	r2,3073
 c009ff0:	dc800815 	stw	r18,32(sp)
 c009ff4:	dc400715 	stw	r17,28(sp)
 c009ff8:	dc000615 	stw	r16,24(sp)
 c009ffc:	1087fd04 	addi	r2,r2,8180
 c00a000:	dfc00915 	stw	ra,36(sp)
 c00a004:	2021883a 	mov	r16,r4
 c00a008:	3823883a 	mov	r17,r7
 c00a00c:	14800017 	ldw	r18,0(r2)
 c00a010:	28001426 	beq	r5,zero,c00a064 <_wcrtomb_r+0x7c>
 c00a014:	d9400415 	stw	r5,16(sp)
 c00a018:	d9800515 	stw	r6,20(sp)
 c00a01c:	c0055a00 	call	c0055a0 <__locale_charset>
 c00a020:	d9800517 	ldw	r6,20(sp)
 c00a024:	d9400417 	ldw	r5,16(sp)
 c00a028:	100f883a 	mov	r7,r2
 c00a02c:	dc400015 	stw	r17,0(sp)
 c00a030:	8009883a 	mov	r4,r16
 c00a034:	903ee83a 	callr	r18
 c00a038:	00ffffc4 	movi	r3,-1
 c00a03c:	10c0031e 	bne	r2,r3,c00a04c <_wcrtomb_r+0x64>
 c00a040:	88000015 	stw	zero,0(r17)
 c00a044:	00c02284 	movi	r3,138
 c00a048:	80c00015 	stw	r3,0(r16)
 c00a04c:	dfc00917 	ldw	ra,36(sp)
 c00a050:	dc800817 	ldw	r18,32(sp)
 c00a054:	dc400717 	ldw	r17,28(sp)
 c00a058:	dc000617 	ldw	r16,24(sp)
 c00a05c:	dec00a04 	addi	sp,sp,40
 c00a060:	f800283a 	ret
 c00a064:	c0055a00 	call	c0055a0 <__locale_charset>
 c00a068:	100f883a 	mov	r7,r2
 c00a06c:	dc400015 	stw	r17,0(sp)
 c00a070:	000d883a 	mov	r6,zero
 c00a074:	d9400104 	addi	r5,sp,4
 c00a078:	8009883a 	mov	r4,r16
 c00a07c:	903ee83a 	callr	r18
 c00a080:	003fed06 	br	c00a038 <__alt_data_end+0xfc00a038>

0c00a084 <wcrtomb>:
 c00a084:	defff604 	addi	sp,sp,-40
 c00a088:	00830074 	movhi	r2,3073
 c00a08c:	dc800615 	stw	r18,24(sp)
 c00a090:	dc400515 	stw	r17,20(sp)
 c00a094:	1087f904 	addi	r2,r2,8164
 c00a098:	dfc00915 	stw	ra,36(sp)
 c00a09c:	dd000815 	stw	r20,32(sp)
 c00a0a0:	dcc00715 	stw	r19,28(sp)
 c00a0a4:	dc000415 	stw	r16,16(sp)
 c00a0a8:	3025883a 	mov	r18,r6
 c00a0ac:	14400017 	ldw	r17,0(r2)
 c00a0b0:	20001926 	beq	r4,zero,c00a118 <wcrtomb+0x94>
 c00a0b4:	00830074 	movhi	r2,3073
 c00a0b8:	1087fd04 	addi	r2,r2,8180
 c00a0bc:	15000017 	ldw	r20,0(r2)
 c00a0c0:	2021883a 	mov	r16,r4
 c00a0c4:	2827883a 	mov	r19,r5
 c00a0c8:	c0055a00 	call	c0055a0 <__locale_charset>
 c00a0cc:	100f883a 	mov	r7,r2
 c00a0d0:	dc800015 	stw	r18,0(sp)
 c00a0d4:	980d883a 	mov	r6,r19
 c00a0d8:	800b883a 	mov	r5,r16
 c00a0dc:	8809883a 	mov	r4,r17
 c00a0e0:	a03ee83a 	callr	r20
 c00a0e4:	00ffffc4 	movi	r3,-1
 c00a0e8:	10c0031e 	bne	r2,r3,c00a0f8 <wcrtomb+0x74>
 c00a0ec:	90000015 	stw	zero,0(r18)
 c00a0f0:	00c02284 	movi	r3,138
 c00a0f4:	88c00015 	stw	r3,0(r17)
 c00a0f8:	dfc00917 	ldw	ra,36(sp)
 c00a0fc:	dd000817 	ldw	r20,32(sp)
 c00a100:	dcc00717 	ldw	r19,28(sp)
 c00a104:	dc800617 	ldw	r18,24(sp)
 c00a108:	dc400517 	ldw	r17,20(sp)
 c00a10c:	dc000417 	ldw	r16,16(sp)
 c00a110:	dec00a04 	addi	sp,sp,40
 c00a114:	f800283a 	ret
 c00a118:	00830074 	movhi	r2,3073
 c00a11c:	1087fd04 	addi	r2,r2,8180
 c00a120:	14000017 	ldw	r16,0(r2)
 c00a124:	c0055a00 	call	c0055a0 <__locale_charset>
 c00a128:	100f883a 	mov	r7,r2
 c00a12c:	dc800015 	stw	r18,0(sp)
 c00a130:	000d883a 	mov	r6,zero
 c00a134:	d9400104 	addi	r5,sp,4
 c00a138:	8809883a 	mov	r4,r17
 c00a13c:	803ee83a 	callr	r16
 c00a140:	003fe806 	br	c00a0e4 <__alt_data_end+0xfc00a0e4>

0c00a144 <__ascii_wctomb>:
 c00a144:	28000526 	beq	r5,zero,c00a15c <__ascii_wctomb+0x18>
 c00a148:	00803fc4 	movi	r2,255
 c00a14c:	11800536 	bltu	r2,r6,c00a164 <__ascii_wctomb+0x20>
 c00a150:	29800005 	stb	r6,0(r5)
 c00a154:	00800044 	movi	r2,1
 c00a158:	f800283a 	ret
 c00a15c:	0005883a 	mov	r2,zero
 c00a160:	f800283a 	ret
 c00a164:	00802284 	movi	r2,138
 c00a168:	20800015 	stw	r2,0(r4)
 c00a16c:	00bfffc4 	movi	r2,-1
 c00a170:	f800283a 	ret

0c00a174 <_wctomb_r>:
 c00a174:	00830074 	movhi	r2,3073
 c00a178:	defff904 	addi	sp,sp,-28
 c00a17c:	1087fd04 	addi	r2,r2,8180
 c00a180:	dfc00615 	stw	ra,24(sp)
 c00a184:	dc400515 	stw	r17,20(sp)
 c00a188:	dc000415 	stw	r16,16(sp)
 c00a18c:	3823883a 	mov	r17,r7
 c00a190:	14000017 	ldw	r16,0(r2)
 c00a194:	d9000115 	stw	r4,4(sp)
 c00a198:	d9400215 	stw	r5,8(sp)
 c00a19c:	d9800315 	stw	r6,12(sp)
 c00a1a0:	c0055a00 	call	c0055a0 <__locale_charset>
 c00a1a4:	d9800317 	ldw	r6,12(sp)
 c00a1a8:	d9400217 	ldw	r5,8(sp)
 c00a1ac:	d9000117 	ldw	r4,4(sp)
 c00a1b0:	100f883a 	mov	r7,r2
 c00a1b4:	dc400015 	stw	r17,0(sp)
 c00a1b8:	803ee83a 	callr	r16
 c00a1bc:	dfc00617 	ldw	ra,24(sp)
 c00a1c0:	dc400517 	ldw	r17,20(sp)
 c00a1c4:	dc000417 	ldw	r16,16(sp)
 c00a1c8:	dec00704 	addi	sp,sp,28
 c00a1cc:	f800283a 	ret

0c00a1d0 <__udivdi3>:
 c00a1d0:	defff404 	addi	sp,sp,-48
 c00a1d4:	dcc00515 	stw	r19,20(sp)
 c00a1d8:	dc000215 	stw	r16,8(sp)
 c00a1dc:	dfc00b15 	stw	ra,44(sp)
 c00a1e0:	df000a15 	stw	fp,40(sp)
 c00a1e4:	ddc00915 	stw	r23,36(sp)
 c00a1e8:	dd800815 	stw	r22,32(sp)
 c00a1ec:	dd400715 	stw	r21,28(sp)
 c00a1f0:	dd000615 	stw	r20,24(sp)
 c00a1f4:	dc800415 	stw	r18,16(sp)
 c00a1f8:	dc400315 	stw	r17,12(sp)
 c00a1fc:	2027883a 	mov	r19,r4
 c00a200:	2821883a 	mov	r16,r5
 c00a204:	3800461e 	bne	r7,zero,c00a320 <__udivdi3+0x150>
 c00a208:	3023883a 	mov	r17,r6
 c00a20c:	2025883a 	mov	r18,r4
 c00a210:	2980572e 	bgeu	r5,r6,c00a370 <__udivdi3+0x1a0>
 c00a214:	00bfffd4 	movui	r2,65535
 c00a218:	282d883a 	mov	r22,r5
 c00a21c:	1180b236 	bltu	r2,r6,c00a4e8 <__udivdi3+0x318>
 c00a220:	00803fc4 	movi	r2,255
 c00a224:	1185803a 	cmpltu	r2,r2,r6
 c00a228:	100490fa 	slli	r2,r2,3
 c00a22c:	3086d83a 	srl	r3,r6,r2
 c00a230:	01030074 	movhi	r4,3073
 c00a234:	2100fe04 	addi	r4,r4,1016
 c00a238:	20c7883a 	add	r3,r4,r3
 c00a23c:	18c00003 	ldbu	r3,0(r3)
 c00a240:	1885883a 	add	r2,r3,r2
 c00a244:	00c00804 	movi	r3,32
 c00a248:	1887c83a 	sub	r3,r3,r2
 c00a24c:	18000526 	beq	r3,zero,c00a264 <__udivdi3+0x94>
 c00a250:	80e0983a 	sll	r16,r16,r3
 c00a254:	9884d83a 	srl	r2,r19,r2
 c00a258:	30e2983a 	sll	r17,r6,r3
 c00a25c:	98e4983a 	sll	r18,r19,r3
 c00a260:	142cb03a 	or	r22,r2,r16
 c00a264:	882ad43a 	srli	r21,r17,16
 c00a268:	b009883a 	mov	r4,r22
 c00a26c:	8d3fffcc 	andi	r20,r17,65535
 c00a270:	a80b883a 	mov	r5,r21
 c00a274:	c00aeec0 	call	c00aeec <__umodsi3>
 c00a278:	b009883a 	mov	r4,r22
 c00a27c:	a80b883a 	mov	r5,r21
 c00a280:	1027883a 	mov	r19,r2
 c00a284:	c00ae880 	call	c00ae88 <__udivsi3>
 c00a288:	100b883a 	mov	r5,r2
 c00a28c:	a009883a 	mov	r4,r20
 c00a290:	102d883a 	mov	r22,r2
 c00a294:	c00097c0 	call	c00097c <__mulsi3>
 c00a298:	9826943a 	slli	r19,r19,16
 c00a29c:	9006d43a 	srli	r3,r18,16
 c00a2a0:	1cc6b03a 	or	r3,r3,r19
 c00a2a4:	1880052e 	bgeu	r3,r2,c00a2bc <__udivdi3+0xec>
 c00a2a8:	1c47883a 	add	r3,r3,r17
 c00a2ac:	b13fffc4 	addi	r4,r22,-1
 c00a2b0:	1c400136 	bltu	r3,r17,c00a2b8 <__udivdi3+0xe8>
 c00a2b4:	18814236 	bltu	r3,r2,c00a7c0 <__udivdi3+0x5f0>
 c00a2b8:	202d883a 	mov	r22,r4
 c00a2bc:	18a1c83a 	sub	r16,r3,r2
 c00a2c0:	8009883a 	mov	r4,r16
 c00a2c4:	a80b883a 	mov	r5,r21
 c00a2c8:	c00aeec0 	call	c00aeec <__umodsi3>
 c00a2cc:	1027883a 	mov	r19,r2
 c00a2d0:	8009883a 	mov	r4,r16
 c00a2d4:	a80b883a 	mov	r5,r21
 c00a2d8:	9826943a 	slli	r19,r19,16
 c00a2dc:	c00ae880 	call	c00ae88 <__udivsi3>
 c00a2e0:	100b883a 	mov	r5,r2
 c00a2e4:	a009883a 	mov	r4,r20
 c00a2e8:	94bfffcc 	andi	r18,r18,65535
 c00a2ec:	1021883a 	mov	r16,r2
 c00a2f0:	94e4b03a 	or	r18,r18,r19
 c00a2f4:	c00097c0 	call	c00097c <__mulsi3>
 c00a2f8:	9080052e 	bgeu	r18,r2,c00a310 <__udivdi3+0x140>
 c00a2fc:	8ca5883a 	add	r18,r17,r18
 c00a300:	80ffffc4 	addi	r3,r16,-1
 c00a304:	94410c36 	bltu	r18,r17,c00a738 <__udivdi3+0x568>
 c00a308:	90810b2e 	bgeu	r18,r2,c00a738 <__udivdi3+0x568>
 c00a30c:	843fff84 	addi	r16,r16,-2
 c00a310:	b004943a 	slli	r2,r22,16
 c00a314:	0007883a 	mov	r3,zero
 c00a318:	1404b03a 	or	r2,r2,r16
 c00a31c:	00005e06 	br	c00a498 <__udivdi3+0x2c8>
 c00a320:	29c05b36 	bltu	r5,r7,c00a490 <__udivdi3+0x2c0>
 c00a324:	00bfffd4 	movui	r2,65535
 c00a328:	11c0672e 	bgeu	r2,r7,c00a4c8 <__udivdi3+0x2f8>
 c00a32c:	00804034 	movhi	r2,256
 c00a330:	10bfffc4 	addi	r2,r2,-1
 c00a334:	11c10a36 	bltu	r2,r7,c00a760 <__udivdi3+0x590>
 c00a338:	00800404 	movi	r2,16
 c00a33c:	3886d83a 	srl	r3,r7,r2
 c00a340:	01030074 	movhi	r4,3073
 c00a344:	2100fe04 	addi	r4,r4,1016
 c00a348:	20c7883a 	add	r3,r4,r3
 c00a34c:	18c00003 	ldbu	r3,0(r3)
 c00a350:	05c00804 	movi	r23,32
 c00a354:	1885883a 	add	r2,r3,r2
 c00a358:	b8afc83a 	sub	r23,r23,r2
 c00a35c:	b800671e 	bne	r23,zero,c00a4fc <__udivdi3+0x32c>
 c00a360:	3c010536 	bltu	r7,r16,c00a778 <__udivdi3+0x5a8>
 c00a364:	9985403a 	cmpgeu	r2,r19,r6
 c00a368:	0007883a 	mov	r3,zero
 c00a36c:	00004a06 	br	c00a498 <__udivdi3+0x2c8>
 c00a370:	3000041e 	bne	r6,zero,c00a384 <__udivdi3+0x1b4>
 c00a374:	000b883a 	mov	r5,zero
 c00a378:	01000044 	movi	r4,1
 c00a37c:	c00ae880 	call	c00ae88 <__udivsi3>
 c00a380:	1023883a 	mov	r17,r2
 c00a384:	00bfffd4 	movui	r2,65535
 c00a388:	1440532e 	bgeu	r2,r17,c00a4d8 <__udivdi3+0x308>
 c00a38c:	00804034 	movhi	r2,256
 c00a390:	10bfffc4 	addi	r2,r2,-1
 c00a394:	1440f436 	bltu	r2,r17,c00a768 <__udivdi3+0x598>
 c00a398:	00800404 	movi	r2,16
 c00a39c:	8886d83a 	srl	r3,r17,r2
 c00a3a0:	01030074 	movhi	r4,3073
 c00a3a4:	2100fe04 	addi	r4,r4,1016
 c00a3a8:	20c7883a 	add	r3,r4,r3
 c00a3ac:	18c00003 	ldbu	r3,0(r3)
 c00a3b0:	1885883a 	add	r2,r3,r2
 c00a3b4:	00c00804 	movi	r3,32
 c00a3b8:	1887c83a 	sub	r3,r3,r2
 c00a3bc:	1800a51e 	bne	r3,zero,c00a654 <__udivdi3+0x484>
 c00a3c0:	882ad43a 	srli	r21,r17,16
 c00a3c4:	8461c83a 	sub	r16,r16,r17
 c00a3c8:	8d3fffcc 	andi	r20,r17,65535
 c00a3cc:	00c00044 	movi	r3,1
 c00a3d0:	a80b883a 	mov	r5,r21
 c00a3d4:	8009883a 	mov	r4,r16
 c00a3d8:	d8c00115 	stw	r3,4(sp)
 c00a3dc:	c00aeec0 	call	c00aeec <__umodsi3>
 c00a3e0:	a80b883a 	mov	r5,r21
 c00a3e4:	8009883a 	mov	r4,r16
 c00a3e8:	1027883a 	mov	r19,r2
 c00a3ec:	c00ae880 	call	c00ae88 <__udivsi3>
 c00a3f0:	a00b883a 	mov	r5,r20
 c00a3f4:	1009883a 	mov	r4,r2
 c00a3f8:	102d883a 	mov	r22,r2
 c00a3fc:	c00097c0 	call	c00097c <__mulsi3>
 c00a400:	9826943a 	slli	r19,r19,16
 c00a404:	900ed43a 	srli	r7,r18,16
 c00a408:	d8c00117 	ldw	r3,4(sp)
 c00a40c:	3cceb03a 	or	r7,r7,r19
 c00a410:	3880052e 	bgeu	r7,r2,c00a428 <__udivdi3+0x258>
 c00a414:	3c4f883a 	add	r7,r7,r17
 c00a418:	b13fffc4 	addi	r4,r22,-1
 c00a41c:	3c400136 	bltu	r7,r17,c00a424 <__udivdi3+0x254>
 c00a420:	3880e436 	bltu	r7,r2,c00a7b4 <__udivdi3+0x5e4>
 c00a424:	202d883a 	mov	r22,r4
 c00a428:	38a1c83a 	sub	r16,r7,r2
 c00a42c:	8009883a 	mov	r4,r16
 c00a430:	a80b883a 	mov	r5,r21
 c00a434:	d8c00115 	stw	r3,4(sp)
 c00a438:	c00aeec0 	call	c00aeec <__umodsi3>
 c00a43c:	1027883a 	mov	r19,r2
 c00a440:	8009883a 	mov	r4,r16
 c00a444:	a80b883a 	mov	r5,r21
 c00a448:	9826943a 	slli	r19,r19,16
 c00a44c:	c00ae880 	call	c00ae88 <__udivsi3>
 c00a450:	a00b883a 	mov	r5,r20
 c00a454:	1009883a 	mov	r4,r2
 c00a458:	94bfffcc 	andi	r18,r18,65535
 c00a45c:	1021883a 	mov	r16,r2
 c00a460:	94e4b03a 	or	r18,r18,r19
 c00a464:	c00097c0 	call	c00097c <__mulsi3>
 c00a468:	d8c00117 	ldw	r3,4(sp)
 c00a46c:	9080052e 	bgeu	r18,r2,c00a484 <__udivdi3+0x2b4>
 c00a470:	8ca5883a 	add	r18,r17,r18
 c00a474:	813fffc4 	addi	r4,r16,-1
 c00a478:	9440ad36 	bltu	r18,r17,c00a730 <__udivdi3+0x560>
 c00a47c:	9080ac2e 	bgeu	r18,r2,c00a730 <__udivdi3+0x560>
 c00a480:	843fff84 	addi	r16,r16,-2
 c00a484:	b004943a 	slli	r2,r22,16
 c00a488:	1404b03a 	or	r2,r2,r16
 c00a48c:	00000206 	br	c00a498 <__udivdi3+0x2c8>
 c00a490:	0007883a 	mov	r3,zero
 c00a494:	0005883a 	mov	r2,zero
 c00a498:	dfc00b17 	ldw	ra,44(sp)
 c00a49c:	df000a17 	ldw	fp,40(sp)
 c00a4a0:	ddc00917 	ldw	r23,36(sp)
 c00a4a4:	dd800817 	ldw	r22,32(sp)
 c00a4a8:	dd400717 	ldw	r21,28(sp)
 c00a4ac:	dd000617 	ldw	r20,24(sp)
 c00a4b0:	dcc00517 	ldw	r19,20(sp)
 c00a4b4:	dc800417 	ldw	r18,16(sp)
 c00a4b8:	dc400317 	ldw	r17,12(sp)
 c00a4bc:	dc000217 	ldw	r16,8(sp)
 c00a4c0:	dec00c04 	addi	sp,sp,48
 c00a4c4:	f800283a 	ret
 c00a4c8:	00803fc4 	movi	r2,255
 c00a4cc:	11c5803a 	cmpltu	r2,r2,r7
 c00a4d0:	100490fa 	slli	r2,r2,3
 c00a4d4:	003f9906 	br	c00a33c <__alt_data_end+0xfc00a33c>
 c00a4d8:	00803fc4 	movi	r2,255
 c00a4dc:	1445803a 	cmpltu	r2,r2,r17
 c00a4e0:	100490fa 	slli	r2,r2,3
 c00a4e4:	003fad06 	br	c00a39c <__alt_data_end+0xfc00a39c>
 c00a4e8:	00804034 	movhi	r2,256
 c00a4ec:	10bfffc4 	addi	r2,r2,-1
 c00a4f0:	11809f36 	bltu	r2,r6,c00a770 <__udivdi3+0x5a0>
 c00a4f4:	00800404 	movi	r2,16
 c00a4f8:	003f4c06 	br	c00a22c <__alt_data_end+0xfc00a22c>
 c00a4fc:	3dce983a 	sll	r7,r7,r23
 c00a500:	30b8d83a 	srl	fp,r6,r2
 c00a504:	80a2d83a 	srl	r17,r16,r2
 c00a508:	35cc983a 	sll	r6,r6,r23
 c00a50c:	3f38b03a 	or	fp,r7,fp
 c00a510:	e024d43a 	srli	r18,fp,16
 c00a514:	9884d83a 	srl	r2,r19,r2
 c00a518:	85e0983a 	sll	r16,r16,r23
 c00a51c:	8809883a 	mov	r4,r17
 c00a520:	900b883a 	mov	r5,r18
 c00a524:	d9800015 	stw	r6,0(sp)
 c00a528:	1420b03a 	or	r16,r2,r16
 c00a52c:	c00aeec0 	call	c00aeec <__umodsi3>
 c00a530:	900b883a 	mov	r5,r18
 c00a534:	8809883a 	mov	r4,r17
 c00a538:	1029883a 	mov	r20,r2
 c00a53c:	e5bfffcc 	andi	r22,fp,65535
 c00a540:	c00ae880 	call	c00ae88 <__udivsi3>
 c00a544:	100b883a 	mov	r5,r2
 c00a548:	b009883a 	mov	r4,r22
 c00a54c:	102b883a 	mov	r21,r2
 c00a550:	c00097c0 	call	c00097c <__mulsi3>
 c00a554:	a028943a 	slli	r20,r20,16
 c00a558:	8006d43a 	srli	r3,r16,16
 c00a55c:	1d06b03a 	or	r3,r3,r20
 c00a560:	1880042e 	bgeu	r3,r2,c00a574 <__udivdi3+0x3a4>
 c00a564:	1f07883a 	add	r3,r3,fp
 c00a568:	a93fffc4 	addi	r4,r21,-1
 c00a56c:	1f00892e 	bgeu	r3,fp,c00a794 <__udivdi3+0x5c4>
 c00a570:	202b883a 	mov	r21,r4
 c00a574:	18a3c83a 	sub	r17,r3,r2
 c00a578:	8809883a 	mov	r4,r17
 c00a57c:	900b883a 	mov	r5,r18
 c00a580:	c00aeec0 	call	c00aeec <__umodsi3>
 c00a584:	1029883a 	mov	r20,r2
 c00a588:	8809883a 	mov	r4,r17
 c00a58c:	900b883a 	mov	r5,r18
 c00a590:	a028943a 	slli	r20,r20,16
 c00a594:	c00ae880 	call	c00ae88 <__udivsi3>
 c00a598:	100b883a 	mov	r5,r2
 c00a59c:	b009883a 	mov	r4,r22
 c00a5a0:	843fffcc 	andi	r16,r16,65535
 c00a5a4:	1023883a 	mov	r17,r2
 c00a5a8:	8520b03a 	or	r16,r16,r20
 c00a5ac:	c00097c0 	call	c00097c <__mulsi3>
 c00a5b0:	8080042e 	bgeu	r16,r2,c00a5c4 <__udivdi3+0x3f4>
 c00a5b4:	8721883a 	add	r16,r16,fp
 c00a5b8:	88ffffc4 	addi	r3,r17,-1
 c00a5bc:	8700712e 	bgeu	r16,fp,c00a784 <__udivdi3+0x5b4>
 c00a5c0:	1823883a 	mov	r17,r3
 c00a5c4:	a80e943a 	slli	r7,r21,16
 c00a5c8:	d8c00017 	ldw	r3,0(sp)
 c00a5cc:	80a1c83a 	sub	r16,r16,r2
 c00a5d0:	3c64b03a 	or	r18,r7,r17
 c00a5d4:	1d3fffcc 	andi	r20,r3,65535
 c00a5d8:	9022d43a 	srli	r17,r18,16
 c00a5dc:	95bfffcc 	andi	r22,r18,65535
 c00a5e0:	a00b883a 	mov	r5,r20
 c00a5e4:	b009883a 	mov	r4,r22
 c00a5e8:	182ad43a 	srli	r21,r3,16
 c00a5ec:	c00097c0 	call	c00097c <__mulsi3>
 c00a5f0:	a00b883a 	mov	r5,r20
 c00a5f4:	8809883a 	mov	r4,r17
 c00a5f8:	1039883a 	mov	fp,r2
 c00a5fc:	c00097c0 	call	c00097c <__mulsi3>
 c00a600:	8809883a 	mov	r4,r17
 c00a604:	a80b883a 	mov	r5,r21
 c00a608:	1029883a 	mov	r20,r2
 c00a60c:	c00097c0 	call	c00097c <__mulsi3>
 c00a610:	a80b883a 	mov	r5,r21
 c00a614:	b009883a 	mov	r4,r22
 c00a618:	1023883a 	mov	r17,r2
 c00a61c:	c00097c0 	call	c00097c <__mulsi3>
 c00a620:	e006d43a 	srli	r3,fp,16
 c00a624:	1505883a 	add	r2,r2,r20
 c00a628:	1887883a 	add	r3,r3,r2
 c00a62c:	1d00022e 	bgeu	r3,r20,c00a638 <__udivdi3+0x468>
 c00a630:	00800074 	movhi	r2,1
 c00a634:	88a3883a 	add	r17,r17,r2
 c00a638:	1804d43a 	srli	r2,r3,16
 c00a63c:	1463883a 	add	r17,r2,r17
 c00a640:	84404436 	bltu	r16,r17,c00a754 <__udivdi3+0x584>
 c00a644:	84403e26 	beq	r16,r17,c00a740 <__udivdi3+0x570>
 c00a648:	9005883a 	mov	r2,r18
 c00a64c:	0007883a 	mov	r3,zero
 c00a650:	003f9106 	br	c00a498 <__alt_data_end+0xfc00a498>
 c00a654:	88e2983a 	sll	r17,r17,r3
 c00a658:	80aed83a 	srl	r23,r16,r2
 c00a65c:	80e0983a 	sll	r16,r16,r3
 c00a660:	882ad43a 	srli	r21,r17,16
 c00a664:	9884d83a 	srl	r2,r19,r2
 c00a668:	b809883a 	mov	r4,r23
 c00a66c:	a80b883a 	mov	r5,r21
 c00a670:	98e4983a 	sll	r18,r19,r3
 c00a674:	142cb03a 	or	r22,r2,r16
 c00a678:	c00aeec0 	call	c00aeec <__umodsi3>
 c00a67c:	b809883a 	mov	r4,r23
 c00a680:	a80b883a 	mov	r5,r21
 c00a684:	1027883a 	mov	r19,r2
 c00a688:	8d3fffcc 	andi	r20,r17,65535
 c00a68c:	c00ae880 	call	c00ae88 <__udivsi3>
 c00a690:	a009883a 	mov	r4,r20
 c00a694:	100b883a 	mov	r5,r2
 c00a698:	102f883a 	mov	r23,r2
 c00a69c:	c00097c0 	call	c00097c <__mulsi3>
 c00a6a0:	9826943a 	slli	r19,r19,16
 c00a6a4:	b008d43a 	srli	r4,r22,16
 c00a6a8:	24c8b03a 	or	r4,r4,r19
 c00a6ac:	2080062e 	bgeu	r4,r2,c00a6c8 <__udivdi3+0x4f8>
 c00a6b0:	2449883a 	add	r4,r4,r17
 c00a6b4:	b8ffffc4 	addi	r3,r23,-1
 c00a6b8:	24403c36 	bltu	r4,r17,c00a7ac <__udivdi3+0x5dc>
 c00a6bc:	20803b2e 	bgeu	r4,r2,c00a7ac <__udivdi3+0x5dc>
 c00a6c0:	bdffff84 	addi	r23,r23,-2
 c00a6c4:	2449883a 	add	r4,r4,r17
 c00a6c8:	20a1c83a 	sub	r16,r4,r2
 c00a6cc:	a80b883a 	mov	r5,r21
 c00a6d0:	8009883a 	mov	r4,r16
 c00a6d4:	c00aeec0 	call	c00aeec <__umodsi3>
 c00a6d8:	a80b883a 	mov	r5,r21
 c00a6dc:	8009883a 	mov	r4,r16
 c00a6e0:	1027883a 	mov	r19,r2
 c00a6e4:	c00ae880 	call	c00ae88 <__udivsi3>
 c00a6e8:	a009883a 	mov	r4,r20
 c00a6ec:	100b883a 	mov	r5,r2
 c00a6f0:	9826943a 	slli	r19,r19,16
 c00a6f4:	1039883a 	mov	fp,r2
 c00a6f8:	c00097c0 	call	c00097c <__mulsi3>
 c00a6fc:	b13fffcc 	andi	r4,r22,65535
 c00a700:	24c8b03a 	or	r4,r4,r19
 c00a704:	2080062e 	bgeu	r4,r2,c00a720 <__udivdi3+0x550>
 c00a708:	2449883a 	add	r4,r4,r17
 c00a70c:	e0ffffc4 	addi	r3,fp,-1
 c00a710:	24402436 	bltu	r4,r17,c00a7a4 <__udivdi3+0x5d4>
 c00a714:	2080232e 	bgeu	r4,r2,c00a7a4 <__udivdi3+0x5d4>
 c00a718:	e73fff84 	addi	fp,fp,-2
 c00a71c:	2449883a 	add	r4,r4,r17
 c00a720:	b82e943a 	slli	r23,r23,16
 c00a724:	20a1c83a 	sub	r16,r4,r2
 c00a728:	bf06b03a 	or	r3,r23,fp
 c00a72c:	003f2806 	br	c00a3d0 <__alt_data_end+0xfc00a3d0>
 c00a730:	2021883a 	mov	r16,r4
 c00a734:	003f5306 	br	c00a484 <__alt_data_end+0xfc00a484>
 c00a738:	1821883a 	mov	r16,r3
 c00a73c:	003ef406 	br	c00a310 <__alt_data_end+0xfc00a310>
 c00a740:	1806943a 	slli	r3,r3,16
 c00a744:	9de6983a 	sll	r19,r19,r23
 c00a748:	e73fffcc 	andi	fp,fp,65535
 c00a74c:	1f07883a 	add	r3,r3,fp
 c00a750:	98ffbd2e 	bgeu	r19,r3,c00a648 <__alt_data_end+0xfc00a648>
 c00a754:	90bfffc4 	addi	r2,r18,-1
 c00a758:	0007883a 	mov	r3,zero
 c00a75c:	003f4e06 	br	c00a498 <__alt_data_end+0xfc00a498>
 c00a760:	00800604 	movi	r2,24
 c00a764:	003ef506 	br	c00a33c <__alt_data_end+0xfc00a33c>
 c00a768:	00800604 	movi	r2,24
 c00a76c:	003f0b06 	br	c00a39c <__alt_data_end+0xfc00a39c>
 c00a770:	00800604 	movi	r2,24
 c00a774:	003ead06 	br	c00a22c <__alt_data_end+0xfc00a22c>
 c00a778:	0007883a 	mov	r3,zero
 c00a77c:	00800044 	movi	r2,1
 c00a780:	003f4506 	br	c00a498 <__alt_data_end+0xfc00a498>
 c00a784:	80bf8e2e 	bgeu	r16,r2,c00a5c0 <__alt_data_end+0xfc00a5c0>
 c00a788:	8c7fff84 	addi	r17,r17,-2
 c00a78c:	8721883a 	add	r16,r16,fp
 c00a790:	003f8c06 	br	c00a5c4 <__alt_data_end+0xfc00a5c4>
 c00a794:	18bf762e 	bgeu	r3,r2,c00a570 <__alt_data_end+0xfc00a570>
 c00a798:	ad7fff84 	addi	r21,r21,-2
 c00a79c:	1f07883a 	add	r3,r3,fp
 c00a7a0:	003f7406 	br	c00a574 <__alt_data_end+0xfc00a574>
 c00a7a4:	1839883a 	mov	fp,r3
 c00a7a8:	003fdd06 	br	c00a720 <__alt_data_end+0xfc00a720>
 c00a7ac:	182f883a 	mov	r23,r3
 c00a7b0:	003fc506 	br	c00a6c8 <__alt_data_end+0xfc00a6c8>
 c00a7b4:	b5bfff84 	addi	r22,r22,-2
 c00a7b8:	3c4f883a 	add	r7,r7,r17
 c00a7bc:	003f1a06 	br	c00a428 <__alt_data_end+0xfc00a428>
 c00a7c0:	b5bfff84 	addi	r22,r22,-2
 c00a7c4:	1c47883a 	add	r3,r3,r17
 c00a7c8:	003ebc06 	br	c00a2bc <__alt_data_end+0xfc00a2bc>

0c00a7cc <__umoddi3>:
 c00a7cc:	defff304 	addi	sp,sp,-52
 c00a7d0:	df000b15 	stw	fp,44(sp)
 c00a7d4:	dc400415 	stw	r17,16(sp)
 c00a7d8:	dc000315 	stw	r16,12(sp)
 c00a7dc:	dfc00c15 	stw	ra,48(sp)
 c00a7e0:	ddc00a15 	stw	r23,40(sp)
 c00a7e4:	dd800915 	stw	r22,36(sp)
 c00a7e8:	dd400815 	stw	r21,32(sp)
 c00a7ec:	dd000715 	stw	r20,28(sp)
 c00a7f0:	dcc00615 	stw	r19,24(sp)
 c00a7f4:	dc800515 	stw	r18,20(sp)
 c00a7f8:	2021883a 	mov	r16,r4
 c00a7fc:	2823883a 	mov	r17,r5
 c00a800:	2839883a 	mov	fp,r5
 c00a804:	3800401e 	bne	r7,zero,c00a908 <__umoddi3+0x13c>
 c00a808:	3027883a 	mov	r19,r6
 c00a80c:	2029883a 	mov	r20,r4
 c00a810:	2980552e 	bgeu	r5,r6,c00a968 <__umoddi3+0x19c>
 c00a814:	00bfffd4 	movui	r2,65535
 c00a818:	1180a236 	bltu	r2,r6,c00aaa4 <__umoddi3+0x2d8>
 c00a81c:	01003fc4 	movi	r4,255
 c00a820:	2189803a 	cmpltu	r4,r4,r6
 c00a824:	200890fa 	slli	r4,r4,3
 c00a828:	3104d83a 	srl	r2,r6,r4
 c00a82c:	00c30074 	movhi	r3,3073
 c00a830:	18c0fe04 	addi	r3,r3,1016
 c00a834:	1885883a 	add	r2,r3,r2
 c00a838:	10c00003 	ldbu	r3,0(r2)
 c00a83c:	00800804 	movi	r2,32
 c00a840:	1909883a 	add	r4,r3,r4
 c00a844:	1125c83a 	sub	r18,r2,r4
 c00a848:	90000526 	beq	r18,zero,c00a860 <__umoddi3+0x94>
 c00a84c:	8ca2983a 	sll	r17,r17,r18
 c00a850:	8108d83a 	srl	r4,r16,r4
 c00a854:	34a6983a 	sll	r19,r6,r18
 c00a858:	84a8983a 	sll	r20,r16,r18
 c00a85c:	2478b03a 	or	fp,r4,r17
 c00a860:	982cd43a 	srli	r22,r19,16
 c00a864:	e009883a 	mov	r4,fp
 c00a868:	9dffffcc 	andi	r23,r19,65535
 c00a86c:	b00b883a 	mov	r5,r22
 c00a870:	c00aeec0 	call	c00aeec <__umodsi3>
 c00a874:	b00b883a 	mov	r5,r22
 c00a878:	e009883a 	mov	r4,fp
 c00a87c:	102b883a 	mov	r21,r2
 c00a880:	c00ae880 	call	c00ae88 <__udivsi3>
 c00a884:	100b883a 	mov	r5,r2
 c00a888:	b809883a 	mov	r4,r23
 c00a88c:	c00097c0 	call	c00097c <__mulsi3>
 c00a890:	a82a943a 	slli	r21,r21,16
 c00a894:	a006d43a 	srli	r3,r20,16
 c00a898:	1d46b03a 	or	r3,r3,r21
 c00a89c:	1880032e 	bgeu	r3,r2,c00a8ac <__umoddi3+0xe0>
 c00a8a0:	1cc7883a 	add	r3,r3,r19
 c00a8a4:	1cc00136 	bltu	r3,r19,c00a8ac <__umoddi3+0xe0>
 c00a8a8:	18813136 	bltu	r3,r2,c00ad70 <__umoddi3+0x5a4>
 c00a8ac:	18a1c83a 	sub	r16,r3,r2
 c00a8b0:	b00b883a 	mov	r5,r22
 c00a8b4:	8009883a 	mov	r4,r16
 c00a8b8:	c00aeec0 	call	c00aeec <__umodsi3>
 c00a8bc:	b00b883a 	mov	r5,r22
 c00a8c0:	8009883a 	mov	r4,r16
 c00a8c4:	1023883a 	mov	r17,r2
 c00a8c8:	c00ae880 	call	c00ae88 <__udivsi3>
 c00a8cc:	100b883a 	mov	r5,r2
 c00a8d0:	b809883a 	mov	r4,r23
 c00a8d4:	8822943a 	slli	r17,r17,16
 c00a8d8:	c00097c0 	call	c00097c <__mulsi3>
 c00a8dc:	a0ffffcc 	andi	r3,r20,65535
 c00a8e0:	1c46b03a 	or	r3,r3,r17
 c00a8e4:	1880042e 	bgeu	r3,r2,c00a8f8 <__umoddi3+0x12c>
 c00a8e8:	1cc7883a 	add	r3,r3,r19
 c00a8ec:	1cc00236 	bltu	r3,r19,c00a8f8 <__umoddi3+0x12c>
 c00a8f0:	1880012e 	bgeu	r3,r2,c00a8f8 <__umoddi3+0x12c>
 c00a8f4:	1cc7883a 	add	r3,r3,r19
 c00a8f8:	1885c83a 	sub	r2,r3,r2
 c00a8fc:	1484d83a 	srl	r2,r2,r18
 c00a900:	0007883a 	mov	r3,zero
 c00a904:	00005306 	br	c00aa54 <__umoddi3+0x288>
 c00a908:	29c05036 	bltu	r5,r7,c00aa4c <__umoddi3+0x280>
 c00a90c:	00bfffd4 	movui	r2,65535
 c00a910:	11c05c2e 	bgeu	r2,r7,c00aa84 <__umoddi3+0x2b8>
 c00a914:	00804034 	movhi	r2,256
 c00a918:	10bfffc4 	addi	r2,r2,-1
 c00a91c:	11c10636 	bltu	r2,r7,c00ad38 <__umoddi3+0x56c>
 c00a920:	01000404 	movi	r4,16
 c00a924:	3904d83a 	srl	r2,r7,r4
 c00a928:	00c30074 	movhi	r3,3073
 c00a92c:	18c0fe04 	addi	r3,r3,1016
 c00a930:	1885883a 	add	r2,r3,r2
 c00a934:	14c00003 	ldbu	r19,0(r2)
 c00a938:	00c00804 	movi	r3,32
 c00a93c:	9927883a 	add	r19,r19,r4
 c00a940:	1ce9c83a 	sub	r20,r3,r19
 c00a944:	a0005c1e 	bne	r20,zero,c00aab8 <__umoddi3+0x2ec>
 c00a948:	3c400136 	bltu	r7,r17,c00a950 <__umoddi3+0x184>
 c00a94c:	81810a36 	bltu	r16,r6,c00ad78 <__umoddi3+0x5ac>
 c00a950:	8185c83a 	sub	r2,r16,r6
 c00a954:	89e3c83a 	sub	r17,r17,r7
 c00a958:	8089803a 	cmpltu	r4,r16,r2
 c00a95c:	8939c83a 	sub	fp,r17,r4
 c00a960:	e007883a 	mov	r3,fp
 c00a964:	00003b06 	br	c00aa54 <__umoddi3+0x288>
 c00a968:	3000041e 	bne	r6,zero,c00a97c <__umoddi3+0x1b0>
 c00a96c:	000b883a 	mov	r5,zero
 c00a970:	01000044 	movi	r4,1
 c00a974:	c00ae880 	call	c00ae88 <__udivsi3>
 c00a978:	1027883a 	mov	r19,r2
 c00a97c:	00bfffd4 	movui	r2,65535
 c00a980:	14c0442e 	bgeu	r2,r19,c00aa94 <__umoddi3+0x2c8>
 c00a984:	00804034 	movhi	r2,256
 c00a988:	10bfffc4 	addi	r2,r2,-1
 c00a98c:	14c0ec36 	bltu	r2,r19,c00ad40 <__umoddi3+0x574>
 c00a990:	00800404 	movi	r2,16
 c00a994:	9886d83a 	srl	r3,r19,r2
 c00a998:	01030074 	movhi	r4,3073
 c00a99c:	2100fe04 	addi	r4,r4,1016
 c00a9a0:	20c7883a 	add	r3,r4,r3
 c00a9a4:	18c00003 	ldbu	r3,0(r3)
 c00a9a8:	1887883a 	add	r3,r3,r2
 c00a9ac:	00800804 	movi	r2,32
 c00a9b0:	10e5c83a 	sub	r18,r2,r3
 c00a9b4:	9000ab1e 	bne	r18,zero,c00ac64 <__umoddi3+0x498>
 c00a9b8:	982cd43a 	srli	r22,r19,16
 c00a9bc:	8ce3c83a 	sub	r17,r17,r19
 c00a9c0:	9dffffcc 	andi	r23,r19,65535
 c00a9c4:	b00b883a 	mov	r5,r22
 c00a9c8:	8809883a 	mov	r4,r17
 c00a9cc:	c00aeec0 	call	c00aeec <__umodsi3>
 c00a9d0:	b00b883a 	mov	r5,r22
 c00a9d4:	8809883a 	mov	r4,r17
 c00a9d8:	102b883a 	mov	r21,r2
 c00a9dc:	c00ae880 	call	c00ae88 <__udivsi3>
 c00a9e0:	b80b883a 	mov	r5,r23
 c00a9e4:	1009883a 	mov	r4,r2
 c00a9e8:	c00097c0 	call	c00097c <__mulsi3>
 c00a9ec:	a82a943a 	slli	r21,r21,16
 c00a9f0:	a006d43a 	srli	r3,r20,16
 c00a9f4:	1d46b03a 	or	r3,r3,r21
 c00a9f8:	1880042e 	bgeu	r3,r2,c00aa0c <__umoddi3+0x240>
 c00a9fc:	1cc7883a 	add	r3,r3,r19
 c00aa00:	1cc00236 	bltu	r3,r19,c00aa0c <__umoddi3+0x240>
 c00aa04:	1880012e 	bgeu	r3,r2,c00aa0c <__umoddi3+0x240>
 c00aa08:	1cc7883a 	add	r3,r3,r19
 c00aa0c:	18a1c83a 	sub	r16,r3,r2
 c00aa10:	b00b883a 	mov	r5,r22
 c00aa14:	8009883a 	mov	r4,r16
 c00aa18:	c00aeec0 	call	c00aeec <__umodsi3>
 c00aa1c:	1023883a 	mov	r17,r2
 c00aa20:	b00b883a 	mov	r5,r22
 c00aa24:	8009883a 	mov	r4,r16
 c00aa28:	c00ae880 	call	c00ae88 <__udivsi3>
 c00aa2c:	8822943a 	slli	r17,r17,16
 c00aa30:	b80b883a 	mov	r5,r23
 c00aa34:	1009883a 	mov	r4,r2
 c00aa38:	c00097c0 	call	c00097c <__mulsi3>
 c00aa3c:	a53fffcc 	andi	r20,r20,65535
 c00aa40:	a446b03a 	or	r3,r20,r17
 c00aa44:	18bfac2e 	bgeu	r3,r2,c00a8f8 <__alt_data_end+0xfc00a8f8>
 c00aa48:	003fa706 	br	c00a8e8 <__alt_data_end+0xfc00a8e8>
 c00aa4c:	2005883a 	mov	r2,r4
 c00aa50:	2807883a 	mov	r3,r5
 c00aa54:	dfc00c17 	ldw	ra,48(sp)
 c00aa58:	df000b17 	ldw	fp,44(sp)
 c00aa5c:	ddc00a17 	ldw	r23,40(sp)
 c00aa60:	dd800917 	ldw	r22,36(sp)
 c00aa64:	dd400817 	ldw	r21,32(sp)
 c00aa68:	dd000717 	ldw	r20,28(sp)
 c00aa6c:	dcc00617 	ldw	r19,24(sp)
 c00aa70:	dc800517 	ldw	r18,20(sp)
 c00aa74:	dc400417 	ldw	r17,16(sp)
 c00aa78:	dc000317 	ldw	r16,12(sp)
 c00aa7c:	dec00d04 	addi	sp,sp,52
 c00aa80:	f800283a 	ret
 c00aa84:	04c03fc4 	movi	r19,255
 c00aa88:	99c9803a 	cmpltu	r4,r19,r7
 c00aa8c:	200890fa 	slli	r4,r4,3
 c00aa90:	003fa406 	br	c00a924 <__alt_data_end+0xfc00a924>
 c00aa94:	00803fc4 	movi	r2,255
 c00aa98:	14c5803a 	cmpltu	r2,r2,r19
 c00aa9c:	100490fa 	slli	r2,r2,3
 c00aaa0:	003fbc06 	br	c00a994 <__alt_data_end+0xfc00a994>
 c00aaa4:	00804034 	movhi	r2,256
 c00aaa8:	10bfffc4 	addi	r2,r2,-1
 c00aaac:	1180a636 	bltu	r2,r6,c00ad48 <__umoddi3+0x57c>
 c00aab0:	01000404 	movi	r4,16
 c00aab4:	003f5c06 	br	c00a828 <__alt_data_end+0xfc00a828>
 c00aab8:	3d0e983a 	sll	r7,r7,r20
 c00aabc:	34ead83a 	srl	r21,r6,r19
 c00aac0:	8cc6d83a 	srl	r3,r17,r19
 c00aac4:	8d10983a 	sll	r8,r17,r20
 c00aac8:	3d6ab03a 	or	r21,r7,r21
 c00aacc:	a82cd43a 	srli	r22,r21,16
 c00aad0:	84e2d83a 	srl	r17,r16,r19
 c00aad4:	1809883a 	mov	r4,r3
 c00aad8:	b00b883a 	mov	r5,r22
 c00aadc:	8a22b03a 	or	r17,r17,r8
 c00aae0:	3524983a 	sll	r18,r6,r20
 c00aae4:	dc400015 	stw	r17,0(sp)
 c00aae8:	d8c00115 	stw	r3,4(sp)
 c00aaec:	c00aeec0 	call	c00aeec <__umodsi3>
 c00aaf0:	d8c00117 	ldw	r3,4(sp)
 c00aaf4:	b00b883a 	mov	r5,r22
 c00aaf8:	1039883a 	mov	fp,r2
 c00aafc:	1809883a 	mov	r4,r3
 c00ab00:	c00ae880 	call	c00ae88 <__udivsi3>
 c00ab04:	adffffcc 	andi	r23,r21,65535
 c00ab08:	100b883a 	mov	r5,r2
 c00ab0c:	b809883a 	mov	r4,r23
 c00ab10:	1023883a 	mov	r17,r2
 c00ab14:	c00097c0 	call	c00097c <__mulsi3>
 c00ab18:	d9400017 	ldw	r5,0(sp)
 c00ab1c:	e008943a 	slli	r4,fp,16
 c00ab20:	8520983a 	sll	r16,r16,r20
 c00ab24:	2806d43a 	srli	r3,r5,16
 c00ab28:	1906b03a 	or	r3,r3,r4
 c00ab2c:	1880042e 	bgeu	r3,r2,c00ab40 <__umoddi3+0x374>
 c00ab30:	1d47883a 	add	r3,r3,r21
 c00ab34:	893fffc4 	addi	r4,r17,-1
 c00ab38:	1d40892e 	bgeu	r3,r21,c00ad60 <__umoddi3+0x594>
 c00ab3c:	2023883a 	mov	r17,r4
 c00ab40:	18b9c83a 	sub	fp,r3,r2
 c00ab44:	b00b883a 	mov	r5,r22
 c00ab48:	e009883a 	mov	r4,fp
 c00ab4c:	c00aeec0 	call	c00aeec <__umodsi3>
 c00ab50:	b00b883a 	mov	r5,r22
 c00ab54:	e009883a 	mov	r4,fp
 c00ab58:	d8800215 	stw	r2,8(sp)
 c00ab5c:	c00ae880 	call	c00ae88 <__udivsi3>
 c00ab60:	100b883a 	mov	r5,r2
 c00ab64:	b809883a 	mov	r4,r23
 c00ab68:	102d883a 	mov	r22,r2
 c00ab6c:	c00097c0 	call	c00097c <__mulsi3>
 c00ab70:	d9800217 	ldw	r6,8(sp)
 c00ab74:	d8c00017 	ldw	r3,0(sp)
 c00ab78:	300c943a 	slli	r6,r6,16
 c00ab7c:	1a3fffcc 	andi	r8,r3,65535
 c00ab80:	4190b03a 	or	r8,r8,r6
 c00ab84:	4080042e 	bgeu	r8,r2,c00ab98 <__umoddi3+0x3cc>
 c00ab88:	4551883a 	add	r8,r8,r21
 c00ab8c:	b0ffffc4 	addi	r3,r22,-1
 c00ab90:	45406f2e 	bgeu	r8,r21,c00ad50 <__umoddi3+0x584>
 c00ab94:	182d883a 	mov	r22,r3
 c00ab98:	880e943a 	slli	r7,r17,16
 c00ab9c:	9006d43a 	srli	r3,r18,16
 c00aba0:	91bfffcc 	andi	r6,r18,65535
 c00aba4:	3dacb03a 	or	r22,r7,r22
 c00aba8:	b02ed43a 	srli	r23,r22,16
 c00abac:	b5bfffcc 	andi	r22,r22,65535
 c00abb0:	300b883a 	mov	r5,r6
 c00abb4:	b009883a 	mov	r4,r22
 c00abb8:	40a3c83a 	sub	r17,r8,r2
 c00abbc:	d8c00115 	stw	r3,4(sp)
 c00abc0:	d9800215 	stw	r6,8(sp)
 c00abc4:	c00097c0 	call	c00097c <__mulsi3>
 c00abc8:	d9800217 	ldw	r6,8(sp)
 c00abcc:	b809883a 	mov	r4,r23
 c00abd0:	1039883a 	mov	fp,r2
 c00abd4:	300b883a 	mov	r5,r6
 c00abd8:	c00097c0 	call	c00097c <__mulsi3>
 c00abdc:	d8c00117 	ldw	r3,4(sp)
 c00abe0:	b809883a 	mov	r4,r23
 c00abe4:	d8800215 	stw	r2,8(sp)
 c00abe8:	180b883a 	mov	r5,r3
 c00abec:	c00097c0 	call	c00097c <__mulsi3>
 c00abf0:	d8c00117 	ldw	r3,4(sp)
 c00abf4:	b009883a 	mov	r4,r22
 c00abf8:	102f883a 	mov	r23,r2
 c00abfc:	180b883a 	mov	r5,r3
 c00ac00:	c00097c0 	call	c00097c <__mulsi3>
 c00ac04:	d9800217 	ldw	r6,8(sp)
 c00ac08:	e006d43a 	srli	r3,fp,16
 c00ac0c:	1185883a 	add	r2,r2,r6
 c00ac10:	1885883a 	add	r2,r3,r2
 c00ac14:	1180022e 	bgeu	r2,r6,c00ac20 <__umoddi3+0x454>
 c00ac18:	00c00074 	movhi	r3,1
 c00ac1c:	b8ef883a 	add	r23,r23,r3
 c00ac20:	1006d43a 	srli	r3,r2,16
 c00ac24:	1004943a 	slli	r2,r2,16
 c00ac28:	e73fffcc 	andi	fp,fp,65535
 c00ac2c:	1dc7883a 	add	r3,r3,r23
 c00ac30:	1739883a 	add	fp,r2,fp
 c00ac34:	88c03a36 	bltu	r17,r3,c00ad20 <__umoddi3+0x554>
 c00ac38:	88c05126 	beq	r17,r3,c00ad80 <__umoddi3+0x5b4>
 c00ac3c:	88c9c83a 	sub	r4,r17,r3
 c00ac40:	e00f883a 	mov	r7,fp
 c00ac44:	81cfc83a 	sub	r7,r16,r7
 c00ac48:	81c7803a 	cmpltu	r3,r16,r7
 c00ac4c:	20c7c83a 	sub	r3,r4,r3
 c00ac50:	1cc4983a 	sll	r2,r3,r19
 c00ac54:	3d0ed83a 	srl	r7,r7,r20
 c00ac58:	1d06d83a 	srl	r3,r3,r20
 c00ac5c:	11c4b03a 	or	r2,r2,r7
 c00ac60:	003f7c06 	br	c00aa54 <__alt_data_end+0xfc00aa54>
 c00ac64:	9ca6983a 	sll	r19,r19,r18
 c00ac68:	88f8d83a 	srl	fp,r17,r3
 c00ac6c:	80c4d83a 	srl	r2,r16,r3
 c00ac70:	982cd43a 	srli	r22,r19,16
 c00ac74:	8ca2983a 	sll	r17,r17,r18
 c00ac78:	e009883a 	mov	r4,fp
 c00ac7c:	b00b883a 	mov	r5,r22
 c00ac80:	146ab03a 	or	r21,r2,r17
 c00ac84:	c00aeec0 	call	c00aeec <__umodsi3>
 c00ac88:	b00b883a 	mov	r5,r22
 c00ac8c:	e009883a 	mov	r4,fp
 c00ac90:	1029883a 	mov	r20,r2
 c00ac94:	9dffffcc 	andi	r23,r19,65535
 c00ac98:	c00ae880 	call	c00ae88 <__udivsi3>
 c00ac9c:	b809883a 	mov	r4,r23
 c00aca0:	100b883a 	mov	r5,r2
 c00aca4:	c00097c0 	call	c00097c <__mulsi3>
 c00aca8:	a008943a 	slli	r4,r20,16
 c00acac:	a806d43a 	srli	r3,r21,16
 c00acb0:	84a8983a 	sll	r20,r16,r18
 c00acb4:	1906b03a 	or	r3,r3,r4
 c00acb8:	1880042e 	bgeu	r3,r2,c00accc <__umoddi3+0x500>
 c00acbc:	1cc7883a 	add	r3,r3,r19
 c00acc0:	1cc00236 	bltu	r3,r19,c00accc <__umoddi3+0x500>
 c00acc4:	1880012e 	bgeu	r3,r2,c00accc <__umoddi3+0x500>
 c00acc8:	1cc7883a 	add	r3,r3,r19
 c00accc:	18a3c83a 	sub	r17,r3,r2
 c00acd0:	b00b883a 	mov	r5,r22
 c00acd4:	8809883a 	mov	r4,r17
 c00acd8:	c00aeec0 	call	c00aeec <__umodsi3>
 c00acdc:	b00b883a 	mov	r5,r22
 c00ace0:	8809883a 	mov	r4,r17
 c00ace4:	1021883a 	mov	r16,r2
 c00ace8:	c00ae880 	call	c00ae88 <__udivsi3>
 c00acec:	100b883a 	mov	r5,r2
 c00acf0:	b809883a 	mov	r4,r23
 c00acf4:	8020943a 	slli	r16,r16,16
 c00acf8:	c00097c0 	call	c00097c <__mulsi3>
 c00acfc:	a8ffffcc 	andi	r3,r21,65535
 c00ad00:	1c06b03a 	or	r3,r3,r16
 c00ad04:	1880042e 	bgeu	r3,r2,c00ad18 <__umoddi3+0x54c>
 c00ad08:	1cc7883a 	add	r3,r3,r19
 c00ad0c:	1cc00236 	bltu	r3,r19,c00ad18 <__umoddi3+0x54c>
 c00ad10:	1880012e 	bgeu	r3,r2,c00ad18 <__umoddi3+0x54c>
 c00ad14:	1cc7883a 	add	r3,r3,r19
 c00ad18:	18a3c83a 	sub	r17,r3,r2
 c00ad1c:	003f2906 	br	c00a9c4 <__alt_data_end+0xfc00a9c4>
 c00ad20:	e48fc83a 	sub	r7,fp,r18
 c00ad24:	1d49c83a 	sub	r4,r3,r21
 c00ad28:	e1f9803a 	cmpltu	fp,fp,r7
 c00ad2c:	2739c83a 	sub	fp,r4,fp
 c00ad30:	8f09c83a 	sub	r4,r17,fp
 c00ad34:	003fc306 	br	c00ac44 <__alt_data_end+0xfc00ac44>
 c00ad38:	01000604 	movi	r4,24
 c00ad3c:	003ef906 	br	c00a924 <__alt_data_end+0xfc00a924>
 c00ad40:	00800604 	movi	r2,24
 c00ad44:	003f1306 	br	c00a994 <__alt_data_end+0xfc00a994>
 c00ad48:	01000604 	movi	r4,24
 c00ad4c:	003eb606 	br	c00a828 <__alt_data_end+0xfc00a828>
 c00ad50:	40bf902e 	bgeu	r8,r2,c00ab94 <__alt_data_end+0xfc00ab94>
 c00ad54:	b5bfff84 	addi	r22,r22,-2
 c00ad58:	4551883a 	add	r8,r8,r21
 c00ad5c:	003f8e06 	br	c00ab98 <__alt_data_end+0xfc00ab98>
 c00ad60:	18bf762e 	bgeu	r3,r2,c00ab3c <__alt_data_end+0xfc00ab3c>
 c00ad64:	8c7fff84 	addi	r17,r17,-2
 c00ad68:	1d47883a 	add	r3,r3,r21
 c00ad6c:	003f7406 	br	c00ab40 <__alt_data_end+0xfc00ab40>
 c00ad70:	1cc7883a 	add	r3,r3,r19
 c00ad74:	003ecd06 	br	c00a8ac <__alt_data_end+0xfc00a8ac>
 c00ad78:	8005883a 	mov	r2,r16
 c00ad7c:	003ef806 	br	c00a960 <__alt_data_end+0xfc00a960>
 c00ad80:	873fe736 	bltu	r16,fp,c00ad20 <__alt_data_end+0xfc00ad20>
 c00ad84:	e00f883a 	mov	r7,fp
 c00ad88:	0009883a 	mov	r4,zero
 c00ad8c:	003fad06 	br	c00ac44 <__alt_data_end+0xfc00ac44>

0c00ad90 <__divsi3>:
 c00ad90:	20001b16 	blt	r4,zero,c00ae00 <__divsi3+0x70>
 c00ad94:	000f883a 	mov	r7,zero
 c00ad98:	28001616 	blt	r5,zero,c00adf4 <__divsi3+0x64>
 c00ad9c:	200d883a 	mov	r6,r4
 c00ada0:	29001a2e 	bgeu	r5,r4,c00ae0c <__divsi3+0x7c>
 c00ada4:	00800804 	movi	r2,32
 c00ada8:	00c00044 	movi	r3,1
 c00adac:	00000106 	br	c00adb4 <__divsi3+0x24>
 c00adb0:	10000d26 	beq	r2,zero,c00ade8 <__divsi3+0x58>
 c00adb4:	294b883a 	add	r5,r5,r5
 c00adb8:	10bfffc4 	addi	r2,r2,-1
 c00adbc:	18c7883a 	add	r3,r3,r3
 c00adc0:	293ffb36 	bltu	r5,r4,c00adb0 <__alt_data_end+0xfc00adb0>
 c00adc4:	0005883a 	mov	r2,zero
 c00adc8:	18000726 	beq	r3,zero,c00ade8 <__divsi3+0x58>
 c00adcc:	0005883a 	mov	r2,zero
 c00add0:	31400236 	bltu	r6,r5,c00addc <__divsi3+0x4c>
 c00add4:	314dc83a 	sub	r6,r6,r5
 c00add8:	10c4b03a 	or	r2,r2,r3
 c00addc:	1806d07a 	srli	r3,r3,1
 c00ade0:	280ad07a 	srli	r5,r5,1
 c00ade4:	183ffa1e 	bne	r3,zero,c00add0 <__alt_data_end+0xfc00add0>
 c00ade8:	38000126 	beq	r7,zero,c00adf0 <__divsi3+0x60>
 c00adec:	0085c83a 	sub	r2,zero,r2
 c00adf0:	f800283a 	ret
 c00adf4:	014bc83a 	sub	r5,zero,r5
 c00adf8:	39c0005c 	xori	r7,r7,1
 c00adfc:	003fe706 	br	c00ad9c <__alt_data_end+0xfc00ad9c>
 c00ae00:	0109c83a 	sub	r4,zero,r4
 c00ae04:	01c00044 	movi	r7,1
 c00ae08:	003fe306 	br	c00ad98 <__alt_data_end+0xfc00ad98>
 c00ae0c:	00c00044 	movi	r3,1
 c00ae10:	003fee06 	br	c00adcc <__alt_data_end+0xfc00adcc>

0c00ae14 <__modsi3>:
 c00ae14:	20001716 	blt	r4,zero,c00ae74 <__modsi3+0x60>
 c00ae18:	000f883a 	mov	r7,zero
 c00ae1c:	2005883a 	mov	r2,r4
 c00ae20:	28001216 	blt	r5,zero,c00ae6c <__modsi3+0x58>
 c00ae24:	2900162e 	bgeu	r5,r4,c00ae80 <__modsi3+0x6c>
 c00ae28:	01800804 	movi	r6,32
 c00ae2c:	00c00044 	movi	r3,1
 c00ae30:	00000106 	br	c00ae38 <__modsi3+0x24>
 c00ae34:	30000a26 	beq	r6,zero,c00ae60 <__modsi3+0x4c>
 c00ae38:	294b883a 	add	r5,r5,r5
 c00ae3c:	31bfffc4 	addi	r6,r6,-1
 c00ae40:	18c7883a 	add	r3,r3,r3
 c00ae44:	293ffb36 	bltu	r5,r4,c00ae34 <__alt_data_end+0xfc00ae34>
 c00ae48:	18000526 	beq	r3,zero,c00ae60 <__modsi3+0x4c>
 c00ae4c:	1806d07a 	srli	r3,r3,1
 c00ae50:	11400136 	bltu	r2,r5,c00ae58 <__modsi3+0x44>
 c00ae54:	1145c83a 	sub	r2,r2,r5
 c00ae58:	280ad07a 	srli	r5,r5,1
 c00ae5c:	183ffb1e 	bne	r3,zero,c00ae4c <__alt_data_end+0xfc00ae4c>
 c00ae60:	38000126 	beq	r7,zero,c00ae68 <__modsi3+0x54>
 c00ae64:	0085c83a 	sub	r2,zero,r2
 c00ae68:	f800283a 	ret
 c00ae6c:	014bc83a 	sub	r5,zero,r5
 c00ae70:	003fec06 	br	c00ae24 <__alt_data_end+0xfc00ae24>
 c00ae74:	0109c83a 	sub	r4,zero,r4
 c00ae78:	01c00044 	movi	r7,1
 c00ae7c:	003fe706 	br	c00ae1c <__alt_data_end+0xfc00ae1c>
 c00ae80:	00c00044 	movi	r3,1
 c00ae84:	003ff106 	br	c00ae4c <__alt_data_end+0xfc00ae4c>

0c00ae88 <__udivsi3>:
 c00ae88:	200d883a 	mov	r6,r4
 c00ae8c:	2900152e 	bgeu	r5,r4,c00aee4 <__udivsi3+0x5c>
 c00ae90:	28001416 	blt	r5,zero,c00aee4 <__udivsi3+0x5c>
 c00ae94:	00800804 	movi	r2,32
 c00ae98:	00c00044 	movi	r3,1
 c00ae9c:	00000206 	br	c00aea8 <__udivsi3+0x20>
 c00aea0:	10000e26 	beq	r2,zero,c00aedc <__udivsi3+0x54>
 c00aea4:	28000516 	blt	r5,zero,c00aebc <__udivsi3+0x34>
 c00aea8:	294b883a 	add	r5,r5,r5
 c00aeac:	10bfffc4 	addi	r2,r2,-1
 c00aeb0:	18c7883a 	add	r3,r3,r3
 c00aeb4:	293ffa36 	bltu	r5,r4,c00aea0 <__alt_data_end+0xfc00aea0>
 c00aeb8:	18000826 	beq	r3,zero,c00aedc <__udivsi3+0x54>
 c00aebc:	0005883a 	mov	r2,zero
 c00aec0:	31400236 	bltu	r6,r5,c00aecc <__udivsi3+0x44>
 c00aec4:	314dc83a 	sub	r6,r6,r5
 c00aec8:	10c4b03a 	or	r2,r2,r3
 c00aecc:	1806d07a 	srli	r3,r3,1
 c00aed0:	280ad07a 	srli	r5,r5,1
 c00aed4:	183ffa1e 	bne	r3,zero,c00aec0 <__alt_data_end+0xfc00aec0>
 c00aed8:	f800283a 	ret
 c00aedc:	0005883a 	mov	r2,zero
 c00aee0:	f800283a 	ret
 c00aee4:	00c00044 	movi	r3,1
 c00aee8:	003ff406 	br	c00aebc <__alt_data_end+0xfc00aebc>

0c00aeec <__umodsi3>:
 c00aeec:	2005883a 	mov	r2,r4
 c00aef0:	2900122e 	bgeu	r5,r4,c00af3c <__umodsi3+0x50>
 c00aef4:	28001116 	blt	r5,zero,c00af3c <__umodsi3+0x50>
 c00aef8:	01800804 	movi	r6,32
 c00aefc:	00c00044 	movi	r3,1
 c00af00:	00000206 	br	c00af0c <__umodsi3+0x20>
 c00af04:	30000c26 	beq	r6,zero,c00af38 <__umodsi3+0x4c>
 c00af08:	28000516 	blt	r5,zero,c00af20 <__umodsi3+0x34>
 c00af0c:	294b883a 	add	r5,r5,r5
 c00af10:	31bfffc4 	addi	r6,r6,-1
 c00af14:	18c7883a 	add	r3,r3,r3
 c00af18:	293ffa36 	bltu	r5,r4,c00af04 <__alt_data_end+0xfc00af04>
 c00af1c:	18000626 	beq	r3,zero,c00af38 <__umodsi3+0x4c>
 c00af20:	1806d07a 	srli	r3,r3,1
 c00af24:	11400136 	bltu	r2,r5,c00af2c <__umodsi3+0x40>
 c00af28:	1145c83a 	sub	r2,r2,r5
 c00af2c:	280ad07a 	srli	r5,r5,1
 c00af30:	183ffb1e 	bne	r3,zero,c00af20 <__alt_data_end+0xfc00af20>
 c00af34:	f800283a 	ret
 c00af38:	f800283a 	ret
 c00af3c:	00c00044 	movi	r3,1
 c00af40:	003ff706 	br	c00af20 <__alt_data_end+0xfc00af20>

0c00af44 <__adddf3>:
 c00af44:	02c00434 	movhi	r11,16
 c00af48:	5affffc4 	addi	r11,r11,-1
 c00af4c:	2806d7fa 	srli	r3,r5,31
 c00af50:	2ad4703a 	and	r10,r5,r11
 c00af54:	3ad2703a 	and	r9,r7,r11
 c00af58:	3804d53a 	srli	r2,r7,20
 c00af5c:	3018d77a 	srli	r12,r6,29
 c00af60:	280ad53a 	srli	r5,r5,20
 c00af64:	501490fa 	slli	r10,r10,3
 c00af68:	2010d77a 	srli	r8,r4,29
 c00af6c:	481290fa 	slli	r9,r9,3
 c00af70:	380ed7fa 	srli	r7,r7,31
 c00af74:	defffb04 	addi	sp,sp,-20
 c00af78:	dc800215 	stw	r18,8(sp)
 c00af7c:	dc400115 	stw	r17,4(sp)
 c00af80:	dc000015 	stw	r16,0(sp)
 c00af84:	dfc00415 	stw	ra,16(sp)
 c00af88:	dcc00315 	stw	r19,12(sp)
 c00af8c:	1c803fcc 	andi	r18,r3,255
 c00af90:	2c01ffcc 	andi	r16,r5,2047
 c00af94:	5210b03a 	or	r8,r10,r8
 c00af98:	202290fa 	slli	r17,r4,3
 c00af9c:	1081ffcc 	andi	r2,r2,2047
 c00afa0:	4b12b03a 	or	r9,r9,r12
 c00afa4:	300c90fa 	slli	r6,r6,3
 c00afa8:	91c07526 	beq	r18,r7,c00b180 <__adddf3+0x23c>
 c00afac:	8087c83a 	sub	r3,r16,r2
 c00afb0:	00c0ab0e 	bge	zero,r3,c00b260 <__adddf3+0x31c>
 c00afb4:	10002a1e 	bne	r2,zero,c00b060 <__adddf3+0x11c>
 c00afb8:	4984b03a 	or	r2,r9,r6
 c00afbc:	1000961e 	bne	r2,zero,c00b218 <__adddf3+0x2d4>
 c00afc0:	888001cc 	andi	r2,r17,7
 c00afc4:	10000726 	beq	r2,zero,c00afe4 <__adddf3+0xa0>
 c00afc8:	888003cc 	andi	r2,r17,15
 c00afcc:	00c00104 	movi	r3,4
 c00afd0:	10c00426 	beq	r2,r3,c00afe4 <__adddf3+0xa0>
 c00afd4:	88c7883a 	add	r3,r17,r3
 c00afd8:	1c63803a 	cmpltu	r17,r3,r17
 c00afdc:	4451883a 	add	r8,r8,r17
 c00afe0:	1823883a 	mov	r17,r3
 c00afe4:	4080202c 	andhi	r2,r8,128
 c00afe8:	10005926 	beq	r2,zero,c00b150 <__adddf3+0x20c>
 c00afec:	84000044 	addi	r16,r16,1
 c00aff0:	0081ffc4 	movi	r2,2047
 c00aff4:	8080ba26 	beq	r16,r2,c00b2e0 <__adddf3+0x39c>
 c00aff8:	00bfe034 	movhi	r2,65408
 c00affc:	10bfffc4 	addi	r2,r2,-1
 c00b000:	4090703a 	and	r8,r8,r2
 c00b004:	4004977a 	slli	r2,r8,29
 c00b008:	4010927a 	slli	r8,r8,9
 c00b00c:	8822d0fa 	srli	r17,r17,3
 c00b010:	8401ffcc 	andi	r16,r16,2047
 c00b014:	4010d33a 	srli	r8,r8,12
 c00b018:	9007883a 	mov	r3,r18
 c00b01c:	1444b03a 	or	r2,r2,r17
 c00b020:	8401ffcc 	andi	r16,r16,2047
 c00b024:	8020953a 	slli	r16,r16,20
 c00b028:	18c03fcc 	andi	r3,r3,255
 c00b02c:	01000434 	movhi	r4,16
 c00b030:	213fffc4 	addi	r4,r4,-1
 c00b034:	180697fa 	slli	r3,r3,31
 c00b038:	4110703a 	and	r8,r8,r4
 c00b03c:	4410b03a 	or	r8,r8,r16
 c00b040:	40c6b03a 	or	r3,r8,r3
 c00b044:	dfc00417 	ldw	ra,16(sp)
 c00b048:	dcc00317 	ldw	r19,12(sp)
 c00b04c:	dc800217 	ldw	r18,8(sp)
 c00b050:	dc400117 	ldw	r17,4(sp)
 c00b054:	dc000017 	ldw	r16,0(sp)
 c00b058:	dec00504 	addi	sp,sp,20
 c00b05c:	f800283a 	ret
 c00b060:	0081ffc4 	movi	r2,2047
 c00b064:	80bfd626 	beq	r16,r2,c00afc0 <__alt_data_end+0xfc00afc0>
 c00b068:	4a402034 	orhi	r9,r9,128
 c00b06c:	00800e04 	movi	r2,56
 c00b070:	10c09f16 	blt	r2,r3,c00b2f0 <__adddf3+0x3ac>
 c00b074:	008007c4 	movi	r2,31
 c00b078:	10c0c216 	blt	r2,r3,c00b384 <__adddf3+0x440>
 c00b07c:	00800804 	movi	r2,32
 c00b080:	10c5c83a 	sub	r2,r2,r3
 c00b084:	488a983a 	sll	r5,r9,r2
 c00b088:	30c8d83a 	srl	r4,r6,r3
 c00b08c:	3084983a 	sll	r2,r6,r2
 c00b090:	48c6d83a 	srl	r3,r9,r3
 c00b094:	290cb03a 	or	r6,r5,r4
 c00b098:	1004c03a 	cmpne	r2,r2,zero
 c00b09c:	308cb03a 	or	r6,r6,r2
 c00b0a0:	898dc83a 	sub	r6,r17,r6
 c00b0a4:	89a3803a 	cmpltu	r17,r17,r6
 c00b0a8:	40d1c83a 	sub	r8,r8,r3
 c00b0ac:	4451c83a 	sub	r8,r8,r17
 c00b0b0:	3023883a 	mov	r17,r6
 c00b0b4:	4080202c 	andhi	r2,r8,128
 c00b0b8:	10002326 	beq	r2,zero,c00b148 <__adddf3+0x204>
 c00b0bc:	04c02034 	movhi	r19,128
 c00b0c0:	9cffffc4 	addi	r19,r19,-1
 c00b0c4:	44e6703a 	and	r19,r8,r19
 c00b0c8:	98007626 	beq	r19,zero,c00b2a4 <__adddf3+0x360>
 c00b0cc:	9809883a 	mov	r4,r19
 c00b0d0:	c00d7840 	call	c00d784 <__clzsi2>
 c00b0d4:	10fffe04 	addi	r3,r2,-8
 c00b0d8:	010007c4 	movi	r4,31
 c00b0dc:	20c07716 	blt	r4,r3,c00b2bc <__adddf3+0x378>
 c00b0e0:	00800804 	movi	r2,32
 c00b0e4:	10c5c83a 	sub	r2,r2,r3
 c00b0e8:	8884d83a 	srl	r2,r17,r2
 c00b0ec:	98d0983a 	sll	r8,r19,r3
 c00b0f0:	88e2983a 	sll	r17,r17,r3
 c00b0f4:	1204b03a 	or	r2,r2,r8
 c00b0f8:	1c007416 	blt	r3,r16,c00b2cc <__adddf3+0x388>
 c00b0fc:	1c21c83a 	sub	r16,r3,r16
 c00b100:	82000044 	addi	r8,r16,1
 c00b104:	00c007c4 	movi	r3,31
 c00b108:	1a009116 	blt	r3,r8,c00b350 <__adddf3+0x40c>
 c00b10c:	00c00804 	movi	r3,32
 c00b110:	1a07c83a 	sub	r3,r3,r8
 c00b114:	8a08d83a 	srl	r4,r17,r8
 c00b118:	88e2983a 	sll	r17,r17,r3
 c00b11c:	10c6983a 	sll	r3,r2,r3
 c00b120:	1210d83a 	srl	r8,r2,r8
 c00b124:	8804c03a 	cmpne	r2,r17,zero
 c00b128:	1906b03a 	or	r3,r3,r4
 c00b12c:	18a2b03a 	or	r17,r3,r2
 c00b130:	0021883a 	mov	r16,zero
 c00b134:	003fa206 	br	c00afc0 <__alt_data_end+0xfc00afc0>
 c00b138:	1890b03a 	or	r8,r3,r2
 c00b13c:	40017d26 	beq	r8,zero,c00b734 <__adddf3+0x7f0>
 c00b140:	1011883a 	mov	r8,r2
 c00b144:	1823883a 	mov	r17,r3
 c00b148:	888001cc 	andi	r2,r17,7
 c00b14c:	103f9e1e 	bne	r2,zero,c00afc8 <__alt_data_end+0xfc00afc8>
 c00b150:	4004977a 	slli	r2,r8,29
 c00b154:	8822d0fa 	srli	r17,r17,3
 c00b158:	4010d0fa 	srli	r8,r8,3
 c00b15c:	9007883a 	mov	r3,r18
 c00b160:	1444b03a 	or	r2,r2,r17
 c00b164:	0101ffc4 	movi	r4,2047
 c00b168:	81002426 	beq	r16,r4,c00b1fc <__adddf3+0x2b8>
 c00b16c:	8120703a 	and	r16,r16,r4
 c00b170:	01000434 	movhi	r4,16
 c00b174:	213fffc4 	addi	r4,r4,-1
 c00b178:	4110703a 	and	r8,r8,r4
 c00b17c:	003fa806 	br	c00b020 <__alt_data_end+0xfc00b020>
 c00b180:	8089c83a 	sub	r4,r16,r2
 c00b184:	01005e0e 	bge	zero,r4,c00b300 <__adddf3+0x3bc>
 c00b188:	10002b26 	beq	r2,zero,c00b238 <__adddf3+0x2f4>
 c00b18c:	0081ffc4 	movi	r2,2047
 c00b190:	80bf8b26 	beq	r16,r2,c00afc0 <__alt_data_end+0xfc00afc0>
 c00b194:	4a402034 	orhi	r9,r9,128
 c00b198:	00800e04 	movi	r2,56
 c00b19c:	1100a40e 	bge	r2,r4,c00b430 <__adddf3+0x4ec>
 c00b1a0:	498cb03a 	or	r6,r9,r6
 c00b1a4:	300ac03a 	cmpne	r5,r6,zero
 c00b1a8:	0013883a 	mov	r9,zero
 c00b1ac:	2c4b883a 	add	r5,r5,r17
 c00b1b0:	2c63803a 	cmpltu	r17,r5,r17
 c00b1b4:	4a11883a 	add	r8,r9,r8
 c00b1b8:	8a11883a 	add	r8,r17,r8
 c00b1bc:	2823883a 	mov	r17,r5
 c00b1c0:	4080202c 	andhi	r2,r8,128
 c00b1c4:	103fe026 	beq	r2,zero,c00b148 <__alt_data_end+0xfc00b148>
 c00b1c8:	84000044 	addi	r16,r16,1
 c00b1cc:	0081ffc4 	movi	r2,2047
 c00b1d0:	8080d226 	beq	r16,r2,c00b51c <__adddf3+0x5d8>
 c00b1d4:	00bfe034 	movhi	r2,65408
 c00b1d8:	10bfffc4 	addi	r2,r2,-1
 c00b1dc:	4090703a 	and	r8,r8,r2
 c00b1e0:	880ad07a 	srli	r5,r17,1
 c00b1e4:	400897fa 	slli	r4,r8,31
 c00b1e8:	88c0004c 	andi	r3,r17,1
 c00b1ec:	28e2b03a 	or	r17,r5,r3
 c00b1f0:	4010d07a 	srli	r8,r8,1
 c00b1f4:	2462b03a 	or	r17,r4,r17
 c00b1f8:	003f7106 	br	c00afc0 <__alt_data_end+0xfc00afc0>
 c00b1fc:	4088b03a 	or	r4,r8,r2
 c00b200:	20014526 	beq	r4,zero,c00b718 <__adddf3+0x7d4>
 c00b204:	01000434 	movhi	r4,16
 c00b208:	42000234 	orhi	r8,r8,8
 c00b20c:	213fffc4 	addi	r4,r4,-1
 c00b210:	4110703a 	and	r8,r8,r4
 c00b214:	003f8206 	br	c00b020 <__alt_data_end+0xfc00b020>
 c00b218:	18ffffc4 	addi	r3,r3,-1
 c00b21c:	1800491e 	bne	r3,zero,c00b344 <__adddf3+0x400>
 c00b220:	898bc83a 	sub	r5,r17,r6
 c00b224:	8963803a 	cmpltu	r17,r17,r5
 c00b228:	4251c83a 	sub	r8,r8,r9
 c00b22c:	4451c83a 	sub	r8,r8,r17
 c00b230:	2823883a 	mov	r17,r5
 c00b234:	003f9f06 	br	c00b0b4 <__alt_data_end+0xfc00b0b4>
 c00b238:	4984b03a 	or	r2,r9,r6
 c00b23c:	103f6026 	beq	r2,zero,c00afc0 <__alt_data_end+0xfc00afc0>
 c00b240:	213fffc4 	addi	r4,r4,-1
 c00b244:	2000931e 	bne	r4,zero,c00b494 <__adddf3+0x550>
 c00b248:	898d883a 	add	r6,r17,r6
 c00b24c:	3463803a 	cmpltu	r17,r6,r17
 c00b250:	4251883a 	add	r8,r8,r9
 c00b254:	8a11883a 	add	r8,r17,r8
 c00b258:	3023883a 	mov	r17,r6
 c00b25c:	003fd806 	br	c00b1c0 <__alt_data_end+0xfc00b1c0>
 c00b260:	1800541e 	bne	r3,zero,c00b3b4 <__adddf3+0x470>
 c00b264:	80800044 	addi	r2,r16,1
 c00b268:	1081ffcc 	andi	r2,r2,2047
 c00b26c:	00c00044 	movi	r3,1
 c00b270:	1880a00e 	bge	r3,r2,c00b4f4 <__adddf3+0x5b0>
 c00b274:	8989c83a 	sub	r4,r17,r6
 c00b278:	8905803a 	cmpltu	r2,r17,r4
 c00b27c:	4267c83a 	sub	r19,r8,r9
 c00b280:	98a7c83a 	sub	r19,r19,r2
 c00b284:	9880202c 	andhi	r2,r19,128
 c00b288:	10006326 	beq	r2,zero,c00b418 <__adddf3+0x4d4>
 c00b28c:	3463c83a 	sub	r17,r6,r17
 c00b290:	4a07c83a 	sub	r3,r9,r8
 c00b294:	344d803a 	cmpltu	r6,r6,r17
 c00b298:	19a7c83a 	sub	r19,r3,r6
 c00b29c:	3825883a 	mov	r18,r7
 c00b2a0:	983f8a1e 	bne	r19,zero,c00b0cc <__alt_data_end+0xfc00b0cc>
 c00b2a4:	8809883a 	mov	r4,r17
 c00b2a8:	c00d7840 	call	c00d784 <__clzsi2>
 c00b2ac:	10800804 	addi	r2,r2,32
 c00b2b0:	10fffe04 	addi	r3,r2,-8
 c00b2b4:	010007c4 	movi	r4,31
 c00b2b8:	20ff890e 	bge	r4,r3,c00b0e0 <__alt_data_end+0xfc00b0e0>
 c00b2bc:	10bff604 	addi	r2,r2,-40
 c00b2c0:	8884983a 	sll	r2,r17,r2
 c00b2c4:	0023883a 	mov	r17,zero
 c00b2c8:	1c3f8c0e 	bge	r3,r16,c00b0fc <__alt_data_end+0xfc00b0fc>
 c00b2cc:	023fe034 	movhi	r8,65408
 c00b2d0:	423fffc4 	addi	r8,r8,-1
 c00b2d4:	80e1c83a 	sub	r16,r16,r3
 c00b2d8:	1210703a 	and	r8,r2,r8
 c00b2dc:	003f3806 	br	c00afc0 <__alt_data_end+0xfc00afc0>
 c00b2e0:	9007883a 	mov	r3,r18
 c00b2e4:	0011883a 	mov	r8,zero
 c00b2e8:	0005883a 	mov	r2,zero
 c00b2ec:	003f4c06 	br	c00b020 <__alt_data_end+0xfc00b020>
 c00b2f0:	498cb03a 	or	r6,r9,r6
 c00b2f4:	300cc03a 	cmpne	r6,r6,zero
 c00b2f8:	0007883a 	mov	r3,zero
 c00b2fc:	003f6806 	br	c00b0a0 <__alt_data_end+0xfc00b0a0>
 c00b300:	20009c1e 	bne	r4,zero,c00b574 <__adddf3+0x630>
 c00b304:	80800044 	addi	r2,r16,1
 c00b308:	1141ffcc 	andi	r5,r2,2047
 c00b30c:	01000044 	movi	r4,1
 c00b310:	2140670e 	bge	r4,r5,c00b4b0 <__adddf3+0x56c>
 c00b314:	0101ffc4 	movi	r4,2047
 c00b318:	11007f26 	beq	r2,r4,c00b518 <__adddf3+0x5d4>
 c00b31c:	898d883a 	add	r6,r17,r6
 c00b320:	4247883a 	add	r3,r8,r9
 c00b324:	3451803a 	cmpltu	r8,r6,r17
 c00b328:	40d1883a 	add	r8,r8,r3
 c00b32c:	402297fa 	slli	r17,r8,31
 c00b330:	300cd07a 	srli	r6,r6,1
 c00b334:	4010d07a 	srli	r8,r8,1
 c00b338:	1021883a 	mov	r16,r2
 c00b33c:	89a2b03a 	or	r17,r17,r6
 c00b340:	003f1f06 	br	c00afc0 <__alt_data_end+0xfc00afc0>
 c00b344:	0081ffc4 	movi	r2,2047
 c00b348:	80bf481e 	bne	r16,r2,c00b06c <__alt_data_end+0xfc00b06c>
 c00b34c:	003f1c06 	br	c00afc0 <__alt_data_end+0xfc00afc0>
 c00b350:	843ff844 	addi	r16,r16,-31
 c00b354:	01000804 	movi	r4,32
 c00b358:	1406d83a 	srl	r3,r2,r16
 c00b35c:	41005026 	beq	r8,r4,c00b4a0 <__adddf3+0x55c>
 c00b360:	01001004 	movi	r4,64
 c00b364:	2211c83a 	sub	r8,r4,r8
 c00b368:	1204983a 	sll	r2,r2,r8
 c00b36c:	88a2b03a 	or	r17,r17,r2
 c00b370:	8822c03a 	cmpne	r17,r17,zero
 c00b374:	1c62b03a 	or	r17,r3,r17
 c00b378:	0011883a 	mov	r8,zero
 c00b37c:	0021883a 	mov	r16,zero
 c00b380:	003f7106 	br	c00b148 <__alt_data_end+0xfc00b148>
 c00b384:	193ff804 	addi	r4,r3,-32
 c00b388:	00800804 	movi	r2,32
 c00b38c:	4908d83a 	srl	r4,r9,r4
 c00b390:	18804526 	beq	r3,r2,c00b4a8 <__adddf3+0x564>
 c00b394:	00801004 	movi	r2,64
 c00b398:	10c5c83a 	sub	r2,r2,r3
 c00b39c:	4886983a 	sll	r3,r9,r2
 c00b3a0:	198cb03a 	or	r6,r3,r6
 c00b3a4:	300cc03a 	cmpne	r6,r6,zero
 c00b3a8:	218cb03a 	or	r6,r4,r6
 c00b3ac:	0007883a 	mov	r3,zero
 c00b3b0:	003f3b06 	br	c00b0a0 <__alt_data_end+0xfc00b0a0>
 c00b3b4:	80002a26 	beq	r16,zero,c00b460 <__adddf3+0x51c>
 c00b3b8:	0101ffc4 	movi	r4,2047
 c00b3bc:	11006826 	beq	r2,r4,c00b560 <__adddf3+0x61c>
 c00b3c0:	00c7c83a 	sub	r3,zero,r3
 c00b3c4:	42002034 	orhi	r8,r8,128
 c00b3c8:	01000e04 	movi	r4,56
 c00b3cc:	20c07c16 	blt	r4,r3,c00b5c0 <__adddf3+0x67c>
 c00b3d0:	010007c4 	movi	r4,31
 c00b3d4:	20c0da16 	blt	r4,r3,c00b740 <__adddf3+0x7fc>
 c00b3d8:	01000804 	movi	r4,32
 c00b3dc:	20c9c83a 	sub	r4,r4,r3
 c00b3e0:	4114983a 	sll	r10,r8,r4
 c00b3e4:	88cad83a 	srl	r5,r17,r3
 c00b3e8:	8908983a 	sll	r4,r17,r4
 c00b3ec:	40c6d83a 	srl	r3,r8,r3
 c00b3f0:	5162b03a 	or	r17,r10,r5
 c00b3f4:	2008c03a 	cmpne	r4,r4,zero
 c00b3f8:	8922b03a 	or	r17,r17,r4
 c00b3fc:	3463c83a 	sub	r17,r6,r17
 c00b400:	48c7c83a 	sub	r3,r9,r3
 c00b404:	344d803a 	cmpltu	r6,r6,r17
 c00b408:	1991c83a 	sub	r8,r3,r6
 c00b40c:	1021883a 	mov	r16,r2
 c00b410:	3825883a 	mov	r18,r7
 c00b414:	003f2706 	br	c00b0b4 <__alt_data_end+0xfc00b0b4>
 c00b418:	24d0b03a 	or	r8,r4,r19
 c00b41c:	40001b1e 	bne	r8,zero,c00b48c <__adddf3+0x548>
 c00b420:	0005883a 	mov	r2,zero
 c00b424:	0007883a 	mov	r3,zero
 c00b428:	0021883a 	mov	r16,zero
 c00b42c:	003f4d06 	br	c00b164 <__alt_data_end+0xfc00b164>
 c00b430:	008007c4 	movi	r2,31
 c00b434:	11003c16 	blt	r2,r4,c00b528 <__adddf3+0x5e4>
 c00b438:	00800804 	movi	r2,32
 c00b43c:	1105c83a 	sub	r2,r2,r4
 c00b440:	488e983a 	sll	r7,r9,r2
 c00b444:	310ad83a 	srl	r5,r6,r4
 c00b448:	3084983a 	sll	r2,r6,r2
 c00b44c:	4912d83a 	srl	r9,r9,r4
 c00b450:	394ab03a 	or	r5,r7,r5
 c00b454:	1004c03a 	cmpne	r2,r2,zero
 c00b458:	288ab03a 	or	r5,r5,r2
 c00b45c:	003f5306 	br	c00b1ac <__alt_data_end+0xfc00b1ac>
 c00b460:	4448b03a 	or	r4,r8,r17
 c00b464:	20003e26 	beq	r4,zero,c00b560 <__adddf3+0x61c>
 c00b468:	00c6303a 	nor	r3,zero,r3
 c00b46c:	18003a1e 	bne	r3,zero,c00b558 <__adddf3+0x614>
 c00b470:	3463c83a 	sub	r17,r6,r17
 c00b474:	4a07c83a 	sub	r3,r9,r8
 c00b478:	344d803a 	cmpltu	r6,r6,r17
 c00b47c:	1991c83a 	sub	r8,r3,r6
 c00b480:	1021883a 	mov	r16,r2
 c00b484:	3825883a 	mov	r18,r7
 c00b488:	003f0a06 	br	c00b0b4 <__alt_data_end+0xfc00b0b4>
 c00b48c:	2023883a 	mov	r17,r4
 c00b490:	003f0d06 	br	c00b0c8 <__alt_data_end+0xfc00b0c8>
 c00b494:	0081ffc4 	movi	r2,2047
 c00b498:	80bf3f1e 	bne	r16,r2,c00b198 <__alt_data_end+0xfc00b198>
 c00b49c:	003ec806 	br	c00afc0 <__alt_data_end+0xfc00afc0>
 c00b4a0:	0005883a 	mov	r2,zero
 c00b4a4:	003fb106 	br	c00b36c <__alt_data_end+0xfc00b36c>
 c00b4a8:	0007883a 	mov	r3,zero
 c00b4ac:	003fbc06 	br	c00b3a0 <__alt_data_end+0xfc00b3a0>
 c00b4b0:	4444b03a 	or	r2,r8,r17
 c00b4b4:	8000871e 	bne	r16,zero,c00b6d4 <__adddf3+0x790>
 c00b4b8:	1000ba26 	beq	r2,zero,c00b7a4 <__adddf3+0x860>
 c00b4bc:	4984b03a 	or	r2,r9,r6
 c00b4c0:	103ebf26 	beq	r2,zero,c00afc0 <__alt_data_end+0xfc00afc0>
 c00b4c4:	8985883a 	add	r2,r17,r6
 c00b4c8:	4247883a 	add	r3,r8,r9
 c00b4cc:	1451803a 	cmpltu	r8,r2,r17
 c00b4d0:	40d1883a 	add	r8,r8,r3
 c00b4d4:	40c0202c 	andhi	r3,r8,128
 c00b4d8:	1023883a 	mov	r17,r2
 c00b4dc:	183f1a26 	beq	r3,zero,c00b148 <__alt_data_end+0xfc00b148>
 c00b4e0:	00bfe034 	movhi	r2,65408
 c00b4e4:	10bfffc4 	addi	r2,r2,-1
 c00b4e8:	2021883a 	mov	r16,r4
 c00b4ec:	4090703a 	and	r8,r8,r2
 c00b4f0:	003eb306 	br	c00afc0 <__alt_data_end+0xfc00afc0>
 c00b4f4:	4444b03a 	or	r2,r8,r17
 c00b4f8:	8000291e 	bne	r16,zero,c00b5a0 <__adddf3+0x65c>
 c00b4fc:	10004b1e 	bne	r2,zero,c00b62c <__adddf3+0x6e8>
 c00b500:	4990b03a 	or	r8,r9,r6
 c00b504:	40008b26 	beq	r8,zero,c00b734 <__adddf3+0x7f0>
 c00b508:	4811883a 	mov	r8,r9
 c00b50c:	3023883a 	mov	r17,r6
 c00b510:	3825883a 	mov	r18,r7
 c00b514:	003eaa06 	br	c00afc0 <__alt_data_end+0xfc00afc0>
 c00b518:	1021883a 	mov	r16,r2
 c00b51c:	0011883a 	mov	r8,zero
 c00b520:	0005883a 	mov	r2,zero
 c00b524:	003f0f06 	br	c00b164 <__alt_data_end+0xfc00b164>
 c00b528:	217ff804 	addi	r5,r4,-32
 c00b52c:	00800804 	movi	r2,32
 c00b530:	494ad83a 	srl	r5,r9,r5
 c00b534:	20807d26 	beq	r4,r2,c00b72c <__adddf3+0x7e8>
 c00b538:	00801004 	movi	r2,64
 c00b53c:	1109c83a 	sub	r4,r2,r4
 c00b540:	4912983a 	sll	r9,r9,r4
 c00b544:	498cb03a 	or	r6,r9,r6
 c00b548:	300cc03a 	cmpne	r6,r6,zero
 c00b54c:	298ab03a 	or	r5,r5,r6
 c00b550:	0013883a 	mov	r9,zero
 c00b554:	003f1506 	br	c00b1ac <__alt_data_end+0xfc00b1ac>
 c00b558:	0101ffc4 	movi	r4,2047
 c00b55c:	113f9a1e 	bne	r2,r4,c00b3c8 <__alt_data_end+0xfc00b3c8>
 c00b560:	4811883a 	mov	r8,r9
 c00b564:	3023883a 	mov	r17,r6
 c00b568:	1021883a 	mov	r16,r2
 c00b56c:	3825883a 	mov	r18,r7
 c00b570:	003e9306 	br	c00afc0 <__alt_data_end+0xfc00afc0>
 c00b574:	8000161e 	bne	r16,zero,c00b5d0 <__adddf3+0x68c>
 c00b578:	444ab03a 	or	r5,r8,r17
 c00b57c:	28005126 	beq	r5,zero,c00b6c4 <__adddf3+0x780>
 c00b580:	0108303a 	nor	r4,zero,r4
 c00b584:	20004d1e 	bne	r4,zero,c00b6bc <__adddf3+0x778>
 c00b588:	89a3883a 	add	r17,r17,r6
 c00b58c:	4253883a 	add	r9,r8,r9
 c00b590:	898d803a 	cmpltu	r6,r17,r6
 c00b594:	3251883a 	add	r8,r6,r9
 c00b598:	1021883a 	mov	r16,r2
 c00b59c:	003f0806 	br	c00b1c0 <__alt_data_end+0xfc00b1c0>
 c00b5a0:	1000301e 	bne	r2,zero,c00b664 <__adddf3+0x720>
 c00b5a4:	4984b03a 	or	r2,r9,r6
 c00b5a8:	10007126 	beq	r2,zero,c00b770 <__adddf3+0x82c>
 c00b5ac:	4811883a 	mov	r8,r9
 c00b5b0:	3023883a 	mov	r17,r6
 c00b5b4:	3825883a 	mov	r18,r7
 c00b5b8:	0401ffc4 	movi	r16,2047
 c00b5bc:	003e8006 	br	c00afc0 <__alt_data_end+0xfc00afc0>
 c00b5c0:	4462b03a 	or	r17,r8,r17
 c00b5c4:	8822c03a 	cmpne	r17,r17,zero
 c00b5c8:	0007883a 	mov	r3,zero
 c00b5cc:	003f8b06 	br	c00b3fc <__alt_data_end+0xfc00b3fc>
 c00b5d0:	0141ffc4 	movi	r5,2047
 c00b5d4:	11403b26 	beq	r2,r5,c00b6c4 <__adddf3+0x780>
 c00b5d8:	0109c83a 	sub	r4,zero,r4
 c00b5dc:	42002034 	orhi	r8,r8,128
 c00b5e0:	01400e04 	movi	r5,56
 c00b5e4:	29006716 	blt	r5,r4,c00b784 <__adddf3+0x840>
 c00b5e8:	014007c4 	movi	r5,31
 c00b5ec:	29007016 	blt	r5,r4,c00b7b0 <__adddf3+0x86c>
 c00b5f0:	01400804 	movi	r5,32
 c00b5f4:	290bc83a 	sub	r5,r5,r4
 c00b5f8:	4154983a 	sll	r10,r8,r5
 c00b5fc:	890ed83a 	srl	r7,r17,r4
 c00b600:	894a983a 	sll	r5,r17,r5
 c00b604:	4108d83a 	srl	r4,r8,r4
 c00b608:	51e2b03a 	or	r17,r10,r7
 c00b60c:	280ac03a 	cmpne	r5,r5,zero
 c00b610:	8962b03a 	or	r17,r17,r5
 c00b614:	89a3883a 	add	r17,r17,r6
 c00b618:	2253883a 	add	r9,r4,r9
 c00b61c:	898d803a 	cmpltu	r6,r17,r6
 c00b620:	3251883a 	add	r8,r6,r9
 c00b624:	1021883a 	mov	r16,r2
 c00b628:	003ee506 	br	c00b1c0 <__alt_data_end+0xfc00b1c0>
 c00b62c:	4984b03a 	or	r2,r9,r6
 c00b630:	103e6326 	beq	r2,zero,c00afc0 <__alt_data_end+0xfc00afc0>
 c00b634:	8987c83a 	sub	r3,r17,r6
 c00b638:	88c9803a 	cmpltu	r4,r17,r3
 c00b63c:	4245c83a 	sub	r2,r8,r9
 c00b640:	1105c83a 	sub	r2,r2,r4
 c00b644:	1100202c 	andhi	r4,r2,128
 c00b648:	203ebb26 	beq	r4,zero,c00b138 <__alt_data_end+0xfc00b138>
 c00b64c:	3463c83a 	sub	r17,r6,r17
 c00b650:	4a07c83a 	sub	r3,r9,r8
 c00b654:	344d803a 	cmpltu	r6,r6,r17
 c00b658:	1991c83a 	sub	r8,r3,r6
 c00b65c:	3825883a 	mov	r18,r7
 c00b660:	003e5706 	br	c00afc0 <__alt_data_end+0xfc00afc0>
 c00b664:	4984b03a 	or	r2,r9,r6
 c00b668:	10002e26 	beq	r2,zero,c00b724 <__adddf3+0x7e0>
 c00b66c:	4004d0fa 	srli	r2,r8,3
 c00b670:	8822d0fa 	srli	r17,r17,3
 c00b674:	4010977a 	slli	r8,r8,29
 c00b678:	10c0022c 	andhi	r3,r2,8
 c00b67c:	4462b03a 	or	r17,r8,r17
 c00b680:	18000826 	beq	r3,zero,c00b6a4 <__adddf3+0x760>
 c00b684:	4808d0fa 	srli	r4,r9,3
 c00b688:	20c0022c 	andhi	r3,r4,8
 c00b68c:	1800051e 	bne	r3,zero,c00b6a4 <__adddf3+0x760>
 c00b690:	300cd0fa 	srli	r6,r6,3
 c00b694:	4806977a 	slli	r3,r9,29
 c00b698:	2005883a 	mov	r2,r4
 c00b69c:	3825883a 	mov	r18,r7
 c00b6a0:	19a2b03a 	or	r17,r3,r6
 c00b6a4:	8810d77a 	srli	r8,r17,29
 c00b6a8:	100490fa 	slli	r2,r2,3
 c00b6ac:	882290fa 	slli	r17,r17,3
 c00b6b0:	0401ffc4 	movi	r16,2047
 c00b6b4:	4090b03a 	or	r8,r8,r2
 c00b6b8:	003e4106 	br	c00afc0 <__alt_data_end+0xfc00afc0>
 c00b6bc:	0141ffc4 	movi	r5,2047
 c00b6c0:	117fc71e 	bne	r2,r5,c00b5e0 <__alt_data_end+0xfc00b5e0>
 c00b6c4:	4811883a 	mov	r8,r9
 c00b6c8:	3023883a 	mov	r17,r6
 c00b6cc:	1021883a 	mov	r16,r2
 c00b6d0:	003e3b06 	br	c00afc0 <__alt_data_end+0xfc00afc0>
 c00b6d4:	10002f26 	beq	r2,zero,c00b794 <__adddf3+0x850>
 c00b6d8:	4984b03a 	or	r2,r9,r6
 c00b6dc:	10001126 	beq	r2,zero,c00b724 <__adddf3+0x7e0>
 c00b6e0:	4004d0fa 	srli	r2,r8,3
 c00b6e4:	8822d0fa 	srli	r17,r17,3
 c00b6e8:	4010977a 	slli	r8,r8,29
 c00b6ec:	10c0022c 	andhi	r3,r2,8
 c00b6f0:	4462b03a 	or	r17,r8,r17
 c00b6f4:	183feb26 	beq	r3,zero,c00b6a4 <__alt_data_end+0xfc00b6a4>
 c00b6f8:	4808d0fa 	srli	r4,r9,3
 c00b6fc:	20c0022c 	andhi	r3,r4,8
 c00b700:	183fe81e 	bne	r3,zero,c00b6a4 <__alt_data_end+0xfc00b6a4>
 c00b704:	300cd0fa 	srli	r6,r6,3
 c00b708:	4806977a 	slli	r3,r9,29
 c00b70c:	2005883a 	mov	r2,r4
 c00b710:	19a2b03a 	or	r17,r3,r6
 c00b714:	003fe306 	br	c00b6a4 <__alt_data_end+0xfc00b6a4>
 c00b718:	0011883a 	mov	r8,zero
 c00b71c:	0005883a 	mov	r2,zero
 c00b720:	003e3f06 	br	c00b020 <__alt_data_end+0xfc00b020>
 c00b724:	0401ffc4 	movi	r16,2047
 c00b728:	003e2506 	br	c00afc0 <__alt_data_end+0xfc00afc0>
 c00b72c:	0013883a 	mov	r9,zero
 c00b730:	003f8406 	br	c00b544 <__alt_data_end+0xfc00b544>
 c00b734:	0005883a 	mov	r2,zero
 c00b738:	0007883a 	mov	r3,zero
 c00b73c:	003e8906 	br	c00b164 <__alt_data_end+0xfc00b164>
 c00b740:	197ff804 	addi	r5,r3,-32
 c00b744:	01000804 	movi	r4,32
 c00b748:	414ad83a 	srl	r5,r8,r5
 c00b74c:	19002426 	beq	r3,r4,c00b7e0 <__adddf3+0x89c>
 c00b750:	01001004 	movi	r4,64
 c00b754:	20c7c83a 	sub	r3,r4,r3
 c00b758:	40c6983a 	sll	r3,r8,r3
 c00b75c:	1c46b03a 	or	r3,r3,r17
 c00b760:	1806c03a 	cmpne	r3,r3,zero
 c00b764:	28e2b03a 	or	r17,r5,r3
 c00b768:	0007883a 	mov	r3,zero
 c00b76c:	003f2306 	br	c00b3fc <__alt_data_end+0xfc00b3fc>
 c00b770:	0007883a 	mov	r3,zero
 c00b774:	5811883a 	mov	r8,r11
 c00b778:	00bfffc4 	movi	r2,-1
 c00b77c:	0401ffc4 	movi	r16,2047
 c00b780:	003e7806 	br	c00b164 <__alt_data_end+0xfc00b164>
 c00b784:	4462b03a 	or	r17,r8,r17
 c00b788:	8822c03a 	cmpne	r17,r17,zero
 c00b78c:	0009883a 	mov	r4,zero
 c00b790:	003fa006 	br	c00b614 <__alt_data_end+0xfc00b614>
 c00b794:	4811883a 	mov	r8,r9
 c00b798:	3023883a 	mov	r17,r6
 c00b79c:	0401ffc4 	movi	r16,2047
 c00b7a0:	003e0706 	br	c00afc0 <__alt_data_end+0xfc00afc0>
 c00b7a4:	4811883a 	mov	r8,r9
 c00b7a8:	3023883a 	mov	r17,r6
 c00b7ac:	003e0406 	br	c00afc0 <__alt_data_end+0xfc00afc0>
 c00b7b0:	21fff804 	addi	r7,r4,-32
 c00b7b4:	01400804 	movi	r5,32
 c00b7b8:	41ced83a 	srl	r7,r8,r7
 c00b7bc:	21400a26 	beq	r4,r5,c00b7e8 <__adddf3+0x8a4>
 c00b7c0:	01401004 	movi	r5,64
 c00b7c4:	2909c83a 	sub	r4,r5,r4
 c00b7c8:	4108983a 	sll	r4,r8,r4
 c00b7cc:	2448b03a 	or	r4,r4,r17
 c00b7d0:	2008c03a 	cmpne	r4,r4,zero
 c00b7d4:	3922b03a 	or	r17,r7,r4
 c00b7d8:	0009883a 	mov	r4,zero
 c00b7dc:	003f8d06 	br	c00b614 <__alt_data_end+0xfc00b614>
 c00b7e0:	0007883a 	mov	r3,zero
 c00b7e4:	003fdd06 	br	c00b75c <__alt_data_end+0xfc00b75c>
 c00b7e8:	0009883a 	mov	r4,zero
 c00b7ec:	003ff706 	br	c00b7cc <__alt_data_end+0xfc00b7cc>

0c00b7f0 <__divdf3>:
 c00b7f0:	defff004 	addi	sp,sp,-64
 c00b7f4:	dc800815 	stw	r18,32(sp)
 c00b7f8:	2824d53a 	srli	r18,r5,20
 c00b7fc:	dd800c15 	stw	r22,48(sp)
 c00b800:	282cd7fa 	srli	r22,r5,31
 c00b804:	dc000615 	stw	r16,24(sp)
 c00b808:	04000434 	movhi	r16,16
 c00b80c:	843fffc4 	addi	r16,r16,-1
 c00b810:	dfc00f15 	stw	ra,60(sp)
 c00b814:	df000e15 	stw	fp,56(sp)
 c00b818:	ddc00d15 	stw	r23,52(sp)
 c00b81c:	dd400b15 	stw	r21,44(sp)
 c00b820:	dd000a15 	stw	r20,40(sp)
 c00b824:	dcc00915 	stw	r19,36(sp)
 c00b828:	dc400715 	stw	r17,28(sp)
 c00b82c:	9481ffcc 	andi	r18,r18,2047
 c00b830:	2c20703a 	and	r16,r5,r16
 c00b834:	b2003fcc 	andi	r8,r22,255
 c00b838:	90006126 	beq	r18,zero,c00b9c0 <__divdf3+0x1d0>
 c00b83c:	0081ffc4 	movi	r2,2047
 c00b840:	202b883a 	mov	r21,r4
 c00b844:	90803726 	beq	r18,r2,c00b924 <__divdf3+0x134>
 c00b848:	80800434 	orhi	r2,r16,16
 c00b84c:	100490fa 	slli	r2,r2,3
 c00b850:	2020d77a 	srli	r16,r4,29
 c00b854:	202a90fa 	slli	r21,r4,3
 c00b858:	94bf0044 	addi	r18,r18,-1023
 c00b85c:	80a0b03a 	or	r16,r16,r2
 c00b860:	0013883a 	mov	r9,zero
 c00b864:	000b883a 	mov	r5,zero
 c00b868:	3806d53a 	srli	r3,r7,20
 c00b86c:	382ed7fa 	srli	r23,r7,31
 c00b870:	04400434 	movhi	r17,16
 c00b874:	8c7fffc4 	addi	r17,r17,-1
 c00b878:	18c1ffcc 	andi	r3,r3,2047
 c00b87c:	3029883a 	mov	r20,r6
 c00b880:	3c62703a 	and	r17,r7,r17
 c00b884:	bf003fcc 	andi	fp,r23,255
 c00b888:	18006e26 	beq	r3,zero,c00ba44 <__divdf3+0x254>
 c00b88c:	0081ffc4 	movi	r2,2047
 c00b890:	18806626 	beq	r3,r2,c00ba2c <__divdf3+0x23c>
 c00b894:	88800434 	orhi	r2,r17,16
 c00b898:	100490fa 	slli	r2,r2,3
 c00b89c:	3022d77a 	srli	r17,r6,29
 c00b8a0:	302890fa 	slli	r20,r6,3
 c00b8a4:	18ff0044 	addi	r3,r3,-1023
 c00b8a8:	88a2b03a 	or	r17,r17,r2
 c00b8ac:	000f883a 	mov	r7,zero
 c00b8b0:	b5e6f03a 	xor	r19,r22,r23
 c00b8b4:	3a4cb03a 	or	r6,r7,r9
 c00b8b8:	008003c4 	movi	r2,15
 c00b8bc:	9809883a 	mov	r4,r19
 c00b8c0:	90c7c83a 	sub	r3,r18,r3
 c00b8c4:	9cc03fcc 	andi	r19,r19,255
 c00b8c8:	11809636 	bltu	r2,r6,c00bb24 <__divdf3+0x334>
 c00b8cc:	300c90ba 	slli	r6,r6,2
 c00b8d0:	00830074 	movhi	r2,3073
 c00b8d4:	10ae3904 	addi	r2,r2,-18204
 c00b8d8:	308d883a 	add	r6,r6,r2
 c00b8dc:	30800017 	ldw	r2,0(r6)
 c00b8e0:	1000683a 	jmp	r2
 c00b8e4:	0c00bb24 	muli	r16,at,748
 c00b8e8:	0c00b95c 	xori	r16,at,741
 c00b8ec:	0c00bb14 	ori	r16,at,748
 c00b8f0:	0c00b950 	cmplti	r16,at,741
 c00b8f4:	0c00bb14 	ori	r16,at,748
 c00b8f8:	0c00bae8 	cmpgeui	r16,at,747
 c00b8fc:	0c00bb14 	ori	r16,at,748
 c00b900:	0c00b950 	cmplti	r16,at,741
 c00b904:	0c00b95c 	xori	r16,at,741
 c00b908:	0c00b95c 	xori	r16,at,741
 c00b90c:	0c00bae8 	cmpgeui	r16,at,747
 c00b910:	0c00b950 	cmplti	r16,at,741
 c00b914:	0c00b940 	call	c00b94 <__alt_mem_onchip_memory2_0+0xc00b94>
 c00b918:	0c00b940 	call	c00b94 <__alt_mem_onchip_memory2_0+0xc00b94>
 c00b91c:	0c00b940 	call	c00b94 <__alt_mem_onchip_memory2_0+0xc00b94>
 c00b920:	0c00beac 	andhi	r16,at,762
 c00b924:	2404b03a 	or	r2,r4,r16
 c00b928:	10006c1e 	bne	r2,zero,c00badc <__divdf3+0x2ec>
 c00b92c:	02400204 	movi	r9,8
 c00b930:	0021883a 	mov	r16,zero
 c00b934:	002b883a 	mov	r21,zero
 c00b938:	01400084 	movi	r5,2
 c00b93c:	003fca06 	br	c00b868 <__alt_data_end+0xfc00b868>
 c00b940:	8023883a 	mov	r17,r16
 c00b944:	a829883a 	mov	r20,r21
 c00b948:	4039883a 	mov	fp,r8
 c00b94c:	280f883a 	mov	r7,r5
 c00b950:	00800084 	movi	r2,2
 c00b954:	3881601e 	bne	r7,r2,c00bed8 <__divdf3+0x6e8>
 c00b958:	e027883a 	mov	r19,fp
 c00b95c:	9900004c 	andi	r4,r19,1
 c00b960:	0081ffc4 	movi	r2,2047
 c00b964:	0021883a 	mov	r16,zero
 c00b968:	002b883a 	mov	r21,zero
 c00b96c:	1004953a 	slli	r2,r2,20
 c00b970:	20c03fcc 	andi	r3,r4,255
 c00b974:	01400434 	movhi	r5,16
 c00b978:	297fffc4 	addi	r5,r5,-1
 c00b97c:	180697fa 	slli	r3,r3,31
 c00b980:	8160703a 	and	r16,r16,r5
 c00b984:	80a0b03a 	or	r16,r16,r2
 c00b988:	80c6b03a 	or	r3,r16,r3
 c00b98c:	a805883a 	mov	r2,r21
 c00b990:	dfc00f17 	ldw	ra,60(sp)
 c00b994:	df000e17 	ldw	fp,56(sp)
 c00b998:	ddc00d17 	ldw	r23,52(sp)
 c00b99c:	dd800c17 	ldw	r22,48(sp)
 c00b9a0:	dd400b17 	ldw	r21,44(sp)
 c00b9a4:	dd000a17 	ldw	r20,40(sp)
 c00b9a8:	dcc00917 	ldw	r19,36(sp)
 c00b9ac:	dc800817 	ldw	r18,32(sp)
 c00b9b0:	dc400717 	ldw	r17,28(sp)
 c00b9b4:	dc000617 	ldw	r16,24(sp)
 c00b9b8:	dec01004 	addi	sp,sp,64
 c00b9bc:	f800283a 	ret
 c00b9c0:	2404b03a 	or	r2,r4,r16
 c00b9c4:	2023883a 	mov	r17,r4
 c00b9c8:	10003f26 	beq	r2,zero,c00bac8 <__divdf3+0x2d8>
 c00b9cc:	80015e26 	beq	r16,zero,c00bf48 <__divdf3+0x758>
 c00b9d0:	8009883a 	mov	r4,r16
 c00b9d4:	d9800215 	stw	r6,8(sp)
 c00b9d8:	d9c00515 	stw	r7,20(sp)
 c00b9dc:	da000415 	stw	r8,16(sp)
 c00b9e0:	c00d7840 	call	c00d784 <__clzsi2>
 c00b9e4:	d9800217 	ldw	r6,8(sp)
 c00b9e8:	d9c00517 	ldw	r7,20(sp)
 c00b9ec:	da000417 	ldw	r8,16(sp)
 c00b9f0:	113ffd44 	addi	r4,r2,-11
 c00b9f4:	00c00704 	movi	r3,28
 c00b9f8:	19014f16 	blt	r3,r4,c00bf38 <__divdf3+0x748>
 c00b9fc:	00c00744 	movi	r3,29
 c00ba00:	157ffe04 	addi	r21,r2,-8
 c00ba04:	1907c83a 	sub	r3,r3,r4
 c00ba08:	8560983a 	sll	r16,r16,r21
 c00ba0c:	88c6d83a 	srl	r3,r17,r3
 c00ba10:	8d6a983a 	sll	r21,r17,r21
 c00ba14:	1c20b03a 	or	r16,r3,r16
 c00ba18:	1080fcc4 	addi	r2,r2,1011
 c00ba1c:	00a5c83a 	sub	r18,zero,r2
 c00ba20:	0013883a 	mov	r9,zero
 c00ba24:	000b883a 	mov	r5,zero
 c00ba28:	003f8f06 	br	c00b868 <__alt_data_end+0xfc00b868>
 c00ba2c:	3444b03a 	or	r2,r6,r17
 c00ba30:	1000231e 	bne	r2,zero,c00bac0 <__divdf3+0x2d0>
 c00ba34:	0023883a 	mov	r17,zero
 c00ba38:	0029883a 	mov	r20,zero
 c00ba3c:	01c00084 	movi	r7,2
 c00ba40:	003f9b06 	br	c00b8b0 <__alt_data_end+0xfc00b8b0>
 c00ba44:	3444b03a 	or	r2,r6,r17
 c00ba48:	10001926 	beq	r2,zero,c00bab0 <__divdf3+0x2c0>
 c00ba4c:	88014b26 	beq	r17,zero,c00bf7c <__divdf3+0x78c>
 c00ba50:	8809883a 	mov	r4,r17
 c00ba54:	d9400115 	stw	r5,4(sp)
 c00ba58:	d9800215 	stw	r6,8(sp)
 c00ba5c:	da000415 	stw	r8,16(sp)
 c00ba60:	da400315 	stw	r9,12(sp)
 c00ba64:	c00d7840 	call	c00d784 <__clzsi2>
 c00ba68:	d9400117 	ldw	r5,4(sp)
 c00ba6c:	d9800217 	ldw	r6,8(sp)
 c00ba70:	da000417 	ldw	r8,16(sp)
 c00ba74:	da400317 	ldw	r9,12(sp)
 c00ba78:	113ffd44 	addi	r4,r2,-11
 c00ba7c:	00c00704 	movi	r3,28
 c00ba80:	19013a16 	blt	r3,r4,c00bf6c <__divdf3+0x77c>
 c00ba84:	00c00744 	movi	r3,29
 c00ba88:	153ffe04 	addi	r20,r2,-8
 c00ba8c:	1907c83a 	sub	r3,r3,r4
 c00ba90:	8d22983a 	sll	r17,r17,r20
 c00ba94:	30c6d83a 	srl	r3,r6,r3
 c00ba98:	3528983a 	sll	r20,r6,r20
 c00ba9c:	1c62b03a 	or	r17,r3,r17
 c00baa0:	1080fcc4 	addi	r2,r2,1011
 c00baa4:	0087c83a 	sub	r3,zero,r2
 c00baa8:	000f883a 	mov	r7,zero
 c00baac:	003f8006 	br	c00b8b0 <__alt_data_end+0xfc00b8b0>
 c00bab0:	0023883a 	mov	r17,zero
 c00bab4:	0029883a 	mov	r20,zero
 c00bab8:	01c00044 	movi	r7,1
 c00babc:	003f7c06 	br	c00b8b0 <__alt_data_end+0xfc00b8b0>
 c00bac0:	01c000c4 	movi	r7,3
 c00bac4:	003f7a06 	br	c00b8b0 <__alt_data_end+0xfc00b8b0>
 c00bac8:	02400104 	movi	r9,4
 c00bacc:	0021883a 	mov	r16,zero
 c00bad0:	002b883a 	mov	r21,zero
 c00bad4:	01400044 	movi	r5,1
 c00bad8:	003f6306 	br	c00b868 <__alt_data_end+0xfc00b868>
 c00badc:	02400304 	movi	r9,12
 c00bae0:	014000c4 	movi	r5,3
 c00bae4:	003f6006 	br	c00b868 <__alt_data_end+0xfc00b868>
 c00bae8:	04000434 	movhi	r16,16
 c00baec:	0009883a 	mov	r4,zero
 c00baf0:	843fffc4 	addi	r16,r16,-1
 c00baf4:	057fffc4 	movi	r21,-1
 c00baf8:	0081ffc4 	movi	r2,2047
 c00bafc:	003f9b06 	br	c00b96c <__alt_data_end+0xfc00b96c>
 c00bb00:	00c00044 	movi	r3,1
 c00bb04:	1887c83a 	sub	r3,r3,r2
 c00bb08:	01000e04 	movi	r4,56
 c00bb0c:	20c1530e 	bge	r4,r3,c00c05c <__divdf3+0x86c>
 c00bb10:	9900004c 	andi	r4,r19,1
 c00bb14:	0005883a 	mov	r2,zero
 c00bb18:	0021883a 	mov	r16,zero
 c00bb1c:	002b883a 	mov	r21,zero
 c00bb20:	003f9206 	br	c00b96c <__alt_data_end+0xfc00b96c>
 c00bb24:	8c012e36 	bltu	r17,r16,c00bfe0 <__divdf3+0x7f0>
 c00bb28:	84412c26 	beq	r16,r17,c00bfdc <__divdf3+0x7ec>
 c00bb2c:	a82f883a 	mov	r23,r21
 c00bb30:	18ffffc4 	addi	r3,r3,-1
 c00bb34:	002b883a 	mov	r21,zero
 c00bb38:	a004d63a 	srli	r2,r20,24
 c00bb3c:	8822923a 	slli	r17,r17,8
 c00bb40:	a028923a 	slli	r20,r20,8
 c00bb44:	8009883a 	mov	r4,r16
 c00bb48:	88acb03a 	or	r22,r17,r2
 c00bb4c:	dd000015 	stw	r20,0(sp)
 c00bb50:	b028d43a 	srli	r20,r22,16
 c00bb54:	d8c00215 	stw	r3,8(sp)
 c00bb58:	b4bfffcc 	andi	r18,r22,65535
 c00bb5c:	a00b883a 	mov	r5,r20
 c00bb60:	c00ae880 	call	c00ae88 <__udivsi3>
 c00bb64:	100b883a 	mov	r5,r2
 c00bb68:	9009883a 	mov	r4,r18
 c00bb6c:	1023883a 	mov	r17,r2
 c00bb70:	c00097c0 	call	c00097c <__mulsi3>
 c00bb74:	8009883a 	mov	r4,r16
 c00bb78:	a00b883a 	mov	r5,r20
 c00bb7c:	1039883a 	mov	fp,r2
 c00bb80:	c00aeec0 	call	c00aeec <__umodsi3>
 c00bb84:	1004943a 	slli	r2,r2,16
 c00bb88:	b808d43a 	srli	r4,r23,16
 c00bb8c:	d8c00217 	ldw	r3,8(sp)
 c00bb90:	2084b03a 	or	r2,r4,r2
 c00bb94:	1700062e 	bgeu	r2,fp,c00bbb0 <__divdf3+0x3c0>
 c00bb98:	1585883a 	add	r2,r2,r22
 c00bb9c:	893fffc4 	addi	r4,r17,-1
 c00bba0:	15811d36 	bltu	r2,r22,c00c018 <__divdf3+0x828>
 c00bba4:	17011c2e 	bgeu	r2,fp,c00c018 <__divdf3+0x828>
 c00bba8:	8c7fff84 	addi	r17,r17,-2
 c00bbac:	1585883a 	add	r2,r2,r22
 c00bbb0:	1739c83a 	sub	fp,r2,fp
 c00bbb4:	a00b883a 	mov	r5,r20
 c00bbb8:	e009883a 	mov	r4,fp
 c00bbbc:	d8c00215 	stw	r3,8(sp)
 c00bbc0:	c00ae880 	call	c00ae88 <__udivsi3>
 c00bbc4:	100b883a 	mov	r5,r2
 c00bbc8:	9009883a 	mov	r4,r18
 c00bbcc:	1021883a 	mov	r16,r2
 c00bbd0:	c00097c0 	call	c00097c <__mulsi3>
 c00bbd4:	a00b883a 	mov	r5,r20
 c00bbd8:	e009883a 	mov	r4,fp
 c00bbdc:	d8800415 	stw	r2,16(sp)
 c00bbe0:	c00aeec0 	call	c00aeec <__umodsi3>
 c00bbe4:	1004943a 	slli	r2,r2,16
 c00bbe8:	da000417 	ldw	r8,16(sp)
 c00bbec:	bdffffcc 	andi	r23,r23,65535
 c00bbf0:	b884b03a 	or	r2,r23,r2
 c00bbf4:	d8c00217 	ldw	r3,8(sp)
 c00bbf8:	1200062e 	bgeu	r2,r8,c00bc14 <__divdf3+0x424>
 c00bbfc:	1585883a 	add	r2,r2,r22
 c00bc00:	813fffc4 	addi	r4,r16,-1
 c00bc04:	15810236 	bltu	r2,r22,c00c010 <__divdf3+0x820>
 c00bc08:	1201012e 	bgeu	r2,r8,c00c010 <__divdf3+0x820>
 c00bc0c:	843fff84 	addi	r16,r16,-2
 c00bc10:	1585883a 	add	r2,r2,r22
 c00bc14:	8822943a 	slli	r17,r17,16
 c00bc18:	d9800017 	ldw	r6,0(sp)
 c00bc1c:	1211c83a 	sub	r8,r2,r8
 c00bc20:	8c22b03a 	or	r17,r17,r16
 c00bc24:	373fffcc 	andi	fp,r6,65535
 c00bc28:	8abfffcc 	andi	r10,r17,65535
 c00bc2c:	8820d43a 	srli	r16,r17,16
 c00bc30:	5009883a 	mov	r4,r10
 c00bc34:	e00b883a 	mov	r5,fp
 c00bc38:	302ed43a 	srli	r23,r6,16
 c00bc3c:	d8c00215 	stw	r3,8(sp)
 c00bc40:	da000415 	stw	r8,16(sp)
 c00bc44:	da800115 	stw	r10,4(sp)
 c00bc48:	c00097c0 	call	c00097c <__mulsi3>
 c00bc4c:	800b883a 	mov	r5,r16
 c00bc50:	e009883a 	mov	r4,fp
 c00bc54:	d8800515 	stw	r2,20(sp)
 c00bc58:	c00097c0 	call	c00097c <__mulsi3>
 c00bc5c:	8009883a 	mov	r4,r16
 c00bc60:	b80b883a 	mov	r5,r23
 c00bc64:	d8800315 	stw	r2,12(sp)
 c00bc68:	c00097c0 	call	c00097c <__mulsi3>
 c00bc6c:	da800117 	ldw	r10,4(sp)
 c00bc70:	b80b883a 	mov	r5,r23
 c00bc74:	1021883a 	mov	r16,r2
 c00bc78:	5009883a 	mov	r4,r10
 c00bc7c:	c00097c0 	call	c00097c <__mulsi3>
 c00bc80:	d9c00517 	ldw	r7,20(sp)
 c00bc84:	da400317 	ldw	r9,12(sp)
 c00bc88:	d8c00217 	ldw	r3,8(sp)
 c00bc8c:	3808d43a 	srli	r4,r7,16
 c00bc90:	1245883a 	add	r2,r2,r9
 c00bc94:	da000417 	ldw	r8,16(sp)
 c00bc98:	2085883a 	add	r2,r4,r2
 c00bc9c:	1240022e 	bgeu	r2,r9,c00bca8 <__divdf3+0x4b8>
 c00bca0:	01000074 	movhi	r4,1
 c00bca4:	8121883a 	add	r16,r16,r4
 c00bca8:	1008d43a 	srli	r4,r2,16
 c00bcac:	1004943a 	slli	r2,r2,16
 c00bcb0:	39ffffcc 	andi	r7,r7,65535
 c00bcb4:	2409883a 	add	r4,r4,r16
 c00bcb8:	11c5883a 	add	r2,r2,r7
 c00bcbc:	4100bb36 	bltu	r8,r4,c00bfac <__divdf3+0x7bc>
 c00bcc0:	4100d726 	beq	r8,r4,c00c020 <__divdf3+0x830>
 c00bcc4:	4109c83a 	sub	r4,r8,r4
 c00bcc8:	a8a1c83a 	sub	r16,r21,r2
 c00bccc:	ac2b803a 	cmpltu	r21,r21,r16
 c00bcd0:	256bc83a 	sub	r21,r4,r21
 c00bcd4:	b540d926 	beq	r22,r21,c00c03c <__divdf3+0x84c>
 c00bcd8:	a00b883a 	mov	r5,r20
 c00bcdc:	a809883a 	mov	r4,r21
 c00bce0:	d8c00215 	stw	r3,8(sp)
 c00bce4:	c00ae880 	call	c00ae88 <__udivsi3>
 c00bce8:	100b883a 	mov	r5,r2
 c00bcec:	9009883a 	mov	r4,r18
 c00bcf0:	d8800515 	stw	r2,20(sp)
 c00bcf4:	c00097c0 	call	c00097c <__mulsi3>
 c00bcf8:	a809883a 	mov	r4,r21
 c00bcfc:	a00b883a 	mov	r5,r20
 c00bd00:	d8800415 	stw	r2,16(sp)
 c00bd04:	c00aeec0 	call	c00aeec <__umodsi3>
 c00bd08:	1004943a 	slli	r2,r2,16
 c00bd0c:	8008d43a 	srli	r4,r16,16
 c00bd10:	da000417 	ldw	r8,16(sp)
 c00bd14:	d8c00217 	ldw	r3,8(sp)
 c00bd18:	2084b03a 	or	r2,r4,r2
 c00bd1c:	d9c00517 	ldw	r7,20(sp)
 c00bd20:	1200062e 	bgeu	r2,r8,c00bd3c <__divdf3+0x54c>
 c00bd24:	1585883a 	add	r2,r2,r22
 c00bd28:	393fffc4 	addi	r4,r7,-1
 c00bd2c:	1580c536 	bltu	r2,r22,c00c044 <__divdf3+0x854>
 c00bd30:	1200c42e 	bgeu	r2,r8,c00c044 <__divdf3+0x854>
 c00bd34:	39ffff84 	addi	r7,r7,-2
 c00bd38:	1585883a 	add	r2,r2,r22
 c00bd3c:	122bc83a 	sub	r21,r2,r8
 c00bd40:	a00b883a 	mov	r5,r20
 c00bd44:	a809883a 	mov	r4,r21
 c00bd48:	d8c00215 	stw	r3,8(sp)
 c00bd4c:	d9c00515 	stw	r7,20(sp)
 c00bd50:	c00ae880 	call	c00ae88 <__udivsi3>
 c00bd54:	9009883a 	mov	r4,r18
 c00bd58:	100b883a 	mov	r5,r2
 c00bd5c:	d8800415 	stw	r2,16(sp)
 c00bd60:	c00097c0 	call	c00097c <__mulsi3>
 c00bd64:	a809883a 	mov	r4,r21
 c00bd68:	a00b883a 	mov	r5,r20
 c00bd6c:	1025883a 	mov	r18,r2
 c00bd70:	c00aeec0 	call	c00aeec <__umodsi3>
 c00bd74:	1004943a 	slli	r2,r2,16
 c00bd78:	813fffcc 	andi	r4,r16,65535
 c00bd7c:	d8c00217 	ldw	r3,8(sp)
 c00bd80:	20a0b03a 	or	r16,r4,r2
 c00bd84:	d9c00517 	ldw	r7,20(sp)
 c00bd88:	da000417 	ldw	r8,16(sp)
 c00bd8c:	8480062e 	bgeu	r16,r18,c00bda8 <__divdf3+0x5b8>
 c00bd90:	85a1883a 	add	r16,r16,r22
 c00bd94:	40bfffc4 	addi	r2,r8,-1
 c00bd98:	8580ac36 	bltu	r16,r22,c00c04c <__divdf3+0x85c>
 c00bd9c:	8480ab2e 	bgeu	r16,r18,c00c04c <__divdf3+0x85c>
 c00bda0:	423fff84 	addi	r8,r8,-2
 c00bda4:	85a1883a 	add	r16,r16,r22
 c00bda8:	3804943a 	slli	r2,r7,16
 c00bdac:	84a1c83a 	sub	r16,r16,r18
 c00bdb0:	e009883a 	mov	r4,fp
 c00bdb4:	1228b03a 	or	r20,r2,r8
 c00bdb8:	a1ffffcc 	andi	r7,r20,65535
 c00bdbc:	a024d43a 	srli	r18,r20,16
 c00bdc0:	380b883a 	mov	r5,r7
 c00bdc4:	d8c00215 	stw	r3,8(sp)
 c00bdc8:	d9c00515 	stw	r7,20(sp)
 c00bdcc:	c00097c0 	call	c00097c <__mulsi3>
 c00bdd0:	900b883a 	mov	r5,r18
 c00bdd4:	e009883a 	mov	r4,fp
 c00bdd8:	102b883a 	mov	r21,r2
 c00bddc:	c00097c0 	call	c00097c <__mulsi3>
 c00bde0:	900b883a 	mov	r5,r18
 c00bde4:	b809883a 	mov	r4,r23
 c00bde8:	1039883a 	mov	fp,r2
 c00bdec:	c00097c0 	call	c00097c <__mulsi3>
 c00bdf0:	d9c00517 	ldw	r7,20(sp)
 c00bdf4:	b80b883a 	mov	r5,r23
 c00bdf8:	1025883a 	mov	r18,r2
 c00bdfc:	3809883a 	mov	r4,r7
 c00be00:	c00097c0 	call	c00097c <__mulsi3>
 c00be04:	a808d43a 	srli	r4,r21,16
 c00be08:	1705883a 	add	r2,r2,fp
 c00be0c:	d8c00217 	ldw	r3,8(sp)
 c00be10:	2085883a 	add	r2,r4,r2
 c00be14:	1700022e 	bgeu	r2,fp,c00be20 <__divdf3+0x630>
 c00be18:	01000074 	movhi	r4,1
 c00be1c:	9125883a 	add	r18,r18,r4
 c00be20:	1008d43a 	srli	r4,r2,16
 c00be24:	1004943a 	slli	r2,r2,16
 c00be28:	ad7fffcc 	andi	r21,r21,65535
 c00be2c:	2489883a 	add	r4,r4,r18
 c00be30:	1545883a 	add	r2,r2,r21
 c00be34:	81003836 	bltu	r16,r4,c00bf18 <__divdf3+0x728>
 c00be38:	81003626 	beq	r16,r4,c00bf14 <__divdf3+0x724>
 c00be3c:	a5000054 	ori	r20,r20,1
 c00be40:	1880ffc4 	addi	r2,r3,1023
 c00be44:	00bf2e0e 	bge	zero,r2,c00bb00 <__alt_data_end+0xfc00bb00>
 c00be48:	a10001cc 	andi	r4,r20,7
 c00be4c:	20000726 	beq	r4,zero,c00be6c <__divdf3+0x67c>
 c00be50:	a10003cc 	andi	r4,r20,15
 c00be54:	01400104 	movi	r5,4
 c00be58:	21400426 	beq	r4,r5,c00be6c <__divdf3+0x67c>
 c00be5c:	a149883a 	add	r4,r20,r5
 c00be60:	2529803a 	cmpltu	r20,r4,r20
 c00be64:	8d23883a 	add	r17,r17,r20
 c00be68:	2029883a 	mov	r20,r4
 c00be6c:	8900402c 	andhi	r4,r17,256
 c00be70:	20000426 	beq	r4,zero,c00be84 <__divdf3+0x694>
 c00be74:	18810004 	addi	r2,r3,1024
 c00be78:	00ffc034 	movhi	r3,65280
 c00be7c:	18ffffc4 	addi	r3,r3,-1
 c00be80:	88e2703a 	and	r17,r17,r3
 c00be84:	00c1ff84 	movi	r3,2046
 c00be88:	18beb416 	blt	r3,r2,c00b95c <__alt_data_end+0xfc00b95c>
 c00be8c:	a028d0fa 	srli	r20,r20,3
 c00be90:	882a977a 	slli	r21,r17,29
 c00be94:	8820927a 	slli	r16,r17,9
 c00be98:	1081ffcc 	andi	r2,r2,2047
 c00be9c:	ad2ab03a 	or	r21,r21,r20
 c00bea0:	8020d33a 	srli	r16,r16,12
 c00bea4:	9900004c 	andi	r4,r19,1
 c00bea8:	003eb006 	br	c00b96c <__alt_data_end+0xfc00b96c>
 c00beac:	8080022c 	andhi	r2,r16,8
 c00beb0:	10001226 	beq	r2,zero,c00befc <__divdf3+0x70c>
 c00beb4:	8880022c 	andhi	r2,r17,8
 c00beb8:	1000101e 	bne	r2,zero,c00befc <__divdf3+0x70c>
 c00bebc:	00800434 	movhi	r2,16
 c00bec0:	8c000234 	orhi	r16,r17,8
 c00bec4:	10bfffc4 	addi	r2,r2,-1
 c00bec8:	b809883a 	mov	r4,r23
 c00becc:	80a0703a 	and	r16,r16,r2
 c00bed0:	a02b883a 	mov	r21,r20
 c00bed4:	003f0806 	br	c00baf8 <__alt_data_end+0xfc00baf8>
 c00bed8:	008000c4 	movi	r2,3
 c00bedc:	3880b126 	beq	r7,r2,c00c1a4 <__divdf3+0x9b4>
 c00bee0:	00800044 	movi	r2,1
 c00bee4:	38805b1e 	bne	r7,r2,c00c054 <__divdf3+0x864>
 c00bee8:	e009883a 	mov	r4,fp
 c00beec:	0005883a 	mov	r2,zero
 c00bef0:	0021883a 	mov	r16,zero
 c00bef4:	002b883a 	mov	r21,zero
 c00bef8:	003e9c06 	br	c00b96c <__alt_data_end+0xfc00b96c>
 c00befc:	00800434 	movhi	r2,16
 c00bf00:	84000234 	orhi	r16,r16,8
 c00bf04:	10bfffc4 	addi	r2,r2,-1
 c00bf08:	b009883a 	mov	r4,r22
 c00bf0c:	80a0703a 	and	r16,r16,r2
 c00bf10:	003ef906 	br	c00baf8 <__alt_data_end+0xfc00baf8>
 c00bf14:	103fca26 	beq	r2,zero,c00be40 <__alt_data_end+0xfc00be40>
 c00bf18:	b421883a 	add	r16,r22,r16
 c00bf1c:	a17fffc4 	addi	r5,r20,-1
 c00bf20:	8580422e 	bgeu	r16,r22,c00c02c <__divdf3+0x83c>
 c00bf24:	2829883a 	mov	r20,r5
 c00bf28:	813fc41e 	bne	r16,r4,c00be3c <__alt_data_end+0xfc00be3c>
 c00bf2c:	d9800017 	ldw	r6,0(sp)
 c00bf30:	30bfc21e 	bne	r6,r2,c00be3c <__alt_data_end+0xfc00be3c>
 c00bf34:	003fc206 	br	c00be40 <__alt_data_end+0xfc00be40>
 c00bf38:	143ff604 	addi	r16,r2,-40
 c00bf3c:	8c20983a 	sll	r16,r17,r16
 c00bf40:	002b883a 	mov	r21,zero
 c00bf44:	003eb406 	br	c00ba18 <__alt_data_end+0xfc00ba18>
 c00bf48:	d9800215 	stw	r6,8(sp)
 c00bf4c:	d9c00515 	stw	r7,20(sp)
 c00bf50:	da000415 	stw	r8,16(sp)
 c00bf54:	c00d7840 	call	c00d784 <__clzsi2>
 c00bf58:	10800804 	addi	r2,r2,32
 c00bf5c:	da000417 	ldw	r8,16(sp)
 c00bf60:	d9c00517 	ldw	r7,20(sp)
 c00bf64:	d9800217 	ldw	r6,8(sp)
 c00bf68:	003ea106 	br	c00b9f0 <__alt_data_end+0xfc00b9f0>
 c00bf6c:	147ff604 	addi	r17,r2,-40
 c00bf70:	3462983a 	sll	r17,r6,r17
 c00bf74:	0029883a 	mov	r20,zero
 c00bf78:	003ec906 	br	c00baa0 <__alt_data_end+0xfc00baa0>
 c00bf7c:	3009883a 	mov	r4,r6
 c00bf80:	d9400115 	stw	r5,4(sp)
 c00bf84:	d9800215 	stw	r6,8(sp)
 c00bf88:	da000415 	stw	r8,16(sp)
 c00bf8c:	da400315 	stw	r9,12(sp)
 c00bf90:	c00d7840 	call	c00d784 <__clzsi2>
 c00bf94:	10800804 	addi	r2,r2,32
 c00bf98:	da400317 	ldw	r9,12(sp)
 c00bf9c:	da000417 	ldw	r8,16(sp)
 c00bfa0:	d9800217 	ldw	r6,8(sp)
 c00bfa4:	d9400117 	ldw	r5,4(sp)
 c00bfa8:	003eb306 	br	c00ba78 <__alt_data_end+0xfc00ba78>
 c00bfac:	d9800017 	ldw	r6,0(sp)
 c00bfb0:	a9ab883a 	add	r21,r21,r6
 c00bfb4:	a98b803a 	cmpltu	r5,r21,r6
 c00bfb8:	2d8b883a 	add	r5,r5,r22
 c00bfbc:	2a11883a 	add	r8,r5,r8
 c00bfc0:	897fffc4 	addi	r5,r17,-1
 c00bfc4:	b2000c2e 	bgeu	r22,r8,c00bff8 <__divdf3+0x808>
 c00bfc8:	41003f36 	bltu	r8,r4,c00c0c8 <__divdf3+0x8d8>
 c00bfcc:	22006c26 	beq	r4,r8,c00c180 <__divdf3+0x990>
 c00bfd0:	4109c83a 	sub	r4,r8,r4
 c00bfd4:	2823883a 	mov	r17,r5
 c00bfd8:	003f3b06 	br	c00bcc8 <__alt_data_end+0xfc00bcc8>
 c00bfdc:	ad3ed336 	bltu	r21,r20,c00bb2c <__alt_data_end+0xfc00bb2c>
 c00bfe0:	a804d07a 	srli	r2,r21,1
 c00bfe4:	802e97fa 	slli	r23,r16,31
 c00bfe8:	a82a97fa 	slli	r21,r21,31
 c00bfec:	8020d07a 	srli	r16,r16,1
 c00bff0:	b8aeb03a 	or	r23,r23,r2
 c00bff4:	003ed006 	br	c00bb38 <__alt_data_end+0xfc00bb38>
 c00bff8:	b23ff51e 	bne	r22,r8,c00bfd0 <__alt_data_end+0xfc00bfd0>
 c00bffc:	d9800017 	ldw	r6,0(sp)
 c00c000:	a9bff12e 	bgeu	r21,r6,c00bfc8 <__alt_data_end+0xfc00bfc8>
 c00c004:	b109c83a 	sub	r4,r22,r4
 c00c008:	2823883a 	mov	r17,r5
 c00c00c:	003f2e06 	br	c00bcc8 <__alt_data_end+0xfc00bcc8>
 c00c010:	2021883a 	mov	r16,r4
 c00c014:	003eff06 	br	c00bc14 <__alt_data_end+0xfc00bc14>
 c00c018:	2023883a 	mov	r17,r4
 c00c01c:	003ee406 	br	c00bbb0 <__alt_data_end+0xfc00bbb0>
 c00c020:	a8bfe236 	bltu	r21,r2,c00bfac <__alt_data_end+0xfc00bfac>
 c00c024:	0009883a 	mov	r4,zero
 c00c028:	003f2706 	br	c00bcc8 <__alt_data_end+0xfc00bcc8>
 c00c02c:	81002d36 	bltu	r16,r4,c00c0e4 <__divdf3+0x8f4>
 c00c030:	24005626 	beq	r4,r16,c00c18c <__divdf3+0x99c>
 c00c034:	2829883a 	mov	r20,r5
 c00c038:	003f8006 	br	c00be3c <__alt_data_end+0xfc00be3c>
 c00c03c:	053fffc4 	movi	r20,-1
 c00c040:	003f7f06 	br	c00be40 <__alt_data_end+0xfc00be40>
 c00c044:	200f883a 	mov	r7,r4
 c00c048:	003f3c06 	br	c00bd3c <__alt_data_end+0xfc00bd3c>
 c00c04c:	1011883a 	mov	r8,r2
 c00c050:	003f5506 	br	c00bda8 <__alt_data_end+0xfc00bda8>
 c00c054:	e027883a 	mov	r19,fp
 c00c058:	003f7906 	br	c00be40 <__alt_data_end+0xfc00be40>
 c00c05c:	010007c4 	movi	r4,31
 c00c060:	20c02816 	blt	r4,r3,c00c104 <__divdf3+0x914>
 c00c064:	00800804 	movi	r2,32
 c00c068:	10c5c83a 	sub	r2,r2,r3
 c00c06c:	888a983a 	sll	r5,r17,r2
 c00c070:	a0c8d83a 	srl	r4,r20,r3
 c00c074:	a084983a 	sll	r2,r20,r2
 c00c078:	88e2d83a 	srl	r17,r17,r3
 c00c07c:	2906b03a 	or	r3,r5,r4
 c00c080:	1004c03a 	cmpne	r2,r2,zero
 c00c084:	1886b03a 	or	r3,r3,r2
 c00c088:	188001cc 	andi	r2,r3,7
 c00c08c:	10000726 	beq	r2,zero,c00c0ac <__divdf3+0x8bc>
 c00c090:	188003cc 	andi	r2,r3,15
 c00c094:	01000104 	movi	r4,4
 c00c098:	11000426 	beq	r2,r4,c00c0ac <__divdf3+0x8bc>
 c00c09c:	1805883a 	mov	r2,r3
 c00c0a0:	10c00104 	addi	r3,r2,4
 c00c0a4:	1885803a 	cmpltu	r2,r3,r2
 c00c0a8:	88a3883a 	add	r17,r17,r2
 c00c0ac:	8880202c 	andhi	r2,r17,128
 c00c0b0:	10002926 	beq	r2,zero,c00c158 <__divdf3+0x968>
 c00c0b4:	9900004c 	andi	r4,r19,1
 c00c0b8:	00800044 	movi	r2,1
 c00c0bc:	0021883a 	mov	r16,zero
 c00c0c0:	002b883a 	mov	r21,zero
 c00c0c4:	003e2906 	br	c00b96c <__alt_data_end+0xfc00b96c>
 c00c0c8:	d9800017 	ldw	r6,0(sp)
 c00c0cc:	8c7fff84 	addi	r17,r17,-2
 c00c0d0:	a9ab883a 	add	r21,r21,r6
 c00c0d4:	a98b803a 	cmpltu	r5,r21,r6
 c00c0d8:	2d8b883a 	add	r5,r5,r22
 c00c0dc:	2a11883a 	add	r8,r5,r8
 c00c0e0:	003ef806 	br	c00bcc4 <__alt_data_end+0xfc00bcc4>
 c00c0e4:	d9800017 	ldw	r6,0(sp)
 c00c0e8:	318f883a 	add	r7,r6,r6
 c00c0ec:	398b803a 	cmpltu	r5,r7,r6
 c00c0f0:	2d8d883a 	add	r6,r5,r22
 c00c0f4:	81a1883a 	add	r16,r16,r6
 c00c0f8:	a17fff84 	addi	r5,r20,-2
 c00c0fc:	d9c00015 	stw	r7,0(sp)
 c00c100:	003f8806 	br	c00bf24 <__alt_data_end+0xfc00bf24>
 c00c104:	013ff844 	movi	r4,-31
 c00c108:	2085c83a 	sub	r2,r4,r2
 c00c10c:	8888d83a 	srl	r4,r17,r2
 c00c110:	00800804 	movi	r2,32
 c00c114:	18802126 	beq	r3,r2,c00c19c <__divdf3+0x9ac>
 c00c118:	04001004 	movi	r16,64
 c00c11c:	80c7c83a 	sub	r3,r16,r3
 c00c120:	88e0983a 	sll	r16,r17,r3
 c00c124:	8504b03a 	or	r2,r16,r20
 c00c128:	1004c03a 	cmpne	r2,r2,zero
 c00c12c:	2084b03a 	or	r2,r4,r2
 c00c130:	144001cc 	andi	r17,r2,7
 c00c134:	88000d1e 	bne	r17,zero,c00c16c <__divdf3+0x97c>
 c00c138:	0021883a 	mov	r16,zero
 c00c13c:	102ad0fa 	srli	r21,r2,3
 c00c140:	9900004c 	andi	r4,r19,1
 c00c144:	0005883a 	mov	r2,zero
 c00c148:	ac6ab03a 	or	r21,r21,r17
 c00c14c:	003e0706 	br	c00b96c <__alt_data_end+0xfc00b96c>
 c00c150:	1007883a 	mov	r3,r2
 c00c154:	0023883a 	mov	r17,zero
 c00c158:	8820927a 	slli	r16,r17,9
 c00c15c:	1805883a 	mov	r2,r3
 c00c160:	8822977a 	slli	r17,r17,29
 c00c164:	8020d33a 	srli	r16,r16,12
 c00c168:	003ff406 	br	c00c13c <__alt_data_end+0xfc00c13c>
 c00c16c:	10c003cc 	andi	r3,r2,15
 c00c170:	01000104 	movi	r4,4
 c00c174:	193ff626 	beq	r3,r4,c00c150 <__alt_data_end+0xfc00c150>
 c00c178:	0023883a 	mov	r17,zero
 c00c17c:	003fc806 	br	c00c0a0 <__alt_data_end+0xfc00c0a0>
 c00c180:	a8bfd136 	bltu	r21,r2,c00c0c8 <__alt_data_end+0xfc00c0c8>
 c00c184:	2823883a 	mov	r17,r5
 c00c188:	003fa606 	br	c00c024 <__alt_data_end+0xfc00c024>
 c00c18c:	d9800017 	ldw	r6,0(sp)
 c00c190:	30bfd436 	bltu	r6,r2,c00c0e4 <__alt_data_end+0xfc00c0e4>
 c00c194:	2829883a 	mov	r20,r5
 c00c198:	003f6406 	br	c00bf2c <__alt_data_end+0xfc00bf2c>
 c00c19c:	0021883a 	mov	r16,zero
 c00c1a0:	003fe006 	br	c00c124 <__alt_data_end+0xfc00c124>
 c00c1a4:	00800434 	movhi	r2,16
 c00c1a8:	8c000234 	orhi	r16,r17,8
 c00c1ac:	10bfffc4 	addi	r2,r2,-1
 c00c1b0:	e009883a 	mov	r4,fp
 c00c1b4:	80a0703a 	and	r16,r16,r2
 c00c1b8:	a02b883a 	mov	r21,r20
 c00c1bc:	003e4e06 	br	c00baf8 <__alt_data_end+0xfc00baf8>

0c00c1c0 <__eqdf2>:
 c00c1c0:	2804d53a 	srli	r2,r5,20
 c00c1c4:	3806d53a 	srli	r3,r7,20
 c00c1c8:	02000434 	movhi	r8,16
 c00c1cc:	423fffc4 	addi	r8,r8,-1
 c00c1d0:	1081ffcc 	andi	r2,r2,2047
 c00c1d4:	0281ffc4 	movi	r10,2047
 c00c1d8:	2a12703a 	and	r9,r5,r8
 c00c1dc:	18c1ffcc 	andi	r3,r3,2047
 c00c1e0:	3a10703a 	and	r8,r7,r8
 c00c1e4:	280ad7fa 	srli	r5,r5,31
 c00c1e8:	380ed7fa 	srli	r7,r7,31
 c00c1ec:	12801026 	beq	r2,r10,c00c230 <__eqdf2+0x70>
 c00c1f0:	0281ffc4 	movi	r10,2047
 c00c1f4:	1a800a26 	beq	r3,r10,c00c220 <__eqdf2+0x60>
 c00c1f8:	10c00226 	beq	r2,r3,c00c204 <__eqdf2+0x44>
 c00c1fc:	00800044 	movi	r2,1
 c00c200:	f800283a 	ret
 c00c204:	4a3ffd1e 	bne	r9,r8,c00c1fc <__alt_data_end+0xfc00c1fc>
 c00c208:	21bffc1e 	bne	r4,r6,c00c1fc <__alt_data_end+0xfc00c1fc>
 c00c20c:	29c00c26 	beq	r5,r7,c00c240 <__eqdf2+0x80>
 c00c210:	103ffa1e 	bne	r2,zero,c00c1fc <__alt_data_end+0xfc00c1fc>
 c00c214:	2244b03a 	or	r2,r4,r9
 c00c218:	1004c03a 	cmpne	r2,r2,zero
 c00c21c:	f800283a 	ret
 c00c220:	3214b03a 	or	r10,r6,r8
 c00c224:	503ff426 	beq	r10,zero,c00c1f8 <__alt_data_end+0xfc00c1f8>
 c00c228:	00800044 	movi	r2,1
 c00c22c:	f800283a 	ret
 c00c230:	2254b03a 	or	r10,r4,r9
 c00c234:	503fee26 	beq	r10,zero,c00c1f0 <__alt_data_end+0xfc00c1f0>
 c00c238:	00800044 	movi	r2,1
 c00c23c:	f800283a 	ret
 c00c240:	0005883a 	mov	r2,zero
 c00c244:	f800283a 	ret

0c00c248 <__gedf2>:
 c00c248:	2804d53a 	srli	r2,r5,20
 c00c24c:	3806d53a 	srli	r3,r7,20
 c00c250:	02000434 	movhi	r8,16
 c00c254:	423fffc4 	addi	r8,r8,-1
 c00c258:	1081ffcc 	andi	r2,r2,2047
 c00c25c:	0241ffc4 	movi	r9,2047
 c00c260:	2a14703a 	and	r10,r5,r8
 c00c264:	18c1ffcc 	andi	r3,r3,2047
 c00c268:	3a10703a 	and	r8,r7,r8
 c00c26c:	280ad7fa 	srli	r5,r5,31
 c00c270:	380ed7fa 	srli	r7,r7,31
 c00c274:	12401d26 	beq	r2,r9,c00c2ec <__gedf2+0xa4>
 c00c278:	0241ffc4 	movi	r9,2047
 c00c27c:	1a401226 	beq	r3,r9,c00c2c8 <__gedf2+0x80>
 c00c280:	1000081e 	bne	r2,zero,c00c2a4 <__gedf2+0x5c>
 c00c284:	2296b03a 	or	r11,r4,r10
 c00c288:	5813003a 	cmpeq	r9,r11,zero
 c00c28c:	1800091e 	bne	r3,zero,c00c2b4 <__gedf2+0x6c>
 c00c290:	3218b03a 	or	r12,r6,r8
 c00c294:	6000071e 	bne	r12,zero,c00c2b4 <__gedf2+0x6c>
 c00c298:	0005883a 	mov	r2,zero
 c00c29c:	5800101e 	bne	r11,zero,c00c2e0 <__gedf2+0x98>
 c00c2a0:	f800283a 	ret
 c00c2a4:	18000c1e 	bne	r3,zero,c00c2d8 <__gedf2+0x90>
 c00c2a8:	3212b03a 	or	r9,r6,r8
 c00c2ac:	48000c26 	beq	r9,zero,c00c2e0 <__gedf2+0x98>
 c00c2b0:	0013883a 	mov	r9,zero
 c00c2b4:	39c03fcc 	andi	r7,r7,255
 c00c2b8:	48000826 	beq	r9,zero,c00c2dc <__gedf2+0x94>
 c00c2bc:	38000926 	beq	r7,zero,c00c2e4 <__gedf2+0x9c>
 c00c2c0:	00800044 	movi	r2,1
 c00c2c4:	f800283a 	ret
 c00c2c8:	3212b03a 	or	r9,r6,r8
 c00c2cc:	483fec26 	beq	r9,zero,c00c280 <__alt_data_end+0xfc00c280>
 c00c2d0:	00bfff84 	movi	r2,-2
 c00c2d4:	f800283a 	ret
 c00c2d8:	39c03fcc 	andi	r7,r7,255
 c00c2dc:	29c00626 	beq	r5,r7,c00c2f8 <__gedf2+0xb0>
 c00c2e0:	283ff726 	beq	r5,zero,c00c2c0 <__alt_data_end+0xfc00c2c0>
 c00c2e4:	00bfffc4 	movi	r2,-1
 c00c2e8:	f800283a 	ret
 c00c2ec:	2292b03a 	or	r9,r4,r10
 c00c2f0:	483fe126 	beq	r9,zero,c00c278 <__alt_data_end+0xfc00c278>
 c00c2f4:	003ff606 	br	c00c2d0 <__alt_data_end+0xfc00c2d0>
 c00c2f8:	18bff916 	blt	r3,r2,c00c2e0 <__alt_data_end+0xfc00c2e0>
 c00c2fc:	10c00316 	blt	r2,r3,c00c30c <__gedf2+0xc4>
 c00c300:	42bff736 	bltu	r8,r10,c00c2e0 <__alt_data_end+0xfc00c2e0>
 c00c304:	52000326 	beq	r10,r8,c00c314 <__gedf2+0xcc>
 c00c308:	5200042e 	bgeu	r10,r8,c00c31c <__gedf2+0xd4>
 c00c30c:	283fec1e 	bne	r5,zero,c00c2c0 <__alt_data_end+0xfc00c2c0>
 c00c310:	003ff406 	br	c00c2e4 <__alt_data_end+0xfc00c2e4>
 c00c314:	313ff236 	bltu	r6,r4,c00c2e0 <__alt_data_end+0xfc00c2e0>
 c00c318:	21bffc36 	bltu	r4,r6,c00c30c <__alt_data_end+0xfc00c30c>
 c00c31c:	0005883a 	mov	r2,zero
 c00c320:	f800283a 	ret

0c00c324 <__ledf2>:
 c00c324:	2804d53a 	srli	r2,r5,20
 c00c328:	3810d53a 	srli	r8,r7,20
 c00c32c:	00c00434 	movhi	r3,16
 c00c330:	18ffffc4 	addi	r3,r3,-1
 c00c334:	1081ffcc 	andi	r2,r2,2047
 c00c338:	0241ffc4 	movi	r9,2047
 c00c33c:	28d4703a 	and	r10,r5,r3
 c00c340:	4201ffcc 	andi	r8,r8,2047
 c00c344:	38c6703a 	and	r3,r7,r3
 c00c348:	280ad7fa 	srli	r5,r5,31
 c00c34c:	380ed7fa 	srli	r7,r7,31
 c00c350:	12401f26 	beq	r2,r9,c00c3d0 <__ledf2+0xac>
 c00c354:	0241ffc4 	movi	r9,2047
 c00c358:	42401426 	beq	r8,r9,c00c3ac <__ledf2+0x88>
 c00c35c:	1000091e 	bne	r2,zero,c00c384 <__ledf2+0x60>
 c00c360:	2296b03a 	or	r11,r4,r10
 c00c364:	5813003a 	cmpeq	r9,r11,zero
 c00c368:	29403fcc 	andi	r5,r5,255
 c00c36c:	40000a1e 	bne	r8,zero,c00c398 <__ledf2+0x74>
 c00c370:	30d8b03a 	or	r12,r6,r3
 c00c374:	6000081e 	bne	r12,zero,c00c398 <__ledf2+0x74>
 c00c378:	0005883a 	mov	r2,zero
 c00c37c:	5800111e 	bne	r11,zero,c00c3c4 <__ledf2+0xa0>
 c00c380:	f800283a 	ret
 c00c384:	29403fcc 	andi	r5,r5,255
 c00c388:	40000c1e 	bne	r8,zero,c00c3bc <__ledf2+0x98>
 c00c38c:	30d2b03a 	or	r9,r6,r3
 c00c390:	48000c26 	beq	r9,zero,c00c3c4 <__ledf2+0xa0>
 c00c394:	0013883a 	mov	r9,zero
 c00c398:	39c03fcc 	andi	r7,r7,255
 c00c39c:	48000826 	beq	r9,zero,c00c3c0 <__ledf2+0x9c>
 c00c3a0:	38001126 	beq	r7,zero,c00c3e8 <__ledf2+0xc4>
 c00c3a4:	00800044 	movi	r2,1
 c00c3a8:	f800283a 	ret
 c00c3ac:	30d2b03a 	or	r9,r6,r3
 c00c3b0:	483fea26 	beq	r9,zero,c00c35c <__alt_data_end+0xfc00c35c>
 c00c3b4:	00800084 	movi	r2,2
 c00c3b8:	f800283a 	ret
 c00c3bc:	39c03fcc 	andi	r7,r7,255
 c00c3c0:	39400726 	beq	r7,r5,c00c3e0 <__ledf2+0xbc>
 c00c3c4:	2800081e 	bne	r5,zero,c00c3e8 <__ledf2+0xc4>
 c00c3c8:	00800044 	movi	r2,1
 c00c3cc:	f800283a 	ret
 c00c3d0:	2292b03a 	or	r9,r4,r10
 c00c3d4:	483fdf26 	beq	r9,zero,c00c354 <__alt_data_end+0xfc00c354>
 c00c3d8:	00800084 	movi	r2,2
 c00c3dc:	f800283a 	ret
 c00c3e0:	4080030e 	bge	r8,r2,c00c3f0 <__ledf2+0xcc>
 c00c3e4:	383fef26 	beq	r7,zero,c00c3a4 <__alt_data_end+0xfc00c3a4>
 c00c3e8:	00bfffc4 	movi	r2,-1
 c00c3ec:	f800283a 	ret
 c00c3f0:	123feb16 	blt	r2,r8,c00c3a0 <__alt_data_end+0xfc00c3a0>
 c00c3f4:	1abff336 	bltu	r3,r10,c00c3c4 <__alt_data_end+0xfc00c3c4>
 c00c3f8:	50c00326 	beq	r10,r3,c00c408 <__ledf2+0xe4>
 c00c3fc:	50c0042e 	bgeu	r10,r3,c00c410 <__ledf2+0xec>
 c00c400:	283fe81e 	bne	r5,zero,c00c3a4 <__alt_data_end+0xfc00c3a4>
 c00c404:	003ff806 	br	c00c3e8 <__alt_data_end+0xfc00c3e8>
 c00c408:	313fee36 	bltu	r6,r4,c00c3c4 <__alt_data_end+0xfc00c3c4>
 c00c40c:	21bffc36 	bltu	r4,r6,c00c400 <__alt_data_end+0xfc00c400>
 c00c410:	0005883a 	mov	r2,zero
 c00c414:	f800283a 	ret

0c00c418 <__muldf3>:
 c00c418:	deffee04 	addi	sp,sp,-72
 c00c41c:	dd000c15 	stw	r20,48(sp)
 c00c420:	2828d53a 	srli	r20,r5,20
 c00c424:	ddc00f15 	stw	r23,60(sp)
 c00c428:	282ed7fa 	srli	r23,r5,31
 c00c42c:	dc000815 	stw	r16,32(sp)
 c00c430:	04000434 	movhi	r16,16
 c00c434:	dcc00b15 	stw	r19,44(sp)
 c00c438:	843fffc4 	addi	r16,r16,-1
 c00c43c:	dfc01115 	stw	ra,68(sp)
 c00c440:	df001015 	stw	fp,64(sp)
 c00c444:	dd800e15 	stw	r22,56(sp)
 c00c448:	dd400d15 	stw	r21,52(sp)
 c00c44c:	dc800a15 	stw	r18,40(sp)
 c00c450:	dc400915 	stw	r17,36(sp)
 c00c454:	a501ffcc 	andi	r20,r20,2047
 c00c458:	2c20703a 	and	r16,r5,r16
 c00c45c:	b827883a 	mov	r19,r23
 c00c460:	ba403fcc 	andi	r9,r23,255
 c00c464:	a0006026 	beq	r20,zero,c00c5e8 <__muldf3+0x1d0>
 c00c468:	0081ffc4 	movi	r2,2047
 c00c46c:	202d883a 	mov	r22,r4
 c00c470:	a0803626 	beq	r20,r2,c00c54c <__muldf3+0x134>
 c00c474:	84000434 	orhi	r16,r16,16
 c00c478:	200ad77a 	srli	r5,r4,29
 c00c47c:	800490fa 	slli	r2,r16,3
 c00c480:	202c90fa 	slli	r22,r4,3
 c00c484:	a53f0044 	addi	r20,r20,-1023
 c00c488:	28a0b03a 	or	r16,r5,r2
 c00c48c:	002b883a 	mov	r21,zero
 c00c490:	000b883a 	mov	r5,zero
 c00c494:	3804d53a 	srli	r2,r7,20
 c00c498:	3838d7fa 	srli	fp,r7,31
 c00c49c:	04400434 	movhi	r17,16
 c00c4a0:	8c7fffc4 	addi	r17,r17,-1
 c00c4a4:	1081ffcc 	andi	r2,r2,2047
 c00c4a8:	3025883a 	mov	r18,r6
 c00c4ac:	3c62703a 	and	r17,r7,r17
 c00c4b0:	e2803fcc 	andi	r10,fp,255
 c00c4b4:	10006d26 	beq	r2,zero,c00c66c <__muldf3+0x254>
 c00c4b8:	00c1ffc4 	movi	r3,2047
 c00c4bc:	10c06526 	beq	r2,r3,c00c654 <__muldf3+0x23c>
 c00c4c0:	8c400434 	orhi	r17,r17,16
 c00c4c4:	300ed77a 	srli	r7,r6,29
 c00c4c8:	880690fa 	slli	r3,r17,3
 c00c4cc:	302490fa 	slli	r18,r6,3
 c00c4d0:	10bf0044 	addi	r2,r2,-1023
 c00c4d4:	38e2b03a 	or	r17,r7,r3
 c00c4d8:	000f883a 	mov	r7,zero
 c00c4dc:	a087883a 	add	r3,r20,r2
 c00c4e0:	010003c4 	movi	r4,15
 c00c4e4:	3d44b03a 	or	r2,r7,r21
 c00c4e8:	e5ccf03a 	xor	r6,fp,r23
 c00c4ec:	1a000044 	addi	r8,r3,1
 c00c4f0:	20809b36 	bltu	r4,r2,c00c760 <__muldf3+0x348>
 c00c4f4:	100490ba 	slli	r2,r2,2
 c00c4f8:	01030074 	movhi	r4,3073
 c00c4fc:	21314304 	addi	r4,r4,-15092
 c00c500:	1105883a 	add	r2,r2,r4
 c00c504:	10800017 	ldw	r2,0(r2)
 c00c508:	1000683a 	jmp	r2
 c00c50c:	0c00c760 	cmpeqi	r16,at,797
 c00c510:	0c00c56c 	andhi	r16,at,789
 c00c514:	0c00c56c 	andhi	r16,at,789
 c00c518:	0c00c568 	cmpgeui	r16,at,789
 c00c51c:	0c00c73c 	xorhi	r16,at,796
 c00c520:	0c00c73c 	xorhi	r16,at,796
 c00c524:	0c00c724 	muli	r16,at,796
 c00c528:	0c00c568 	cmpgeui	r16,at,789
 c00c52c:	0c00c73c 	xorhi	r16,at,796
 c00c530:	0c00c724 	muli	r16,at,796
 c00c534:	0c00c73c 	xorhi	r16,at,796
 c00c538:	0c00c568 	cmpgeui	r16,at,789
 c00c53c:	0c00c74c 	andi	r16,at,797
 c00c540:	0c00c74c 	andi	r16,at,797
 c00c544:	0c00c74c 	andi	r16,at,797
 c00c548:	0c00caac 	andhi	r16,at,810
 c00c54c:	2404b03a 	or	r2,r4,r16
 c00c550:	1000711e 	bne	r2,zero,c00c718 <__muldf3+0x300>
 c00c554:	05400204 	movi	r21,8
 c00c558:	0021883a 	mov	r16,zero
 c00c55c:	002d883a 	mov	r22,zero
 c00c560:	01400084 	movi	r5,2
 c00c564:	003fcb06 	br	c00c494 <__alt_data_end+0xfc00c494>
 c00c568:	500d883a 	mov	r6,r10
 c00c56c:	00800084 	movi	r2,2
 c00c570:	38805926 	beq	r7,r2,c00c6d8 <__muldf3+0x2c0>
 c00c574:	008000c4 	movi	r2,3
 c00c578:	3881bb26 	beq	r7,r2,c00cc68 <__muldf3+0x850>
 c00c57c:	00800044 	movi	r2,1
 c00c580:	3881961e 	bne	r7,r2,c00cbdc <__muldf3+0x7c4>
 c00c584:	3027883a 	mov	r19,r6
 c00c588:	0005883a 	mov	r2,zero
 c00c58c:	0021883a 	mov	r16,zero
 c00c590:	002d883a 	mov	r22,zero
 c00c594:	1004953a 	slli	r2,r2,20
 c00c598:	98c03fcc 	andi	r3,r19,255
 c00c59c:	04400434 	movhi	r17,16
 c00c5a0:	8c7fffc4 	addi	r17,r17,-1
 c00c5a4:	180697fa 	slli	r3,r3,31
 c00c5a8:	8460703a 	and	r16,r16,r17
 c00c5ac:	80a0b03a 	or	r16,r16,r2
 c00c5b0:	80c6b03a 	or	r3,r16,r3
 c00c5b4:	b005883a 	mov	r2,r22
 c00c5b8:	dfc01117 	ldw	ra,68(sp)
 c00c5bc:	df001017 	ldw	fp,64(sp)
 c00c5c0:	ddc00f17 	ldw	r23,60(sp)
 c00c5c4:	dd800e17 	ldw	r22,56(sp)
 c00c5c8:	dd400d17 	ldw	r21,52(sp)
 c00c5cc:	dd000c17 	ldw	r20,48(sp)
 c00c5d0:	dcc00b17 	ldw	r19,44(sp)
 c00c5d4:	dc800a17 	ldw	r18,40(sp)
 c00c5d8:	dc400917 	ldw	r17,36(sp)
 c00c5dc:	dc000817 	ldw	r16,32(sp)
 c00c5e0:	dec01204 	addi	sp,sp,72
 c00c5e4:	f800283a 	ret
 c00c5e8:	2404b03a 	or	r2,r4,r16
 c00c5ec:	202b883a 	mov	r21,r4
 c00c5f0:	10004426 	beq	r2,zero,c00c704 <__muldf3+0x2ec>
 c00c5f4:	80015126 	beq	r16,zero,c00cb3c <__muldf3+0x724>
 c00c5f8:	8009883a 	mov	r4,r16
 c00c5fc:	d9800715 	stw	r6,28(sp)
 c00c600:	d9c00215 	stw	r7,8(sp)
 c00c604:	da400415 	stw	r9,16(sp)
 c00c608:	c00d7840 	call	c00d784 <__clzsi2>
 c00c60c:	d9800717 	ldw	r6,28(sp)
 c00c610:	d9c00217 	ldw	r7,8(sp)
 c00c614:	da400417 	ldw	r9,16(sp)
 c00c618:	113ffd44 	addi	r4,r2,-11
 c00c61c:	00c00704 	movi	r3,28
 c00c620:	19014216 	blt	r3,r4,c00cb2c <__muldf3+0x714>
 c00c624:	00c00744 	movi	r3,29
 c00c628:	15bffe04 	addi	r22,r2,-8
 c00c62c:	1907c83a 	sub	r3,r3,r4
 c00c630:	85a0983a 	sll	r16,r16,r22
 c00c634:	a8c6d83a 	srl	r3,r21,r3
 c00c638:	adac983a 	sll	r22,r21,r22
 c00c63c:	1c20b03a 	or	r16,r3,r16
 c00c640:	1080fcc4 	addi	r2,r2,1011
 c00c644:	00a9c83a 	sub	r20,zero,r2
 c00c648:	002b883a 	mov	r21,zero
 c00c64c:	000b883a 	mov	r5,zero
 c00c650:	003f9006 	br	c00c494 <__alt_data_end+0xfc00c494>
 c00c654:	3446b03a 	or	r3,r6,r17
 c00c658:	1800281e 	bne	r3,zero,c00c6fc <__muldf3+0x2e4>
 c00c65c:	0023883a 	mov	r17,zero
 c00c660:	0025883a 	mov	r18,zero
 c00c664:	01c00084 	movi	r7,2
 c00c668:	003f9c06 	br	c00c4dc <__alt_data_end+0xfc00c4dc>
 c00c66c:	3446b03a 	or	r3,r6,r17
 c00c670:	18001e26 	beq	r3,zero,c00c6ec <__muldf3+0x2d4>
 c00c674:	88012126 	beq	r17,zero,c00cafc <__muldf3+0x6e4>
 c00c678:	8809883a 	mov	r4,r17
 c00c67c:	d9400215 	stw	r5,8(sp)
 c00c680:	d9800715 	stw	r6,28(sp)
 c00c684:	da400415 	stw	r9,16(sp)
 c00c688:	da800315 	stw	r10,12(sp)
 c00c68c:	c00d7840 	call	c00d784 <__clzsi2>
 c00c690:	d9400217 	ldw	r5,8(sp)
 c00c694:	d9800717 	ldw	r6,28(sp)
 c00c698:	da400417 	ldw	r9,16(sp)
 c00c69c:	da800317 	ldw	r10,12(sp)
 c00c6a0:	113ffd44 	addi	r4,r2,-11
 c00c6a4:	00c00704 	movi	r3,28
 c00c6a8:	19011016 	blt	r3,r4,c00caec <__muldf3+0x6d4>
 c00c6ac:	00c00744 	movi	r3,29
 c00c6b0:	14bffe04 	addi	r18,r2,-8
 c00c6b4:	1907c83a 	sub	r3,r3,r4
 c00c6b8:	8ca2983a 	sll	r17,r17,r18
 c00c6bc:	30c6d83a 	srl	r3,r6,r3
 c00c6c0:	34a4983a 	sll	r18,r6,r18
 c00c6c4:	1c62b03a 	or	r17,r3,r17
 c00c6c8:	1080fcc4 	addi	r2,r2,1011
 c00c6cc:	0085c83a 	sub	r2,zero,r2
 c00c6d0:	000f883a 	mov	r7,zero
 c00c6d4:	003f8106 	br	c00c4dc <__alt_data_end+0xfc00c4dc>
 c00c6d8:	3027883a 	mov	r19,r6
 c00c6dc:	0081ffc4 	movi	r2,2047
 c00c6e0:	0021883a 	mov	r16,zero
 c00c6e4:	002d883a 	mov	r22,zero
 c00c6e8:	003faa06 	br	c00c594 <__alt_data_end+0xfc00c594>
 c00c6ec:	0023883a 	mov	r17,zero
 c00c6f0:	0025883a 	mov	r18,zero
 c00c6f4:	01c00044 	movi	r7,1
 c00c6f8:	003f7806 	br	c00c4dc <__alt_data_end+0xfc00c4dc>
 c00c6fc:	01c000c4 	movi	r7,3
 c00c700:	003f7606 	br	c00c4dc <__alt_data_end+0xfc00c4dc>
 c00c704:	05400104 	movi	r21,4
 c00c708:	0021883a 	mov	r16,zero
 c00c70c:	002d883a 	mov	r22,zero
 c00c710:	01400044 	movi	r5,1
 c00c714:	003f5f06 	br	c00c494 <__alt_data_end+0xfc00c494>
 c00c718:	05400304 	movi	r21,12
 c00c71c:	014000c4 	movi	r5,3
 c00c720:	003f5c06 	br	c00c494 <__alt_data_end+0xfc00c494>
 c00c724:	04000434 	movhi	r16,16
 c00c728:	0027883a 	mov	r19,zero
 c00c72c:	843fffc4 	addi	r16,r16,-1
 c00c730:	05bfffc4 	movi	r22,-1
 c00c734:	0081ffc4 	movi	r2,2047
 c00c738:	003f9606 	br	c00c594 <__alt_data_end+0xfc00c594>
 c00c73c:	8023883a 	mov	r17,r16
 c00c740:	b025883a 	mov	r18,r22
 c00c744:	280f883a 	mov	r7,r5
 c00c748:	003f8806 	br	c00c56c <__alt_data_end+0xfc00c56c>
 c00c74c:	8023883a 	mov	r17,r16
 c00c750:	b025883a 	mov	r18,r22
 c00c754:	480d883a 	mov	r6,r9
 c00c758:	280f883a 	mov	r7,r5
 c00c75c:	003f8306 	br	c00c56c <__alt_data_end+0xfc00c56c>
 c00c760:	b026d43a 	srli	r19,r22,16
 c00c764:	902ed43a 	srli	r23,r18,16
 c00c768:	b5bfffcc 	andi	r22,r22,65535
 c00c76c:	94bfffcc 	andi	r18,r18,65535
 c00c770:	b00b883a 	mov	r5,r22
 c00c774:	9009883a 	mov	r4,r18
 c00c778:	d8c00515 	stw	r3,20(sp)
 c00c77c:	d9800715 	stw	r6,28(sp)
 c00c780:	da000615 	stw	r8,24(sp)
 c00c784:	c00097c0 	call	c00097c <__mulsi3>
 c00c788:	980b883a 	mov	r5,r19
 c00c78c:	9009883a 	mov	r4,r18
 c00c790:	1029883a 	mov	r20,r2
 c00c794:	c00097c0 	call	c00097c <__mulsi3>
 c00c798:	b80b883a 	mov	r5,r23
 c00c79c:	9809883a 	mov	r4,r19
 c00c7a0:	102b883a 	mov	r21,r2
 c00c7a4:	c00097c0 	call	c00097c <__mulsi3>
 c00c7a8:	b809883a 	mov	r4,r23
 c00c7ac:	b00b883a 	mov	r5,r22
 c00c7b0:	1039883a 	mov	fp,r2
 c00c7b4:	c00097c0 	call	c00097c <__mulsi3>
 c00c7b8:	a008d43a 	srli	r4,r20,16
 c00c7bc:	1545883a 	add	r2,r2,r21
 c00c7c0:	d8c00517 	ldw	r3,20(sp)
 c00c7c4:	2085883a 	add	r2,r4,r2
 c00c7c8:	d9800717 	ldw	r6,28(sp)
 c00c7cc:	da000617 	ldw	r8,24(sp)
 c00c7d0:	1540022e 	bgeu	r2,r21,c00c7dc <__muldf3+0x3c4>
 c00c7d4:	01000074 	movhi	r4,1
 c00c7d8:	e139883a 	add	fp,fp,r4
 c00c7dc:	100e943a 	slli	r7,r2,16
 c00c7e0:	1004d43a 	srli	r2,r2,16
 c00c7e4:	882ad43a 	srli	r21,r17,16
 c00c7e8:	a53fffcc 	andi	r20,r20,65535
 c00c7ec:	8c7fffcc 	andi	r17,r17,65535
 c00c7f0:	3d29883a 	add	r20,r7,r20
 c00c7f4:	b00b883a 	mov	r5,r22
 c00c7f8:	8809883a 	mov	r4,r17
 c00c7fc:	d8c00515 	stw	r3,20(sp)
 c00c800:	d9800715 	stw	r6,28(sp)
 c00c804:	da000615 	stw	r8,24(sp)
 c00c808:	dd000115 	stw	r20,4(sp)
 c00c80c:	d8800015 	stw	r2,0(sp)
 c00c810:	c00097c0 	call	c00097c <__mulsi3>
 c00c814:	980b883a 	mov	r5,r19
 c00c818:	8809883a 	mov	r4,r17
 c00c81c:	d8800215 	stw	r2,8(sp)
 c00c820:	c00097c0 	call	c00097c <__mulsi3>
 c00c824:	9809883a 	mov	r4,r19
 c00c828:	a80b883a 	mov	r5,r21
 c00c82c:	1029883a 	mov	r20,r2
 c00c830:	c00097c0 	call	c00097c <__mulsi3>
 c00c834:	b00b883a 	mov	r5,r22
 c00c838:	a809883a 	mov	r4,r21
 c00c83c:	d8800415 	stw	r2,16(sp)
 c00c840:	c00097c0 	call	c00097c <__mulsi3>
 c00c844:	d9c00217 	ldw	r7,8(sp)
 c00c848:	1505883a 	add	r2,r2,r20
 c00c84c:	d8c00517 	ldw	r3,20(sp)
 c00c850:	3826d43a 	srli	r19,r7,16
 c00c854:	d9800717 	ldw	r6,28(sp)
 c00c858:	da000617 	ldw	r8,24(sp)
 c00c85c:	9885883a 	add	r2,r19,r2
 c00c860:	da400417 	ldw	r9,16(sp)
 c00c864:	1500022e 	bgeu	r2,r20,c00c870 <__muldf3+0x458>
 c00c868:	01000074 	movhi	r4,1
 c00c86c:	4913883a 	add	r9,r9,r4
 c00c870:	1028d43a 	srli	r20,r2,16
 c00c874:	1004943a 	slli	r2,r2,16
 c00c878:	802cd43a 	srli	r22,r16,16
 c00c87c:	843fffcc 	andi	r16,r16,65535
 c00c880:	3cffffcc 	andi	r19,r7,65535
 c00c884:	9009883a 	mov	r4,r18
 c00c888:	800b883a 	mov	r5,r16
 c00c88c:	a269883a 	add	r20,r20,r9
 c00c890:	d8c00515 	stw	r3,20(sp)
 c00c894:	d9800715 	stw	r6,28(sp)
 c00c898:	da000615 	stw	r8,24(sp)
 c00c89c:	14e7883a 	add	r19,r2,r19
 c00c8a0:	c00097c0 	call	c00097c <__mulsi3>
 c00c8a4:	9009883a 	mov	r4,r18
 c00c8a8:	b00b883a 	mov	r5,r22
 c00c8ac:	d8800315 	stw	r2,12(sp)
 c00c8b0:	c00097c0 	call	c00097c <__mulsi3>
 c00c8b4:	b809883a 	mov	r4,r23
 c00c8b8:	b00b883a 	mov	r5,r22
 c00c8bc:	d8800215 	stw	r2,8(sp)
 c00c8c0:	c00097c0 	call	c00097c <__mulsi3>
 c00c8c4:	b80b883a 	mov	r5,r23
 c00c8c8:	8009883a 	mov	r4,r16
 c00c8cc:	d8800415 	stw	r2,16(sp)
 c00c8d0:	c00097c0 	call	c00097c <__mulsi3>
 c00c8d4:	da800317 	ldw	r10,12(sp)
 c00c8d8:	d9c00217 	ldw	r7,8(sp)
 c00c8dc:	d9000017 	ldw	r4,0(sp)
 c00c8e0:	502ed43a 	srli	r23,r10,16
 c00c8e4:	11c5883a 	add	r2,r2,r7
 c00c8e8:	24e5883a 	add	r18,r4,r19
 c00c8ec:	b885883a 	add	r2,r23,r2
 c00c8f0:	d8c00517 	ldw	r3,20(sp)
 c00c8f4:	d9800717 	ldw	r6,28(sp)
 c00c8f8:	da000617 	ldw	r8,24(sp)
 c00c8fc:	da400417 	ldw	r9,16(sp)
 c00c900:	11c0022e 	bgeu	r2,r7,c00c90c <__muldf3+0x4f4>
 c00c904:	01000074 	movhi	r4,1
 c00c908:	4913883a 	add	r9,r9,r4
 c00c90c:	100ed43a 	srli	r7,r2,16
 c00c910:	1004943a 	slli	r2,r2,16
 c00c914:	55ffffcc 	andi	r23,r10,65535
 c00c918:	3a53883a 	add	r9,r7,r9
 c00c91c:	8809883a 	mov	r4,r17
 c00c920:	800b883a 	mov	r5,r16
 c00c924:	d8c00515 	stw	r3,20(sp)
 c00c928:	d9800715 	stw	r6,28(sp)
 c00c92c:	da000615 	stw	r8,24(sp)
 c00c930:	da400415 	stw	r9,16(sp)
 c00c934:	15ef883a 	add	r23,r2,r23
 c00c938:	c00097c0 	call	c00097c <__mulsi3>
 c00c93c:	8809883a 	mov	r4,r17
 c00c940:	b00b883a 	mov	r5,r22
 c00c944:	d8800215 	stw	r2,8(sp)
 c00c948:	c00097c0 	call	c00097c <__mulsi3>
 c00c94c:	b00b883a 	mov	r5,r22
 c00c950:	a809883a 	mov	r4,r21
 c00c954:	d8800315 	stw	r2,12(sp)
 c00c958:	c00097c0 	call	c00097c <__mulsi3>
 c00c95c:	8009883a 	mov	r4,r16
 c00c960:	a80b883a 	mov	r5,r21
 c00c964:	1023883a 	mov	r17,r2
 c00c968:	c00097c0 	call	c00097c <__mulsi3>
 c00c96c:	d9c00217 	ldw	r7,8(sp)
 c00c970:	da800317 	ldw	r10,12(sp)
 c00c974:	d8c00517 	ldw	r3,20(sp)
 c00c978:	3808d43a 	srli	r4,r7,16
 c00c97c:	1285883a 	add	r2,r2,r10
 c00c980:	d9800717 	ldw	r6,28(sp)
 c00c984:	2085883a 	add	r2,r4,r2
 c00c988:	da000617 	ldw	r8,24(sp)
 c00c98c:	da400417 	ldw	r9,16(sp)
 c00c990:	1280022e 	bgeu	r2,r10,c00c99c <__muldf3+0x584>
 c00c994:	01000074 	movhi	r4,1
 c00c998:	8923883a 	add	r17,r17,r4
 c00c99c:	1008943a 	slli	r4,r2,16
 c00c9a0:	39ffffcc 	andi	r7,r7,65535
 c00c9a4:	e4b9883a 	add	fp,fp,r18
 c00c9a8:	21cf883a 	add	r7,r4,r7
 c00c9ac:	e4e7803a 	cmpltu	r19,fp,r19
 c00c9b0:	3d0f883a 	add	r7,r7,r20
 c00c9b4:	bf39883a 	add	fp,r23,fp
 c00c9b8:	99c9883a 	add	r4,r19,r7
 c00c9bc:	e5ef803a 	cmpltu	r23,fp,r23
 c00c9c0:	490b883a 	add	r5,r9,r4
 c00c9c4:	1004d43a 	srli	r2,r2,16
 c00c9c8:	b965883a 	add	r18,r23,r5
 c00c9cc:	24c9803a 	cmpltu	r4,r4,r19
 c00c9d0:	3d29803a 	cmpltu	r20,r7,r20
 c00c9d4:	a128b03a 	or	r20,r20,r4
 c00c9d8:	95ef803a 	cmpltu	r23,r18,r23
 c00c9dc:	2a53803a 	cmpltu	r9,r5,r9
 c00c9e0:	a0a9883a 	add	r20,r20,r2
 c00c9e4:	4deeb03a 	or	r23,r9,r23
 c00c9e8:	a5ef883a 	add	r23,r20,r23
 c00c9ec:	bc63883a 	add	r17,r23,r17
 c00c9f0:	e004927a 	slli	r2,fp,9
 c00c9f4:	d9000117 	ldw	r4,4(sp)
 c00c9f8:	882e927a 	slli	r23,r17,9
 c00c9fc:	9022d5fa 	srli	r17,r18,23
 c00ca00:	e038d5fa 	srli	fp,fp,23
 c00ca04:	1104b03a 	or	r2,r2,r4
 c00ca08:	9024927a 	slli	r18,r18,9
 c00ca0c:	1004c03a 	cmpne	r2,r2,zero
 c00ca10:	bc62b03a 	or	r17,r23,r17
 c00ca14:	1738b03a 	or	fp,r2,fp
 c00ca18:	8880402c 	andhi	r2,r17,256
 c00ca1c:	e4a4b03a 	or	r18,fp,r18
 c00ca20:	10000726 	beq	r2,zero,c00ca40 <__muldf3+0x628>
 c00ca24:	9006d07a 	srli	r3,r18,1
 c00ca28:	880497fa 	slli	r2,r17,31
 c00ca2c:	9480004c 	andi	r18,r18,1
 c00ca30:	8822d07a 	srli	r17,r17,1
 c00ca34:	1ca4b03a 	or	r18,r3,r18
 c00ca38:	14a4b03a 	or	r18,r2,r18
 c00ca3c:	4007883a 	mov	r3,r8
 c00ca40:	1880ffc4 	addi	r2,r3,1023
 c00ca44:	0080460e 	bge	zero,r2,c00cb60 <__muldf3+0x748>
 c00ca48:	910001cc 	andi	r4,r18,7
 c00ca4c:	20000726 	beq	r4,zero,c00ca6c <__muldf3+0x654>
 c00ca50:	910003cc 	andi	r4,r18,15
 c00ca54:	01400104 	movi	r5,4
 c00ca58:	21400426 	beq	r4,r5,c00ca6c <__muldf3+0x654>
 c00ca5c:	9149883a 	add	r4,r18,r5
 c00ca60:	24a5803a 	cmpltu	r18,r4,r18
 c00ca64:	8ca3883a 	add	r17,r17,r18
 c00ca68:	2025883a 	mov	r18,r4
 c00ca6c:	8900402c 	andhi	r4,r17,256
 c00ca70:	20000426 	beq	r4,zero,c00ca84 <__muldf3+0x66c>
 c00ca74:	18810004 	addi	r2,r3,1024
 c00ca78:	00ffc034 	movhi	r3,65280
 c00ca7c:	18ffffc4 	addi	r3,r3,-1
 c00ca80:	88e2703a 	and	r17,r17,r3
 c00ca84:	00c1ff84 	movi	r3,2046
 c00ca88:	18bf1316 	blt	r3,r2,c00c6d8 <__alt_data_end+0xfc00c6d8>
 c00ca8c:	882c977a 	slli	r22,r17,29
 c00ca90:	9024d0fa 	srli	r18,r18,3
 c00ca94:	8822927a 	slli	r17,r17,9
 c00ca98:	1081ffcc 	andi	r2,r2,2047
 c00ca9c:	b4acb03a 	or	r22,r22,r18
 c00caa0:	8820d33a 	srli	r16,r17,12
 c00caa4:	3027883a 	mov	r19,r6
 c00caa8:	003eba06 	br	c00c594 <__alt_data_end+0xfc00c594>
 c00caac:	8080022c 	andhi	r2,r16,8
 c00cab0:	10000926 	beq	r2,zero,c00cad8 <__muldf3+0x6c0>
 c00cab4:	8880022c 	andhi	r2,r17,8
 c00cab8:	1000071e 	bne	r2,zero,c00cad8 <__muldf3+0x6c0>
 c00cabc:	00800434 	movhi	r2,16
 c00cac0:	8c000234 	orhi	r16,r17,8
 c00cac4:	10bfffc4 	addi	r2,r2,-1
 c00cac8:	e027883a 	mov	r19,fp
 c00cacc:	80a0703a 	and	r16,r16,r2
 c00cad0:	902d883a 	mov	r22,r18
 c00cad4:	003f1706 	br	c00c734 <__alt_data_end+0xfc00c734>
 c00cad8:	00800434 	movhi	r2,16
 c00cadc:	84000234 	orhi	r16,r16,8
 c00cae0:	10bfffc4 	addi	r2,r2,-1
 c00cae4:	80a0703a 	and	r16,r16,r2
 c00cae8:	003f1206 	br	c00c734 <__alt_data_end+0xfc00c734>
 c00caec:	147ff604 	addi	r17,r2,-40
 c00caf0:	3462983a 	sll	r17,r6,r17
 c00caf4:	0025883a 	mov	r18,zero
 c00caf8:	003ef306 	br	c00c6c8 <__alt_data_end+0xfc00c6c8>
 c00cafc:	3009883a 	mov	r4,r6
 c00cb00:	d9400215 	stw	r5,8(sp)
 c00cb04:	d9800715 	stw	r6,28(sp)
 c00cb08:	da400415 	stw	r9,16(sp)
 c00cb0c:	da800315 	stw	r10,12(sp)
 c00cb10:	c00d7840 	call	c00d784 <__clzsi2>
 c00cb14:	10800804 	addi	r2,r2,32
 c00cb18:	da800317 	ldw	r10,12(sp)
 c00cb1c:	da400417 	ldw	r9,16(sp)
 c00cb20:	d9800717 	ldw	r6,28(sp)
 c00cb24:	d9400217 	ldw	r5,8(sp)
 c00cb28:	003edd06 	br	c00c6a0 <__alt_data_end+0xfc00c6a0>
 c00cb2c:	143ff604 	addi	r16,r2,-40
 c00cb30:	ac20983a 	sll	r16,r21,r16
 c00cb34:	002d883a 	mov	r22,zero
 c00cb38:	003ec106 	br	c00c640 <__alt_data_end+0xfc00c640>
 c00cb3c:	d9800715 	stw	r6,28(sp)
 c00cb40:	d9c00215 	stw	r7,8(sp)
 c00cb44:	da400415 	stw	r9,16(sp)
 c00cb48:	c00d7840 	call	c00d784 <__clzsi2>
 c00cb4c:	10800804 	addi	r2,r2,32
 c00cb50:	da400417 	ldw	r9,16(sp)
 c00cb54:	d9c00217 	ldw	r7,8(sp)
 c00cb58:	d9800717 	ldw	r6,28(sp)
 c00cb5c:	003eae06 	br	c00c618 <__alt_data_end+0xfc00c618>
 c00cb60:	00c00044 	movi	r3,1
 c00cb64:	1887c83a 	sub	r3,r3,r2
 c00cb68:	01000e04 	movi	r4,56
 c00cb6c:	20fe8516 	blt	r4,r3,c00c584 <__alt_data_end+0xfc00c584>
 c00cb70:	010007c4 	movi	r4,31
 c00cb74:	20c01b16 	blt	r4,r3,c00cbe4 <__muldf3+0x7cc>
 c00cb78:	00800804 	movi	r2,32
 c00cb7c:	10c5c83a 	sub	r2,r2,r3
 c00cb80:	888a983a 	sll	r5,r17,r2
 c00cb84:	90c8d83a 	srl	r4,r18,r3
 c00cb88:	9084983a 	sll	r2,r18,r2
 c00cb8c:	88e2d83a 	srl	r17,r17,r3
 c00cb90:	2906b03a 	or	r3,r5,r4
 c00cb94:	1004c03a 	cmpne	r2,r2,zero
 c00cb98:	1886b03a 	or	r3,r3,r2
 c00cb9c:	188001cc 	andi	r2,r3,7
 c00cba0:	10000726 	beq	r2,zero,c00cbc0 <__muldf3+0x7a8>
 c00cba4:	188003cc 	andi	r2,r3,15
 c00cba8:	01000104 	movi	r4,4
 c00cbac:	11000426 	beq	r2,r4,c00cbc0 <__muldf3+0x7a8>
 c00cbb0:	1805883a 	mov	r2,r3
 c00cbb4:	10c00104 	addi	r3,r2,4
 c00cbb8:	1885803a 	cmpltu	r2,r3,r2
 c00cbbc:	88a3883a 	add	r17,r17,r2
 c00cbc0:	8880202c 	andhi	r2,r17,128
 c00cbc4:	10001c26 	beq	r2,zero,c00cc38 <__muldf3+0x820>
 c00cbc8:	3027883a 	mov	r19,r6
 c00cbcc:	00800044 	movi	r2,1
 c00cbd0:	0021883a 	mov	r16,zero
 c00cbd4:	002d883a 	mov	r22,zero
 c00cbd8:	003e6e06 	br	c00c594 <__alt_data_end+0xfc00c594>
 c00cbdc:	4007883a 	mov	r3,r8
 c00cbe0:	003f9706 	br	c00ca40 <__alt_data_end+0xfc00ca40>
 c00cbe4:	017ff844 	movi	r5,-31
 c00cbe8:	2885c83a 	sub	r2,r5,r2
 c00cbec:	888ad83a 	srl	r5,r17,r2
 c00cbf0:	00800804 	movi	r2,32
 c00cbf4:	18801a26 	beq	r3,r2,c00cc60 <__muldf3+0x848>
 c00cbf8:	01001004 	movi	r4,64
 c00cbfc:	20c7c83a 	sub	r3,r4,r3
 c00cc00:	88e2983a 	sll	r17,r17,r3
 c00cc04:	8ca4b03a 	or	r18,r17,r18
 c00cc08:	9004c03a 	cmpne	r2,r18,zero
 c00cc0c:	2884b03a 	or	r2,r5,r2
 c00cc10:	144001cc 	andi	r17,r2,7
 c00cc14:	88000d1e 	bne	r17,zero,c00cc4c <__muldf3+0x834>
 c00cc18:	0021883a 	mov	r16,zero
 c00cc1c:	102cd0fa 	srli	r22,r2,3
 c00cc20:	3027883a 	mov	r19,r6
 c00cc24:	0005883a 	mov	r2,zero
 c00cc28:	b46cb03a 	or	r22,r22,r17
 c00cc2c:	003e5906 	br	c00c594 <__alt_data_end+0xfc00c594>
 c00cc30:	1007883a 	mov	r3,r2
 c00cc34:	0023883a 	mov	r17,zero
 c00cc38:	8820927a 	slli	r16,r17,9
 c00cc3c:	1805883a 	mov	r2,r3
 c00cc40:	8822977a 	slli	r17,r17,29
 c00cc44:	8020d33a 	srli	r16,r16,12
 c00cc48:	003ff406 	br	c00cc1c <__alt_data_end+0xfc00cc1c>
 c00cc4c:	10c003cc 	andi	r3,r2,15
 c00cc50:	01000104 	movi	r4,4
 c00cc54:	193ff626 	beq	r3,r4,c00cc30 <__alt_data_end+0xfc00cc30>
 c00cc58:	0023883a 	mov	r17,zero
 c00cc5c:	003fd506 	br	c00cbb4 <__alt_data_end+0xfc00cbb4>
 c00cc60:	0023883a 	mov	r17,zero
 c00cc64:	003fe706 	br	c00cc04 <__alt_data_end+0xfc00cc04>
 c00cc68:	00800434 	movhi	r2,16
 c00cc6c:	8c000234 	orhi	r16,r17,8
 c00cc70:	10bfffc4 	addi	r2,r2,-1
 c00cc74:	3027883a 	mov	r19,r6
 c00cc78:	80a0703a 	and	r16,r16,r2
 c00cc7c:	902d883a 	mov	r22,r18
 c00cc80:	003eac06 	br	c00c734 <__alt_data_end+0xfc00c734>

0c00cc84 <__subdf3>:
 c00cc84:	02000434 	movhi	r8,16
 c00cc88:	423fffc4 	addi	r8,r8,-1
 c00cc8c:	defffb04 	addi	sp,sp,-20
 c00cc90:	2a14703a 	and	r10,r5,r8
 c00cc94:	3812d53a 	srli	r9,r7,20
 c00cc98:	3a10703a 	and	r8,r7,r8
 c00cc9c:	2006d77a 	srli	r3,r4,29
 c00cca0:	3004d77a 	srli	r2,r6,29
 c00cca4:	dc000015 	stw	r16,0(sp)
 c00cca8:	501490fa 	slli	r10,r10,3
 c00ccac:	2820d53a 	srli	r16,r5,20
 c00ccb0:	401090fa 	slli	r8,r8,3
 c00ccb4:	dc800215 	stw	r18,8(sp)
 c00ccb8:	dc400115 	stw	r17,4(sp)
 c00ccbc:	dfc00415 	stw	ra,16(sp)
 c00ccc0:	202290fa 	slli	r17,r4,3
 c00ccc4:	dcc00315 	stw	r19,12(sp)
 c00ccc8:	4a41ffcc 	andi	r9,r9,2047
 c00cccc:	0101ffc4 	movi	r4,2047
 c00ccd0:	2824d7fa 	srli	r18,r5,31
 c00ccd4:	8401ffcc 	andi	r16,r16,2047
 c00ccd8:	50c6b03a 	or	r3,r10,r3
 c00ccdc:	380ed7fa 	srli	r7,r7,31
 c00cce0:	408ab03a 	or	r5,r8,r2
 c00cce4:	300c90fa 	slli	r6,r6,3
 c00cce8:	49009626 	beq	r9,r4,c00cf44 <__subdf3+0x2c0>
 c00ccec:	39c0005c 	xori	r7,r7,1
 c00ccf0:	8245c83a 	sub	r2,r16,r9
 c00ccf4:	3c807426 	beq	r7,r18,c00cec8 <__subdf3+0x244>
 c00ccf8:	0080af0e 	bge	zero,r2,c00cfb8 <__subdf3+0x334>
 c00ccfc:	48002a1e 	bne	r9,zero,c00cda8 <__subdf3+0x124>
 c00cd00:	2988b03a 	or	r4,r5,r6
 c00cd04:	20009a1e 	bne	r4,zero,c00cf70 <__subdf3+0x2ec>
 c00cd08:	888001cc 	andi	r2,r17,7
 c00cd0c:	10000726 	beq	r2,zero,c00cd2c <__subdf3+0xa8>
 c00cd10:	888003cc 	andi	r2,r17,15
 c00cd14:	01000104 	movi	r4,4
 c00cd18:	11000426 	beq	r2,r4,c00cd2c <__subdf3+0xa8>
 c00cd1c:	890b883a 	add	r5,r17,r4
 c00cd20:	2c63803a 	cmpltu	r17,r5,r17
 c00cd24:	1c47883a 	add	r3,r3,r17
 c00cd28:	2823883a 	mov	r17,r5
 c00cd2c:	1880202c 	andhi	r2,r3,128
 c00cd30:	10005926 	beq	r2,zero,c00ce98 <__subdf3+0x214>
 c00cd34:	84000044 	addi	r16,r16,1
 c00cd38:	0081ffc4 	movi	r2,2047
 c00cd3c:	8080be26 	beq	r16,r2,c00d038 <__subdf3+0x3b4>
 c00cd40:	017fe034 	movhi	r5,65408
 c00cd44:	297fffc4 	addi	r5,r5,-1
 c00cd48:	1946703a 	and	r3,r3,r5
 c00cd4c:	1804977a 	slli	r2,r3,29
 c00cd50:	1806927a 	slli	r3,r3,9
 c00cd54:	8822d0fa 	srli	r17,r17,3
 c00cd58:	8401ffcc 	andi	r16,r16,2047
 c00cd5c:	180ad33a 	srli	r5,r3,12
 c00cd60:	9100004c 	andi	r4,r18,1
 c00cd64:	1444b03a 	or	r2,r2,r17
 c00cd68:	80c1ffcc 	andi	r3,r16,2047
 c00cd6c:	1820953a 	slli	r16,r3,20
 c00cd70:	20c03fcc 	andi	r3,r4,255
 c00cd74:	180897fa 	slli	r4,r3,31
 c00cd78:	00c00434 	movhi	r3,16
 c00cd7c:	18ffffc4 	addi	r3,r3,-1
 c00cd80:	28c6703a 	and	r3,r5,r3
 c00cd84:	1c06b03a 	or	r3,r3,r16
 c00cd88:	1906b03a 	or	r3,r3,r4
 c00cd8c:	dfc00417 	ldw	ra,16(sp)
 c00cd90:	dcc00317 	ldw	r19,12(sp)
 c00cd94:	dc800217 	ldw	r18,8(sp)
 c00cd98:	dc400117 	ldw	r17,4(sp)
 c00cd9c:	dc000017 	ldw	r16,0(sp)
 c00cda0:	dec00504 	addi	sp,sp,20
 c00cda4:	f800283a 	ret
 c00cda8:	0101ffc4 	movi	r4,2047
 c00cdac:	813fd626 	beq	r16,r4,c00cd08 <__alt_data_end+0xfc00cd08>
 c00cdb0:	29402034 	orhi	r5,r5,128
 c00cdb4:	01000e04 	movi	r4,56
 c00cdb8:	2080a316 	blt	r4,r2,c00d048 <__subdf3+0x3c4>
 c00cdbc:	010007c4 	movi	r4,31
 c00cdc0:	2080c616 	blt	r4,r2,c00d0dc <__subdf3+0x458>
 c00cdc4:	01000804 	movi	r4,32
 c00cdc8:	2089c83a 	sub	r4,r4,r2
 c00cdcc:	2910983a 	sll	r8,r5,r4
 c00cdd0:	308ed83a 	srl	r7,r6,r2
 c00cdd4:	3108983a 	sll	r4,r6,r4
 c00cdd8:	2884d83a 	srl	r2,r5,r2
 c00cddc:	41ccb03a 	or	r6,r8,r7
 c00cde0:	2008c03a 	cmpne	r4,r4,zero
 c00cde4:	310cb03a 	or	r6,r6,r4
 c00cde8:	898dc83a 	sub	r6,r17,r6
 c00cdec:	89a3803a 	cmpltu	r17,r17,r6
 c00cdf0:	1887c83a 	sub	r3,r3,r2
 c00cdf4:	1c47c83a 	sub	r3,r3,r17
 c00cdf8:	3023883a 	mov	r17,r6
 c00cdfc:	1880202c 	andhi	r2,r3,128
 c00ce00:	10002326 	beq	r2,zero,c00ce90 <__subdf3+0x20c>
 c00ce04:	04c02034 	movhi	r19,128
 c00ce08:	9cffffc4 	addi	r19,r19,-1
 c00ce0c:	1ce6703a 	and	r19,r3,r19
 c00ce10:	98007a26 	beq	r19,zero,c00cffc <__subdf3+0x378>
 c00ce14:	9809883a 	mov	r4,r19
 c00ce18:	c00d7840 	call	c00d784 <__clzsi2>
 c00ce1c:	113ffe04 	addi	r4,r2,-8
 c00ce20:	00c007c4 	movi	r3,31
 c00ce24:	19007b16 	blt	r3,r4,c00d014 <__subdf3+0x390>
 c00ce28:	00800804 	movi	r2,32
 c00ce2c:	1105c83a 	sub	r2,r2,r4
 c00ce30:	8884d83a 	srl	r2,r17,r2
 c00ce34:	9906983a 	sll	r3,r19,r4
 c00ce38:	8922983a 	sll	r17,r17,r4
 c00ce3c:	10c4b03a 	or	r2,r2,r3
 c00ce40:	24007816 	blt	r4,r16,c00d024 <__subdf3+0x3a0>
 c00ce44:	2421c83a 	sub	r16,r4,r16
 c00ce48:	80c00044 	addi	r3,r16,1
 c00ce4c:	010007c4 	movi	r4,31
 c00ce50:	20c09516 	blt	r4,r3,c00d0a8 <__subdf3+0x424>
 c00ce54:	01400804 	movi	r5,32
 c00ce58:	28cbc83a 	sub	r5,r5,r3
 c00ce5c:	88c8d83a 	srl	r4,r17,r3
 c00ce60:	8962983a 	sll	r17,r17,r5
 c00ce64:	114a983a 	sll	r5,r2,r5
 c00ce68:	10c6d83a 	srl	r3,r2,r3
 c00ce6c:	8804c03a 	cmpne	r2,r17,zero
 c00ce70:	290ab03a 	or	r5,r5,r4
 c00ce74:	28a2b03a 	or	r17,r5,r2
 c00ce78:	0021883a 	mov	r16,zero
 c00ce7c:	003fa206 	br	c00cd08 <__alt_data_end+0xfc00cd08>
 c00ce80:	2090b03a 	or	r8,r4,r2
 c00ce84:	40018e26 	beq	r8,zero,c00d4c0 <__subdf3+0x83c>
 c00ce88:	1007883a 	mov	r3,r2
 c00ce8c:	2023883a 	mov	r17,r4
 c00ce90:	888001cc 	andi	r2,r17,7
 c00ce94:	103f9e1e 	bne	r2,zero,c00cd10 <__alt_data_end+0xfc00cd10>
 c00ce98:	1804977a 	slli	r2,r3,29
 c00ce9c:	8822d0fa 	srli	r17,r17,3
 c00cea0:	1810d0fa 	srli	r8,r3,3
 c00cea4:	9100004c 	andi	r4,r18,1
 c00cea8:	1444b03a 	or	r2,r2,r17
 c00ceac:	00c1ffc4 	movi	r3,2047
 c00ceb0:	80c02826 	beq	r16,r3,c00cf54 <__subdf3+0x2d0>
 c00ceb4:	01400434 	movhi	r5,16
 c00ceb8:	297fffc4 	addi	r5,r5,-1
 c00cebc:	80e0703a 	and	r16,r16,r3
 c00cec0:	414a703a 	and	r5,r8,r5
 c00cec4:	003fa806 	br	c00cd68 <__alt_data_end+0xfc00cd68>
 c00cec8:	0080630e 	bge	zero,r2,c00d058 <__subdf3+0x3d4>
 c00cecc:	48003026 	beq	r9,zero,c00cf90 <__subdf3+0x30c>
 c00ced0:	0101ffc4 	movi	r4,2047
 c00ced4:	813f8c26 	beq	r16,r4,c00cd08 <__alt_data_end+0xfc00cd08>
 c00ced8:	29402034 	orhi	r5,r5,128
 c00cedc:	01000e04 	movi	r4,56
 c00cee0:	2080a90e 	bge	r4,r2,c00d188 <__subdf3+0x504>
 c00cee4:	298cb03a 	or	r6,r5,r6
 c00cee8:	3012c03a 	cmpne	r9,r6,zero
 c00ceec:	0005883a 	mov	r2,zero
 c00cef0:	4c53883a 	add	r9,r9,r17
 c00cef4:	4c63803a 	cmpltu	r17,r9,r17
 c00cef8:	10c7883a 	add	r3,r2,r3
 c00cefc:	88c7883a 	add	r3,r17,r3
 c00cf00:	4823883a 	mov	r17,r9
 c00cf04:	1880202c 	andhi	r2,r3,128
 c00cf08:	1000d026 	beq	r2,zero,c00d24c <__subdf3+0x5c8>
 c00cf0c:	84000044 	addi	r16,r16,1
 c00cf10:	0081ffc4 	movi	r2,2047
 c00cf14:	8080fe26 	beq	r16,r2,c00d310 <__subdf3+0x68c>
 c00cf18:	00bfe034 	movhi	r2,65408
 c00cf1c:	10bfffc4 	addi	r2,r2,-1
 c00cf20:	1886703a 	and	r3,r3,r2
 c00cf24:	880ad07a 	srli	r5,r17,1
 c00cf28:	180497fa 	slli	r2,r3,31
 c00cf2c:	8900004c 	andi	r4,r17,1
 c00cf30:	2922b03a 	or	r17,r5,r4
 c00cf34:	1806d07a 	srli	r3,r3,1
 c00cf38:	1462b03a 	or	r17,r2,r17
 c00cf3c:	3825883a 	mov	r18,r7
 c00cf40:	003f7106 	br	c00cd08 <__alt_data_end+0xfc00cd08>
 c00cf44:	2984b03a 	or	r2,r5,r6
 c00cf48:	103f6826 	beq	r2,zero,c00ccec <__alt_data_end+0xfc00ccec>
 c00cf4c:	39c03fcc 	andi	r7,r7,255
 c00cf50:	003f6706 	br	c00ccf0 <__alt_data_end+0xfc00ccf0>
 c00cf54:	4086b03a 	or	r3,r8,r2
 c00cf58:	18015226 	beq	r3,zero,c00d4a4 <__subdf3+0x820>
 c00cf5c:	00c00434 	movhi	r3,16
 c00cf60:	41400234 	orhi	r5,r8,8
 c00cf64:	18ffffc4 	addi	r3,r3,-1
 c00cf68:	28ca703a 	and	r5,r5,r3
 c00cf6c:	003f7e06 	br	c00cd68 <__alt_data_end+0xfc00cd68>
 c00cf70:	10bfffc4 	addi	r2,r2,-1
 c00cf74:	1000491e 	bne	r2,zero,c00d09c <__subdf3+0x418>
 c00cf78:	898fc83a 	sub	r7,r17,r6
 c00cf7c:	89e3803a 	cmpltu	r17,r17,r7
 c00cf80:	1947c83a 	sub	r3,r3,r5
 c00cf84:	1c47c83a 	sub	r3,r3,r17
 c00cf88:	3823883a 	mov	r17,r7
 c00cf8c:	003f9b06 	br	c00cdfc <__alt_data_end+0xfc00cdfc>
 c00cf90:	2988b03a 	or	r4,r5,r6
 c00cf94:	203f5c26 	beq	r4,zero,c00cd08 <__alt_data_end+0xfc00cd08>
 c00cf98:	10bfffc4 	addi	r2,r2,-1
 c00cf9c:	1000931e 	bne	r2,zero,c00d1ec <__subdf3+0x568>
 c00cfa0:	898d883a 	add	r6,r17,r6
 c00cfa4:	3463803a 	cmpltu	r17,r6,r17
 c00cfa8:	1947883a 	add	r3,r3,r5
 c00cfac:	88c7883a 	add	r3,r17,r3
 c00cfb0:	3023883a 	mov	r17,r6
 c00cfb4:	003fd306 	br	c00cf04 <__alt_data_end+0xfc00cf04>
 c00cfb8:	1000541e 	bne	r2,zero,c00d10c <__subdf3+0x488>
 c00cfbc:	80800044 	addi	r2,r16,1
 c00cfc0:	1081ffcc 	andi	r2,r2,2047
 c00cfc4:	01000044 	movi	r4,1
 c00cfc8:	2080a20e 	bge	r4,r2,c00d254 <__subdf3+0x5d0>
 c00cfcc:	8989c83a 	sub	r4,r17,r6
 c00cfd0:	8905803a 	cmpltu	r2,r17,r4
 c00cfd4:	1967c83a 	sub	r19,r3,r5
 c00cfd8:	98a7c83a 	sub	r19,r19,r2
 c00cfdc:	9880202c 	andhi	r2,r19,128
 c00cfe0:	10006326 	beq	r2,zero,c00d170 <__subdf3+0x4ec>
 c00cfe4:	3463c83a 	sub	r17,r6,r17
 c00cfe8:	28c7c83a 	sub	r3,r5,r3
 c00cfec:	344d803a 	cmpltu	r6,r6,r17
 c00cff0:	19a7c83a 	sub	r19,r3,r6
 c00cff4:	3825883a 	mov	r18,r7
 c00cff8:	983f861e 	bne	r19,zero,c00ce14 <__alt_data_end+0xfc00ce14>
 c00cffc:	8809883a 	mov	r4,r17
 c00d000:	c00d7840 	call	c00d784 <__clzsi2>
 c00d004:	10800804 	addi	r2,r2,32
 c00d008:	113ffe04 	addi	r4,r2,-8
 c00d00c:	00c007c4 	movi	r3,31
 c00d010:	193f850e 	bge	r3,r4,c00ce28 <__alt_data_end+0xfc00ce28>
 c00d014:	10bff604 	addi	r2,r2,-40
 c00d018:	8884983a 	sll	r2,r17,r2
 c00d01c:	0023883a 	mov	r17,zero
 c00d020:	243f880e 	bge	r4,r16,c00ce44 <__alt_data_end+0xfc00ce44>
 c00d024:	00ffe034 	movhi	r3,65408
 c00d028:	18ffffc4 	addi	r3,r3,-1
 c00d02c:	8121c83a 	sub	r16,r16,r4
 c00d030:	10c6703a 	and	r3,r2,r3
 c00d034:	003f3406 	br	c00cd08 <__alt_data_end+0xfc00cd08>
 c00d038:	9100004c 	andi	r4,r18,1
 c00d03c:	000b883a 	mov	r5,zero
 c00d040:	0005883a 	mov	r2,zero
 c00d044:	003f4806 	br	c00cd68 <__alt_data_end+0xfc00cd68>
 c00d048:	298cb03a 	or	r6,r5,r6
 c00d04c:	300cc03a 	cmpne	r6,r6,zero
 c00d050:	0005883a 	mov	r2,zero
 c00d054:	003f6406 	br	c00cde8 <__alt_data_end+0xfc00cde8>
 c00d058:	10009a1e 	bne	r2,zero,c00d2c4 <__subdf3+0x640>
 c00d05c:	82400044 	addi	r9,r16,1
 c00d060:	4881ffcc 	andi	r2,r9,2047
 c00d064:	02800044 	movi	r10,1
 c00d068:	5080670e 	bge	r10,r2,c00d208 <__subdf3+0x584>
 c00d06c:	0081ffc4 	movi	r2,2047
 c00d070:	4880af26 	beq	r9,r2,c00d330 <__subdf3+0x6ac>
 c00d074:	898d883a 	add	r6,r17,r6
 c00d078:	1945883a 	add	r2,r3,r5
 c00d07c:	3447803a 	cmpltu	r3,r6,r17
 c00d080:	1887883a 	add	r3,r3,r2
 c00d084:	182297fa 	slli	r17,r3,31
 c00d088:	300cd07a 	srli	r6,r6,1
 c00d08c:	1806d07a 	srli	r3,r3,1
 c00d090:	4821883a 	mov	r16,r9
 c00d094:	89a2b03a 	or	r17,r17,r6
 c00d098:	003f1b06 	br	c00cd08 <__alt_data_end+0xfc00cd08>
 c00d09c:	0101ffc4 	movi	r4,2047
 c00d0a0:	813f441e 	bne	r16,r4,c00cdb4 <__alt_data_end+0xfc00cdb4>
 c00d0a4:	003f1806 	br	c00cd08 <__alt_data_end+0xfc00cd08>
 c00d0a8:	843ff844 	addi	r16,r16,-31
 c00d0ac:	01400804 	movi	r5,32
 c00d0b0:	1408d83a 	srl	r4,r2,r16
 c00d0b4:	19405026 	beq	r3,r5,c00d1f8 <__subdf3+0x574>
 c00d0b8:	01401004 	movi	r5,64
 c00d0bc:	28c7c83a 	sub	r3,r5,r3
 c00d0c0:	10c4983a 	sll	r2,r2,r3
 c00d0c4:	88a2b03a 	or	r17,r17,r2
 c00d0c8:	8822c03a 	cmpne	r17,r17,zero
 c00d0cc:	2462b03a 	or	r17,r4,r17
 c00d0d0:	0007883a 	mov	r3,zero
 c00d0d4:	0021883a 	mov	r16,zero
 c00d0d8:	003f6d06 	br	c00ce90 <__alt_data_end+0xfc00ce90>
 c00d0dc:	11fff804 	addi	r7,r2,-32
 c00d0e0:	01000804 	movi	r4,32
 c00d0e4:	29ced83a 	srl	r7,r5,r7
 c00d0e8:	11004526 	beq	r2,r4,c00d200 <__subdf3+0x57c>
 c00d0ec:	01001004 	movi	r4,64
 c00d0f0:	2089c83a 	sub	r4,r4,r2
 c00d0f4:	2904983a 	sll	r2,r5,r4
 c00d0f8:	118cb03a 	or	r6,r2,r6
 c00d0fc:	300cc03a 	cmpne	r6,r6,zero
 c00d100:	398cb03a 	or	r6,r7,r6
 c00d104:	0005883a 	mov	r2,zero
 c00d108:	003f3706 	br	c00cde8 <__alt_data_end+0xfc00cde8>
 c00d10c:	80002a26 	beq	r16,zero,c00d1b8 <__subdf3+0x534>
 c00d110:	0101ffc4 	movi	r4,2047
 c00d114:	49006626 	beq	r9,r4,c00d2b0 <__subdf3+0x62c>
 c00d118:	0085c83a 	sub	r2,zero,r2
 c00d11c:	18c02034 	orhi	r3,r3,128
 c00d120:	01000e04 	movi	r4,56
 c00d124:	20807e16 	blt	r4,r2,c00d320 <__subdf3+0x69c>
 c00d128:	010007c4 	movi	r4,31
 c00d12c:	2080e716 	blt	r4,r2,c00d4cc <__subdf3+0x848>
 c00d130:	01000804 	movi	r4,32
 c00d134:	2089c83a 	sub	r4,r4,r2
 c00d138:	1914983a 	sll	r10,r3,r4
 c00d13c:	8890d83a 	srl	r8,r17,r2
 c00d140:	8908983a 	sll	r4,r17,r4
 c00d144:	1884d83a 	srl	r2,r3,r2
 c00d148:	5222b03a 	or	r17,r10,r8
 c00d14c:	2006c03a 	cmpne	r3,r4,zero
 c00d150:	88e2b03a 	or	r17,r17,r3
 c00d154:	3463c83a 	sub	r17,r6,r17
 c00d158:	2885c83a 	sub	r2,r5,r2
 c00d15c:	344d803a 	cmpltu	r6,r6,r17
 c00d160:	1187c83a 	sub	r3,r2,r6
 c00d164:	4821883a 	mov	r16,r9
 c00d168:	3825883a 	mov	r18,r7
 c00d16c:	003f2306 	br	c00cdfc <__alt_data_end+0xfc00cdfc>
 c00d170:	24d0b03a 	or	r8,r4,r19
 c00d174:	40001b1e 	bne	r8,zero,c00d1e4 <__subdf3+0x560>
 c00d178:	0005883a 	mov	r2,zero
 c00d17c:	0009883a 	mov	r4,zero
 c00d180:	0021883a 	mov	r16,zero
 c00d184:	003f4906 	br	c00ceac <__alt_data_end+0xfc00ceac>
 c00d188:	010007c4 	movi	r4,31
 c00d18c:	20803a16 	blt	r4,r2,c00d278 <__subdf3+0x5f4>
 c00d190:	01000804 	movi	r4,32
 c00d194:	2089c83a 	sub	r4,r4,r2
 c00d198:	2912983a 	sll	r9,r5,r4
 c00d19c:	3090d83a 	srl	r8,r6,r2
 c00d1a0:	3108983a 	sll	r4,r6,r4
 c00d1a4:	2884d83a 	srl	r2,r5,r2
 c00d1a8:	4a12b03a 	or	r9,r9,r8
 c00d1ac:	2008c03a 	cmpne	r4,r4,zero
 c00d1b0:	4912b03a 	or	r9,r9,r4
 c00d1b4:	003f4e06 	br	c00cef0 <__alt_data_end+0xfc00cef0>
 c00d1b8:	1c48b03a 	or	r4,r3,r17
 c00d1bc:	20003c26 	beq	r4,zero,c00d2b0 <__subdf3+0x62c>
 c00d1c0:	0084303a 	nor	r2,zero,r2
 c00d1c4:	1000381e 	bne	r2,zero,c00d2a8 <__subdf3+0x624>
 c00d1c8:	3463c83a 	sub	r17,r6,r17
 c00d1cc:	28c5c83a 	sub	r2,r5,r3
 c00d1d0:	344d803a 	cmpltu	r6,r6,r17
 c00d1d4:	1187c83a 	sub	r3,r2,r6
 c00d1d8:	4821883a 	mov	r16,r9
 c00d1dc:	3825883a 	mov	r18,r7
 c00d1e0:	003f0606 	br	c00cdfc <__alt_data_end+0xfc00cdfc>
 c00d1e4:	2023883a 	mov	r17,r4
 c00d1e8:	003f0906 	br	c00ce10 <__alt_data_end+0xfc00ce10>
 c00d1ec:	0101ffc4 	movi	r4,2047
 c00d1f0:	813f3a1e 	bne	r16,r4,c00cedc <__alt_data_end+0xfc00cedc>
 c00d1f4:	003ec406 	br	c00cd08 <__alt_data_end+0xfc00cd08>
 c00d1f8:	0005883a 	mov	r2,zero
 c00d1fc:	003fb106 	br	c00d0c4 <__alt_data_end+0xfc00d0c4>
 c00d200:	0005883a 	mov	r2,zero
 c00d204:	003fbc06 	br	c00d0f8 <__alt_data_end+0xfc00d0f8>
 c00d208:	1c44b03a 	or	r2,r3,r17
 c00d20c:	80008e1e 	bne	r16,zero,c00d448 <__subdf3+0x7c4>
 c00d210:	1000c826 	beq	r2,zero,c00d534 <__subdf3+0x8b0>
 c00d214:	2984b03a 	or	r2,r5,r6
 c00d218:	103ebb26 	beq	r2,zero,c00cd08 <__alt_data_end+0xfc00cd08>
 c00d21c:	8989883a 	add	r4,r17,r6
 c00d220:	1945883a 	add	r2,r3,r5
 c00d224:	2447803a 	cmpltu	r3,r4,r17
 c00d228:	1887883a 	add	r3,r3,r2
 c00d22c:	1880202c 	andhi	r2,r3,128
 c00d230:	2023883a 	mov	r17,r4
 c00d234:	103f1626 	beq	r2,zero,c00ce90 <__alt_data_end+0xfc00ce90>
 c00d238:	00bfe034 	movhi	r2,65408
 c00d23c:	10bfffc4 	addi	r2,r2,-1
 c00d240:	5021883a 	mov	r16,r10
 c00d244:	1886703a 	and	r3,r3,r2
 c00d248:	003eaf06 	br	c00cd08 <__alt_data_end+0xfc00cd08>
 c00d24c:	3825883a 	mov	r18,r7
 c00d250:	003f0f06 	br	c00ce90 <__alt_data_end+0xfc00ce90>
 c00d254:	1c44b03a 	or	r2,r3,r17
 c00d258:	8000251e 	bne	r16,zero,c00d2f0 <__subdf3+0x66c>
 c00d25c:	1000661e 	bne	r2,zero,c00d3f8 <__subdf3+0x774>
 c00d260:	2990b03a 	or	r8,r5,r6
 c00d264:	40009626 	beq	r8,zero,c00d4c0 <__subdf3+0x83c>
 c00d268:	2807883a 	mov	r3,r5
 c00d26c:	3023883a 	mov	r17,r6
 c00d270:	3825883a 	mov	r18,r7
 c00d274:	003ea406 	br	c00cd08 <__alt_data_end+0xfc00cd08>
 c00d278:	127ff804 	addi	r9,r2,-32
 c00d27c:	01000804 	movi	r4,32
 c00d280:	2a52d83a 	srl	r9,r5,r9
 c00d284:	11008c26 	beq	r2,r4,c00d4b8 <__subdf3+0x834>
 c00d288:	01001004 	movi	r4,64
 c00d28c:	2085c83a 	sub	r2,r4,r2
 c00d290:	2884983a 	sll	r2,r5,r2
 c00d294:	118cb03a 	or	r6,r2,r6
 c00d298:	300cc03a 	cmpne	r6,r6,zero
 c00d29c:	4992b03a 	or	r9,r9,r6
 c00d2a0:	0005883a 	mov	r2,zero
 c00d2a4:	003f1206 	br	c00cef0 <__alt_data_end+0xfc00cef0>
 c00d2a8:	0101ffc4 	movi	r4,2047
 c00d2ac:	493f9c1e 	bne	r9,r4,c00d120 <__alt_data_end+0xfc00d120>
 c00d2b0:	2807883a 	mov	r3,r5
 c00d2b4:	3023883a 	mov	r17,r6
 c00d2b8:	4821883a 	mov	r16,r9
 c00d2bc:	3825883a 	mov	r18,r7
 c00d2c0:	003e9106 	br	c00cd08 <__alt_data_end+0xfc00cd08>
 c00d2c4:	80001f1e 	bne	r16,zero,c00d344 <__subdf3+0x6c0>
 c00d2c8:	1c48b03a 	or	r4,r3,r17
 c00d2cc:	20005a26 	beq	r4,zero,c00d438 <__subdf3+0x7b4>
 c00d2d0:	0084303a 	nor	r2,zero,r2
 c00d2d4:	1000561e 	bne	r2,zero,c00d430 <__subdf3+0x7ac>
 c00d2d8:	89a3883a 	add	r17,r17,r6
 c00d2dc:	1945883a 	add	r2,r3,r5
 c00d2e0:	898d803a 	cmpltu	r6,r17,r6
 c00d2e4:	3087883a 	add	r3,r6,r2
 c00d2e8:	4821883a 	mov	r16,r9
 c00d2ec:	003f0506 	br	c00cf04 <__alt_data_end+0xfc00cf04>
 c00d2f0:	10002b1e 	bne	r2,zero,c00d3a0 <__subdf3+0x71c>
 c00d2f4:	2984b03a 	or	r2,r5,r6
 c00d2f8:	10008026 	beq	r2,zero,c00d4fc <__subdf3+0x878>
 c00d2fc:	2807883a 	mov	r3,r5
 c00d300:	3023883a 	mov	r17,r6
 c00d304:	3825883a 	mov	r18,r7
 c00d308:	0401ffc4 	movi	r16,2047
 c00d30c:	003e7e06 	br	c00cd08 <__alt_data_end+0xfc00cd08>
 c00d310:	3809883a 	mov	r4,r7
 c00d314:	0011883a 	mov	r8,zero
 c00d318:	0005883a 	mov	r2,zero
 c00d31c:	003ee306 	br	c00ceac <__alt_data_end+0xfc00ceac>
 c00d320:	1c62b03a 	or	r17,r3,r17
 c00d324:	8822c03a 	cmpne	r17,r17,zero
 c00d328:	0005883a 	mov	r2,zero
 c00d32c:	003f8906 	br	c00d154 <__alt_data_end+0xfc00d154>
 c00d330:	3809883a 	mov	r4,r7
 c00d334:	4821883a 	mov	r16,r9
 c00d338:	0011883a 	mov	r8,zero
 c00d33c:	0005883a 	mov	r2,zero
 c00d340:	003eda06 	br	c00ceac <__alt_data_end+0xfc00ceac>
 c00d344:	0101ffc4 	movi	r4,2047
 c00d348:	49003b26 	beq	r9,r4,c00d438 <__subdf3+0x7b4>
 c00d34c:	0085c83a 	sub	r2,zero,r2
 c00d350:	18c02034 	orhi	r3,r3,128
 c00d354:	01000e04 	movi	r4,56
 c00d358:	20806e16 	blt	r4,r2,c00d514 <__subdf3+0x890>
 c00d35c:	010007c4 	movi	r4,31
 c00d360:	20807716 	blt	r4,r2,c00d540 <__subdf3+0x8bc>
 c00d364:	01000804 	movi	r4,32
 c00d368:	2089c83a 	sub	r4,r4,r2
 c00d36c:	1914983a 	sll	r10,r3,r4
 c00d370:	8890d83a 	srl	r8,r17,r2
 c00d374:	8908983a 	sll	r4,r17,r4
 c00d378:	1884d83a 	srl	r2,r3,r2
 c00d37c:	5222b03a 	or	r17,r10,r8
 c00d380:	2006c03a 	cmpne	r3,r4,zero
 c00d384:	88e2b03a 	or	r17,r17,r3
 c00d388:	89a3883a 	add	r17,r17,r6
 c00d38c:	1145883a 	add	r2,r2,r5
 c00d390:	898d803a 	cmpltu	r6,r17,r6
 c00d394:	3087883a 	add	r3,r6,r2
 c00d398:	4821883a 	mov	r16,r9
 c00d39c:	003ed906 	br	c00cf04 <__alt_data_end+0xfc00cf04>
 c00d3a0:	2984b03a 	or	r2,r5,r6
 c00d3a4:	10004226 	beq	r2,zero,c00d4b0 <__subdf3+0x82c>
 c00d3a8:	1808d0fa 	srli	r4,r3,3
 c00d3ac:	8822d0fa 	srli	r17,r17,3
 c00d3b0:	1806977a 	slli	r3,r3,29
 c00d3b4:	2080022c 	andhi	r2,r4,8
 c00d3b8:	1c62b03a 	or	r17,r3,r17
 c00d3bc:	10000826 	beq	r2,zero,c00d3e0 <__subdf3+0x75c>
 c00d3c0:	2812d0fa 	srli	r9,r5,3
 c00d3c4:	4880022c 	andhi	r2,r9,8
 c00d3c8:	1000051e 	bne	r2,zero,c00d3e0 <__subdf3+0x75c>
 c00d3cc:	300cd0fa 	srli	r6,r6,3
 c00d3d0:	2804977a 	slli	r2,r5,29
 c00d3d4:	4809883a 	mov	r4,r9
 c00d3d8:	3825883a 	mov	r18,r7
 c00d3dc:	11a2b03a 	or	r17,r2,r6
 c00d3e0:	8806d77a 	srli	r3,r17,29
 c00d3e4:	200890fa 	slli	r4,r4,3
 c00d3e8:	882290fa 	slli	r17,r17,3
 c00d3ec:	0401ffc4 	movi	r16,2047
 c00d3f0:	1906b03a 	or	r3,r3,r4
 c00d3f4:	003e4406 	br	c00cd08 <__alt_data_end+0xfc00cd08>
 c00d3f8:	2984b03a 	or	r2,r5,r6
 c00d3fc:	103e4226 	beq	r2,zero,c00cd08 <__alt_data_end+0xfc00cd08>
 c00d400:	8989c83a 	sub	r4,r17,r6
 c00d404:	8911803a 	cmpltu	r8,r17,r4
 c00d408:	1945c83a 	sub	r2,r3,r5
 c00d40c:	1205c83a 	sub	r2,r2,r8
 c00d410:	1200202c 	andhi	r8,r2,128
 c00d414:	403e9a26 	beq	r8,zero,c00ce80 <__alt_data_end+0xfc00ce80>
 c00d418:	3463c83a 	sub	r17,r6,r17
 c00d41c:	28c5c83a 	sub	r2,r5,r3
 c00d420:	344d803a 	cmpltu	r6,r6,r17
 c00d424:	1187c83a 	sub	r3,r2,r6
 c00d428:	3825883a 	mov	r18,r7
 c00d42c:	003e3606 	br	c00cd08 <__alt_data_end+0xfc00cd08>
 c00d430:	0101ffc4 	movi	r4,2047
 c00d434:	493fc71e 	bne	r9,r4,c00d354 <__alt_data_end+0xfc00d354>
 c00d438:	2807883a 	mov	r3,r5
 c00d43c:	3023883a 	mov	r17,r6
 c00d440:	4821883a 	mov	r16,r9
 c00d444:	003e3006 	br	c00cd08 <__alt_data_end+0xfc00cd08>
 c00d448:	10003626 	beq	r2,zero,c00d524 <__subdf3+0x8a0>
 c00d44c:	2984b03a 	or	r2,r5,r6
 c00d450:	10001726 	beq	r2,zero,c00d4b0 <__subdf3+0x82c>
 c00d454:	1808d0fa 	srli	r4,r3,3
 c00d458:	8822d0fa 	srli	r17,r17,3
 c00d45c:	1806977a 	slli	r3,r3,29
 c00d460:	2080022c 	andhi	r2,r4,8
 c00d464:	1c62b03a 	or	r17,r3,r17
 c00d468:	10000726 	beq	r2,zero,c00d488 <__subdf3+0x804>
 c00d46c:	2812d0fa 	srli	r9,r5,3
 c00d470:	4880022c 	andhi	r2,r9,8
 c00d474:	1000041e 	bne	r2,zero,c00d488 <__subdf3+0x804>
 c00d478:	300cd0fa 	srli	r6,r6,3
 c00d47c:	2804977a 	slli	r2,r5,29
 c00d480:	4809883a 	mov	r4,r9
 c00d484:	11a2b03a 	or	r17,r2,r6
 c00d488:	8806d77a 	srli	r3,r17,29
 c00d48c:	200890fa 	slli	r4,r4,3
 c00d490:	882290fa 	slli	r17,r17,3
 c00d494:	3825883a 	mov	r18,r7
 c00d498:	1906b03a 	or	r3,r3,r4
 c00d49c:	0401ffc4 	movi	r16,2047
 c00d4a0:	003e1906 	br	c00cd08 <__alt_data_end+0xfc00cd08>
 c00d4a4:	000b883a 	mov	r5,zero
 c00d4a8:	0005883a 	mov	r2,zero
 c00d4ac:	003e2e06 	br	c00cd68 <__alt_data_end+0xfc00cd68>
 c00d4b0:	0401ffc4 	movi	r16,2047
 c00d4b4:	003e1406 	br	c00cd08 <__alt_data_end+0xfc00cd08>
 c00d4b8:	0005883a 	mov	r2,zero
 c00d4bc:	003f7506 	br	c00d294 <__alt_data_end+0xfc00d294>
 c00d4c0:	0005883a 	mov	r2,zero
 c00d4c4:	0009883a 	mov	r4,zero
 c00d4c8:	003e7806 	br	c00ceac <__alt_data_end+0xfc00ceac>
 c00d4cc:	123ff804 	addi	r8,r2,-32
 c00d4d0:	01000804 	movi	r4,32
 c00d4d4:	1a10d83a 	srl	r8,r3,r8
 c00d4d8:	11002526 	beq	r2,r4,c00d570 <__subdf3+0x8ec>
 c00d4dc:	01001004 	movi	r4,64
 c00d4e0:	2085c83a 	sub	r2,r4,r2
 c00d4e4:	1884983a 	sll	r2,r3,r2
 c00d4e8:	1444b03a 	or	r2,r2,r17
 c00d4ec:	1004c03a 	cmpne	r2,r2,zero
 c00d4f0:	40a2b03a 	or	r17,r8,r2
 c00d4f4:	0005883a 	mov	r2,zero
 c00d4f8:	003f1606 	br	c00d154 <__alt_data_end+0xfc00d154>
 c00d4fc:	02000434 	movhi	r8,16
 c00d500:	0009883a 	mov	r4,zero
 c00d504:	423fffc4 	addi	r8,r8,-1
 c00d508:	00bfffc4 	movi	r2,-1
 c00d50c:	0401ffc4 	movi	r16,2047
 c00d510:	003e6606 	br	c00ceac <__alt_data_end+0xfc00ceac>
 c00d514:	1c62b03a 	or	r17,r3,r17
 c00d518:	8822c03a 	cmpne	r17,r17,zero
 c00d51c:	0005883a 	mov	r2,zero
 c00d520:	003f9906 	br	c00d388 <__alt_data_end+0xfc00d388>
 c00d524:	2807883a 	mov	r3,r5
 c00d528:	3023883a 	mov	r17,r6
 c00d52c:	0401ffc4 	movi	r16,2047
 c00d530:	003df506 	br	c00cd08 <__alt_data_end+0xfc00cd08>
 c00d534:	2807883a 	mov	r3,r5
 c00d538:	3023883a 	mov	r17,r6
 c00d53c:	003df206 	br	c00cd08 <__alt_data_end+0xfc00cd08>
 c00d540:	123ff804 	addi	r8,r2,-32
 c00d544:	01000804 	movi	r4,32
 c00d548:	1a10d83a 	srl	r8,r3,r8
 c00d54c:	11000a26 	beq	r2,r4,c00d578 <__subdf3+0x8f4>
 c00d550:	01001004 	movi	r4,64
 c00d554:	2085c83a 	sub	r2,r4,r2
 c00d558:	1884983a 	sll	r2,r3,r2
 c00d55c:	1444b03a 	or	r2,r2,r17
 c00d560:	1004c03a 	cmpne	r2,r2,zero
 c00d564:	40a2b03a 	or	r17,r8,r2
 c00d568:	0005883a 	mov	r2,zero
 c00d56c:	003f8606 	br	c00d388 <__alt_data_end+0xfc00d388>
 c00d570:	0005883a 	mov	r2,zero
 c00d574:	003fdc06 	br	c00d4e8 <__alt_data_end+0xfc00d4e8>
 c00d578:	0005883a 	mov	r2,zero
 c00d57c:	003ff706 	br	c00d55c <__alt_data_end+0xfc00d55c>

0c00d580 <__fixdfsi>:
 c00d580:	280cd53a 	srli	r6,r5,20
 c00d584:	00c00434 	movhi	r3,16
 c00d588:	18ffffc4 	addi	r3,r3,-1
 c00d58c:	3181ffcc 	andi	r6,r6,2047
 c00d590:	01c0ff84 	movi	r7,1022
 c00d594:	28c6703a 	and	r3,r5,r3
 c00d598:	280ad7fa 	srli	r5,r5,31
 c00d59c:	3980120e 	bge	r7,r6,c00d5e8 <__fixdfsi+0x68>
 c00d5a0:	00810744 	movi	r2,1053
 c00d5a4:	11800c16 	blt	r2,r6,c00d5d8 <__fixdfsi+0x58>
 c00d5a8:	00810cc4 	movi	r2,1075
 c00d5ac:	1185c83a 	sub	r2,r2,r6
 c00d5b0:	01c007c4 	movi	r7,31
 c00d5b4:	18c00434 	orhi	r3,r3,16
 c00d5b8:	38800d16 	blt	r7,r2,c00d5f0 <__fixdfsi+0x70>
 c00d5bc:	31befb44 	addi	r6,r6,-1043
 c00d5c0:	2084d83a 	srl	r2,r4,r2
 c00d5c4:	1986983a 	sll	r3,r3,r6
 c00d5c8:	1884b03a 	or	r2,r3,r2
 c00d5cc:	28000726 	beq	r5,zero,c00d5ec <__fixdfsi+0x6c>
 c00d5d0:	0085c83a 	sub	r2,zero,r2
 c00d5d4:	f800283a 	ret
 c00d5d8:	00a00034 	movhi	r2,32768
 c00d5dc:	10bfffc4 	addi	r2,r2,-1
 c00d5e0:	2885883a 	add	r2,r5,r2
 c00d5e4:	f800283a 	ret
 c00d5e8:	0005883a 	mov	r2,zero
 c00d5ec:	f800283a 	ret
 c00d5f0:	008104c4 	movi	r2,1043
 c00d5f4:	1185c83a 	sub	r2,r2,r6
 c00d5f8:	1884d83a 	srl	r2,r3,r2
 c00d5fc:	003ff306 	br	c00d5cc <__alt_data_end+0xfc00d5cc>

0c00d600 <__floatsidf>:
 c00d600:	defffd04 	addi	sp,sp,-12
 c00d604:	dfc00215 	stw	ra,8(sp)
 c00d608:	dc400115 	stw	r17,4(sp)
 c00d60c:	dc000015 	stw	r16,0(sp)
 c00d610:	20002b26 	beq	r4,zero,c00d6c0 <__floatsidf+0xc0>
 c00d614:	2023883a 	mov	r17,r4
 c00d618:	2020d7fa 	srli	r16,r4,31
 c00d61c:	20002d16 	blt	r4,zero,c00d6d4 <__floatsidf+0xd4>
 c00d620:	8809883a 	mov	r4,r17
 c00d624:	c00d7840 	call	c00d784 <__clzsi2>
 c00d628:	01410784 	movi	r5,1054
 c00d62c:	288bc83a 	sub	r5,r5,r2
 c00d630:	01010cc4 	movi	r4,1075
 c00d634:	2149c83a 	sub	r4,r4,r5
 c00d638:	00c007c4 	movi	r3,31
 c00d63c:	1900160e 	bge	r3,r4,c00d698 <__floatsidf+0x98>
 c00d640:	00c104c4 	movi	r3,1043
 c00d644:	1947c83a 	sub	r3,r3,r5
 c00d648:	88c6983a 	sll	r3,r17,r3
 c00d64c:	00800434 	movhi	r2,16
 c00d650:	10bfffc4 	addi	r2,r2,-1
 c00d654:	1886703a 	and	r3,r3,r2
 c00d658:	2941ffcc 	andi	r5,r5,2047
 c00d65c:	800d883a 	mov	r6,r16
 c00d660:	0005883a 	mov	r2,zero
 c00d664:	280a953a 	slli	r5,r5,20
 c00d668:	31803fcc 	andi	r6,r6,255
 c00d66c:	01000434 	movhi	r4,16
 c00d670:	300c97fa 	slli	r6,r6,31
 c00d674:	213fffc4 	addi	r4,r4,-1
 c00d678:	1906703a 	and	r3,r3,r4
 c00d67c:	1946b03a 	or	r3,r3,r5
 c00d680:	1986b03a 	or	r3,r3,r6
 c00d684:	dfc00217 	ldw	ra,8(sp)
 c00d688:	dc400117 	ldw	r17,4(sp)
 c00d68c:	dc000017 	ldw	r16,0(sp)
 c00d690:	dec00304 	addi	sp,sp,12
 c00d694:	f800283a 	ret
 c00d698:	00c002c4 	movi	r3,11
 c00d69c:	1887c83a 	sub	r3,r3,r2
 c00d6a0:	88c6d83a 	srl	r3,r17,r3
 c00d6a4:	8904983a 	sll	r2,r17,r4
 c00d6a8:	01000434 	movhi	r4,16
 c00d6ac:	213fffc4 	addi	r4,r4,-1
 c00d6b0:	2941ffcc 	andi	r5,r5,2047
 c00d6b4:	1906703a 	and	r3,r3,r4
 c00d6b8:	800d883a 	mov	r6,r16
 c00d6bc:	003fe906 	br	c00d664 <__alt_data_end+0xfc00d664>
 c00d6c0:	000d883a 	mov	r6,zero
 c00d6c4:	000b883a 	mov	r5,zero
 c00d6c8:	0007883a 	mov	r3,zero
 c00d6cc:	0005883a 	mov	r2,zero
 c00d6d0:	003fe406 	br	c00d664 <__alt_data_end+0xfc00d664>
 c00d6d4:	0123c83a 	sub	r17,zero,r4
 c00d6d8:	003fd106 	br	c00d620 <__alt_data_end+0xfc00d620>

0c00d6dc <__floatunsidf>:
 c00d6dc:	defffe04 	addi	sp,sp,-8
 c00d6e0:	dc000015 	stw	r16,0(sp)
 c00d6e4:	dfc00115 	stw	ra,4(sp)
 c00d6e8:	2021883a 	mov	r16,r4
 c00d6ec:	20002226 	beq	r4,zero,c00d778 <__floatunsidf+0x9c>
 c00d6f0:	c00d7840 	call	c00d784 <__clzsi2>
 c00d6f4:	01010784 	movi	r4,1054
 c00d6f8:	2089c83a 	sub	r4,r4,r2
 c00d6fc:	01810cc4 	movi	r6,1075
 c00d700:	310dc83a 	sub	r6,r6,r4
 c00d704:	00c007c4 	movi	r3,31
 c00d708:	1980120e 	bge	r3,r6,c00d754 <__floatunsidf+0x78>
 c00d70c:	00c104c4 	movi	r3,1043
 c00d710:	1907c83a 	sub	r3,r3,r4
 c00d714:	80ca983a 	sll	r5,r16,r3
 c00d718:	00800434 	movhi	r2,16
 c00d71c:	10bfffc4 	addi	r2,r2,-1
 c00d720:	2101ffcc 	andi	r4,r4,2047
 c00d724:	0021883a 	mov	r16,zero
 c00d728:	288a703a 	and	r5,r5,r2
 c00d72c:	2008953a 	slli	r4,r4,20
 c00d730:	00c00434 	movhi	r3,16
 c00d734:	18ffffc4 	addi	r3,r3,-1
 c00d738:	28c6703a 	and	r3,r5,r3
 c00d73c:	8005883a 	mov	r2,r16
 c00d740:	1906b03a 	or	r3,r3,r4
 c00d744:	dfc00117 	ldw	ra,4(sp)
 c00d748:	dc000017 	ldw	r16,0(sp)
 c00d74c:	dec00204 	addi	sp,sp,8
 c00d750:	f800283a 	ret
 c00d754:	00c002c4 	movi	r3,11
 c00d758:	188bc83a 	sub	r5,r3,r2
 c00d75c:	814ad83a 	srl	r5,r16,r5
 c00d760:	00c00434 	movhi	r3,16
 c00d764:	18ffffc4 	addi	r3,r3,-1
 c00d768:	81a0983a 	sll	r16,r16,r6
 c00d76c:	2101ffcc 	andi	r4,r4,2047
 c00d770:	28ca703a 	and	r5,r5,r3
 c00d774:	003fed06 	br	c00d72c <__alt_data_end+0xfc00d72c>
 c00d778:	0009883a 	mov	r4,zero
 c00d77c:	000b883a 	mov	r5,zero
 c00d780:	003fea06 	br	c00d72c <__alt_data_end+0xfc00d72c>

0c00d784 <__clzsi2>:
 c00d784:	00bfffd4 	movui	r2,65535
 c00d788:	11000536 	bltu	r2,r4,c00d7a0 <__clzsi2+0x1c>
 c00d78c:	00803fc4 	movi	r2,255
 c00d790:	11000f36 	bltu	r2,r4,c00d7d0 <__clzsi2+0x4c>
 c00d794:	00800804 	movi	r2,32
 c00d798:	0007883a 	mov	r3,zero
 c00d79c:	00000506 	br	c00d7b4 <__clzsi2+0x30>
 c00d7a0:	00804034 	movhi	r2,256
 c00d7a4:	10bfffc4 	addi	r2,r2,-1
 c00d7a8:	11000c2e 	bgeu	r2,r4,c00d7dc <__clzsi2+0x58>
 c00d7ac:	00800204 	movi	r2,8
 c00d7b0:	00c00604 	movi	r3,24
 c00d7b4:	20c8d83a 	srl	r4,r4,r3
 c00d7b8:	00c30074 	movhi	r3,3073
 c00d7bc:	18c0fe04 	addi	r3,r3,1016
 c00d7c0:	1909883a 	add	r4,r3,r4
 c00d7c4:	20c00003 	ldbu	r3,0(r4)
 c00d7c8:	10c5c83a 	sub	r2,r2,r3
 c00d7cc:	f800283a 	ret
 c00d7d0:	00800604 	movi	r2,24
 c00d7d4:	00c00204 	movi	r3,8
 c00d7d8:	003ff606 	br	c00d7b4 <__alt_data_end+0xfc00d7b4>
 c00d7dc:	00800404 	movi	r2,16
 c00d7e0:	1007883a 	mov	r3,r2
 c00d7e4:	003ff306 	br	c00d7b4 <__alt_data_end+0xfc00d7b4>

0c00d7e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c00d7e8:	defffe04 	addi	sp,sp,-8
 c00d7ec:	dfc00115 	stw	ra,4(sp)
 c00d7f0:	df000015 	stw	fp,0(sp)
 c00d7f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 c00d7f8:	d0a00d17 	ldw	r2,-32716(gp)
 c00d7fc:	10000326 	beq	r2,zero,c00d80c <alt_get_errno+0x24>
 c00d800:	d0a00d17 	ldw	r2,-32716(gp)
 c00d804:	103ee83a 	callr	r2
 c00d808:	00000106 	br	c00d810 <alt_get_errno+0x28>
 c00d80c:	d0a6d504 	addi	r2,gp,-25772
}
 c00d810:	e037883a 	mov	sp,fp
 c00d814:	dfc00117 	ldw	ra,4(sp)
 c00d818:	df000017 	ldw	fp,0(sp)
 c00d81c:	dec00204 	addi	sp,sp,8
 c00d820:	f800283a 	ret

0c00d824 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 c00d824:	defffb04 	addi	sp,sp,-20
 c00d828:	dfc00415 	stw	ra,16(sp)
 c00d82c:	df000315 	stw	fp,12(sp)
 c00d830:	df000304 	addi	fp,sp,12
 c00d834:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 c00d838:	e0bfff17 	ldw	r2,-4(fp)
 c00d83c:	10000816 	blt	r2,zero,c00d860 <close+0x3c>
 c00d840:	01400304 	movi	r5,12
 c00d844:	e13fff17 	ldw	r4,-4(fp)
 c00d848:	c00097c0 	call	c00097c <__mulsi3>
 c00d84c:	1007883a 	mov	r3,r2
 c00d850:	00830074 	movhi	r2,3073
 c00d854:	10837e04 	addi	r2,r2,3576
 c00d858:	1885883a 	add	r2,r3,r2
 c00d85c:	00000106 	br	c00d864 <close+0x40>
 c00d860:	0005883a 	mov	r2,zero
 c00d864:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 c00d868:	e0bffd17 	ldw	r2,-12(fp)
 c00d86c:	10001926 	beq	r2,zero,c00d8d4 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 c00d870:	e0bffd17 	ldw	r2,-12(fp)
 c00d874:	10800017 	ldw	r2,0(r2)
 c00d878:	10800417 	ldw	r2,16(r2)
 c00d87c:	10000626 	beq	r2,zero,c00d898 <close+0x74>
 c00d880:	e0bffd17 	ldw	r2,-12(fp)
 c00d884:	10800017 	ldw	r2,0(r2)
 c00d888:	10800417 	ldw	r2,16(r2)
 c00d88c:	e13ffd17 	ldw	r4,-12(fp)
 c00d890:	103ee83a 	callr	r2
 c00d894:	00000106 	br	c00d89c <close+0x78>
 c00d898:	0005883a 	mov	r2,zero
 c00d89c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 c00d8a0:	e13fff17 	ldw	r4,-4(fp)
 c00d8a4:	c00df0c0 	call	c00df0c <alt_release_fd>
    if (rval < 0)
 c00d8a8:	e0bffe17 	ldw	r2,-8(fp)
 c00d8ac:	1000070e 	bge	r2,zero,c00d8cc <close+0xa8>
    {
      ALT_ERRNO = -rval;
 c00d8b0:	c00d7e80 	call	c00d7e8 <alt_get_errno>
 c00d8b4:	1007883a 	mov	r3,r2
 c00d8b8:	e0bffe17 	ldw	r2,-8(fp)
 c00d8bc:	0085c83a 	sub	r2,zero,r2
 c00d8c0:	18800015 	stw	r2,0(r3)
      return -1;
 c00d8c4:	00bfffc4 	movi	r2,-1
 c00d8c8:	00000706 	br	c00d8e8 <close+0xc4>
    }
    return 0;
 c00d8cc:	0005883a 	mov	r2,zero
 c00d8d0:	00000506 	br	c00d8e8 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 c00d8d4:	c00d7e80 	call	c00d7e8 <alt_get_errno>
 c00d8d8:	1007883a 	mov	r3,r2
 c00d8dc:	00801444 	movi	r2,81
 c00d8e0:	18800015 	stw	r2,0(r3)
    return -1;
 c00d8e4:	00bfffc4 	movi	r2,-1
  }
}
 c00d8e8:	e037883a 	mov	sp,fp
 c00d8ec:	dfc00117 	ldw	ra,4(sp)
 c00d8f0:	df000017 	ldw	fp,0(sp)
 c00d8f4:	dec00204 	addi	sp,sp,8
 c00d8f8:	f800283a 	ret

0c00d8fc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 c00d8fc:	defffc04 	addi	sp,sp,-16
 c00d900:	df000315 	stw	fp,12(sp)
 c00d904:	df000304 	addi	fp,sp,12
 c00d908:	e13ffd15 	stw	r4,-12(fp)
 c00d90c:	e17ffe15 	stw	r5,-8(fp)
 c00d910:	e1bfff15 	stw	r6,-4(fp)
  return len;
 c00d914:	e0bfff17 	ldw	r2,-4(fp)
}
 c00d918:	e037883a 	mov	sp,fp
 c00d91c:	df000017 	ldw	fp,0(sp)
 c00d920:	dec00104 	addi	sp,sp,4
 c00d924:	f800283a 	ret

0c00d928 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c00d928:	defffe04 	addi	sp,sp,-8
 c00d92c:	dfc00115 	stw	ra,4(sp)
 c00d930:	df000015 	stw	fp,0(sp)
 c00d934:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 c00d938:	d0a00d17 	ldw	r2,-32716(gp)
 c00d93c:	10000326 	beq	r2,zero,c00d94c <alt_get_errno+0x24>
 c00d940:	d0a00d17 	ldw	r2,-32716(gp)
 c00d944:	103ee83a 	callr	r2
 c00d948:	00000106 	br	c00d950 <alt_get_errno+0x28>
 c00d94c:	d0a6d504 	addi	r2,gp,-25772
}
 c00d950:	e037883a 	mov	sp,fp
 c00d954:	dfc00117 	ldw	ra,4(sp)
 c00d958:	df000017 	ldw	fp,0(sp)
 c00d95c:	dec00204 	addi	sp,sp,8
 c00d960:	f800283a 	ret

0c00d964 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 c00d964:	defffb04 	addi	sp,sp,-20
 c00d968:	dfc00415 	stw	ra,16(sp)
 c00d96c:	df000315 	stw	fp,12(sp)
 c00d970:	df000304 	addi	fp,sp,12
 c00d974:	e13ffe15 	stw	r4,-8(fp)
 c00d978:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 c00d97c:	e0bffe17 	ldw	r2,-8(fp)
 c00d980:	10000816 	blt	r2,zero,c00d9a4 <fstat+0x40>
 c00d984:	01400304 	movi	r5,12
 c00d988:	e13ffe17 	ldw	r4,-8(fp)
 c00d98c:	c00097c0 	call	c00097c <__mulsi3>
 c00d990:	1007883a 	mov	r3,r2
 c00d994:	00830074 	movhi	r2,3073
 c00d998:	10837e04 	addi	r2,r2,3576
 c00d99c:	1885883a 	add	r2,r3,r2
 c00d9a0:	00000106 	br	c00d9a8 <fstat+0x44>
 c00d9a4:	0005883a 	mov	r2,zero
 c00d9a8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 c00d9ac:	e0bffd17 	ldw	r2,-12(fp)
 c00d9b0:	10001026 	beq	r2,zero,c00d9f4 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 c00d9b4:	e0bffd17 	ldw	r2,-12(fp)
 c00d9b8:	10800017 	ldw	r2,0(r2)
 c00d9bc:	10800817 	ldw	r2,32(r2)
 c00d9c0:	10000726 	beq	r2,zero,c00d9e0 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 c00d9c4:	e0bffd17 	ldw	r2,-12(fp)
 c00d9c8:	10800017 	ldw	r2,0(r2)
 c00d9cc:	10800817 	ldw	r2,32(r2)
 c00d9d0:	e17fff17 	ldw	r5,-4(fp)
 c00d9d4:	e13ffd17 	ldw	r4,-12(fp)
 c00d9d8:	103ee83a 	callr	r2
 c00d9dc:	00000a06 	br	c00da08 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 c00d9e0:	e0bfff17 	ldw	r2,-4(fp)
 c00d9e4:	00c80004 	movi	r3,8192
 c00d9e8:	10c00115 	stw	r3,4(r2)
      return 0;
 c00d9ec:	0005883a 	mov	r2,zero
 c00d9f0:	00000506 	br	c00da08 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 c00d9f4:	c00d9280 	call	c00d928 <alt_get_errno>
 c00d9f8:	1007883a 	mov	r3,r2
 c00d9fc:	00801444 	movi	r2,81
 c00da00:	18800015 	stw	r2,0(r3)
    return -1;
 c00da04:	00bfffc4 	movi	r2,-1
  }
}
 c00da08:	e037883a 	mov	sp,fp
 c00da0c:	dfc00117 	ldw	ra,4(sp)
 c00da10:	df000017 	ldw	fp,0(sp)
 c00da14:	dec00204 	addi	sp,sp,8
 c00da18:	f800283a 	ret

0c00da1c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c00da1c:	defffe04 	addi	sp,sp,-8
 c00da20:	dfc00115 	stw	ra,4(sp)
 c00da24:	df000015 	stw	fp,0(sp)
 c00da28:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 c00da2c:	d0a00d17 	ldw	r2,-32716(gp)
 c00da30:	10000326 	beq	r2,zero,c00da40 <alt_get_errno+0x24>
 c00da34:	d0a00d17 	ldw	r2,-32716(gp)
 c00da38:	103ee83a 	callr	r2
 c00da3c:	00000106 	br	c00da44 <alt_get_errno+0x28>
 c00da40:	d0a6d504 	addi	r2,gp,-25772
}
 c00da44:	e037883a 	mov	sp,fp
 c00da48:	dfc00117 	ldw	ra,4(sp)
 c00da4c:	df000017 	ldw	fp,0(sp)
 c00da50:	dec00204 	addi	sp,sp,8
 c00da54:	f800283a 	ret

0c00da58 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 c00da58:	deffed04 	addi	sp,sp,-76
 c00da5c:	dfc01215 	stw	ra,72(sp)
 c00da60:	df001115 	stw	fp,68(sp)
 c00da64:	df001104 	addi	fp,sp,68
 c00da68:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 c00da6c:	e0bfff17 	ldw	r2,-4(fp)
 c00da70:	10000816 	blt	r2,zero,c00da94 <isatty+0x3c>
 c00da74:	01400304 	movi	r5,12
 c00da78:	e13fff17 	ldw	r4,-4(fp)
 c00da7c:	c00097c0 	call	c00097c <__mulsi3>
 c00da80:	1007883a 	mov	r3,r2
 c00da84:	00830074 	movhi	r2,3073
 c00da88:	10837e04 	addi	r2,r2,3576
 c00da8c:	1885883a 	add	r2,r3,r2
 c00da90:	00000106 	br	c00da98 <isatty+0x40>
 c00da94:	0005883a 	mov	r2,zero
 c00da98:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 c00da9c:	e0bfef17 	ldw	r2,-68(fp)
 c00daa0:	10000e26 	beq	r2,zero,c00dadc <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 c00daa4:	e0bfef17 	ldw	r2,-68(fp)
 c00daa8:	10800017 	ldw	r2,0(r2)
 c00daac:	10800817 	ldw	r2,32(r2)
 c00dab0:	1000021e 	bne	r2,zero,c00dabc <isatty+0x64>
    {
      return 1;
 c00dab4:	00800044 	movi	r2,1
 c00dab8:	00000d06 	br	c00daf0 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 c00dabc:	e0bff004 	addi	r2,fp,-64
 c00dac0:	100b883a 	mov	r5,r2
 c00dac4:	e13fff17 	ldw	r4,-4(fp)
 c00dac8:	c00d9640 	call	c00d964 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 c00dacc:	e0bff117 	ldw	r2,-60(fp)
 c00dad0:	10880020 	cmpeqi	r2,r2,8192
 c00dad4:	10803fcc 	andi	r2,r2,255
 c00dad8:	00000506 	br	c00daf0 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 c00dadc:	c00da1c0 	call	c00da1c <alt_get_errno>
 c00dae0:	1007883a 	mov	r3,r2
 c00dae4:	00801444 	movi	r2,81
 c00dae8:	18800015 	stw	r2,0(r3)
    return 0;
 c00daec:	0005883a 	mov	r2,zero
  }
}
 c00daf0:	e037883a 	mov	sp,fp
 c00daf4:	dfc00117 	ldw	ra,4(sp)
 c00daf8:	df000017 	ldw	fp,0(sp)
 c00dafc:	dec00204 	addi	sp,sp,8
 c00db00:	f800283a 	ret

0c00db04 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 c00db04:	defffc04 	addi	sp,sp,-16
 c00db08:	df000315 	stw	fp,12(sp)
 c00db0c:	df000304 	addi	fp,sp,12
 c00db10:	e13ffd15 	stw	r4,-12(fp)
 c00db14:	e17ffe15 	stw	r5,-8(fp)
 c00db18:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 c00db1c:	e0fffe17 	ldw	r3,-8(fp)
 c00db20:	e0bffd17 	ldw	r2,-12(fp)
 c00db24:	18800c26 	beq	r3,r2,c00db58 <alt_load_section+0x54>
  {
    while( to != end )
 c00db28:	00000806 	br	c00db4c <alt_load_section+0x48>
    {
      *to++ = *from++;
 c00db2c:	e0bffe17 	ldw	r2,-8(fp)
 c00db30:	10c00104 	addi	r3,r2,4
 c00db34:	e0fffe15 	stw	r3,-8(fp)
 c00db38:	e0fffd17 	ldw	r3,-12(fp)
 c00db3c:	19000104 	addi	r4,r3,4
 c00db40:	e13ffd15 	stw	r4,-12(fp)
 c00db44:	18c00017 	ldw	r3,0(r3)
 c00db48:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 c00db4c:	e0fffe17 	ldw	r3,-8(fp)
 c00db50:	e0bfff17 	ldw	r2,-4(fp)
 c00db54:	18bff51e 	bne	r3,r2,c00db2c <__alt_data_end+0xfc00db2c>
    {
      *to++ = *from++;
    }
  }
}
 c00db58:	0001883a 	nop
 c00db5c:	e037883a 	mov	sp,fp
 c00db60:	df000017 	ldw	fp,0(sp)
 c00db64:	dec00104 	addi	sp,sp,4
 c00db68:	f800283a 	ret

0c00db6c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 c00db6c:	defffe04 	addi	sp,sp,-8
 c00db70:	dfc00115 	stw	ra,4(sp)
 c00db74:	df000015 	stw	fp,0(sp)
 c00db78:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 c00db7c:	01830074 	movhi	r6,3073
 c00db80:	31880804 	addi	r6,r6,8224
 c00db84:	01430074 	movhi	r5,3073
 c00db88:	29414b04 	addi	r5,r5,1324
 c00db8c:	01030074 	movhi	r4,3073
 c00db90:	21080804 	addi	r4,r4,8224
 c00db94:	c00db040 	call	c00db04 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 c00db98:	01830034 	movhi	r6,3072
 c00db9c:	31808c04 	addi	r6,r6,560
 c00dba0:	01430034 	movhi	r5,3072
 c00dba4:	29400804 	addi	r5,r5,32
 c00dba8:	01030034 	movhi	r4,3072
 c00dbac:	21000804 	addi	r4,r4,32
 c00dbb0:	c00db040 	call	c00db04 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 c00dbb4:	01830074 	movhi	r6,3073
 c00dbb8:	31814b04 	addi	r6,r6,1324
 c00dbbc:	01430074 	movhi	r5,3073
 c00dbc0:	29404504 	addi	r5,r5,276
 c00dbc4:	01030074 	movhi	r4,3073
 c00dbc8:	21004504 	addi	r4,r4,276
 c00dbcc:	c00db040 	call	c00db04 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 c00dbd0:	c00f05c0 	call	c00f05c <alt_dcache_flush_all>
  alt_icache_flush_all();
 c00dbd4:	c00f21c0 	call	c00f21c <alt_icache_flush_all>
}
 c00dbd8:	0001883a 	nop
 c00dbdc:	e037883a 	mov	sp,fp
 c00dbe0:	dfc00117 	ldw	ra,4(sp)
 c00dbe4:	df000017 	ldw	fp,0(sp)
 c00dbe8:	dec00204 	addi	sp,sp,8
 c00dbec:	f800283a 	ret

0c00dbf0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c00dbf0:	defffe04 	addi	sp,sp,-8
 c00dbf4:	dfc00115 	stw	ra,4(sp)
 c00dbf8:	df000015 	stw	fp,0(sp)
 c00dbfc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 c00dc00:	d0a00d17 	ldw	r2,-32716(gp)
 c00dc04:	10000326 	beq	r2,zero,c00dc14 <alt_get_errno+0x24>
 c00dc08:	d0a00d17 	ldw	r2,-32716(gp)
 c00dc0c:	103ee83a 	callr	r2
 c00dc10:	00000106 	br	c00dc18 <alt_get_errno+0x28>
 c00dc14:	d0a6d504 	addi	r2,gp,-25772
}
 c00dc18:	e037883a 	mov	sp,fp
 c00dc1c:	dfc00117 	ldw	ra,4(sp)
 c00dc20:	df000017 	ldw	fp,0(sp)
 c00dc24:	dec00204 	addi	sp,sp,8
 c00dc28:	f800283a 	ret

0c00dc2c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 c00dc2c:	defff904 	addi	sp,sp,-28
 c00dc30:	dfc00615 	stw	ra,24(sp)
 c00dc34:	df000515 	stw	fp,20(sp)
 c00dc38:	df000504 	addi	fp,sp,20
 c00dc3c:	e13ffd15 	stw	r4,-12(fp)
 c00dc40:	e17ffe15 	stw	r5,-8(fp)
 c00dc44:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 c00dc48:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 c00dc4c:	e0bffd17 	ldw	r2,-12(fp)
 c00dc50:	10000816 	blt	r2,zero,c00dc74 <lseek+0x48>
 c00dc54:	01400304 	movi	r5,12
 c00dc58:	e13ffd17 	ldw	r4,-12(fp)
 c00dc5c:	c00097c0 	call	c00097c <__mulsi3>
 c00dc60:	1007883a 	mov	r3,r2
 c00dc64:	00830074 	movhi	r2,3073
 c00dc68:	10837e04 	addi	r2,r2,3576
 c00dc6c:	1885883a 	add	r2,r3,r2
 c00dc70:	00000106 	br	c00dc78 <lseek+0x4c>
 c00dc74:	0005883a 	mov	r2,zero
 c00dc78:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 c00dc7c:	e0bffc17 	ldw	r2,-16(fp)
 c00dc80:	10001026 	beq	r2,zero,c00dcc4 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 c00dc84:	e0bffc17 	ldw	r2,-16(fp)
 c00dc88:	10800017 	ldw	r2,0(r2)
 c00dc8c:	10800717 	ldw	r2,28(r2)
 c00dc90:	10000926 	beq	r2,zero,c00dcb8 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 c00dc94:	e0bffc17 	ldw	r2,-16(fp)
 c00dc98:	10800017 	ldw	r2,0(r2)
 c00dc9c:	10800717 	ldw	r2,28(r2)
 c00dca0:	e1bfff17 	ldw	r6,-4(fp)
 c00dca4:	e17ffe17 	ldw	r5,-8(fp)
 c00dca8:	e13ffc17 	ldw	r4,-16(fp)
 c00dcac:	103ee83a 	callr	r2
 c00dcb0:	e0bffb15 	stw	r2,-20(fp)
 c00dcb4:	00000506 	br	c00dccc <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 c00dcb8:	00bfde84 	movi	r2,-134
 c00dcbc:	e0bffb15 	stw	r2,-20(fp)
 c00dcc0:	00000206 	br	c00dccc <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 c00dcc4:	00bfebc4 	movi	r2,-81
 c00dcc8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 c00dccc:	e0bffb17 	ldw	r2,-20(fp)
 c00dcd0:	1000070e 	bge	r2,zero,c00dcf0 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 c00dcd4:	c00dbf00 	call	c00dbf0 <alt_get_errno>
 c00dcd8:	1007883a 	mov	r3,r2
 c00dcdc:	e0bffb17 	ldw	r2,-20(fp)
 c00dce0:	0085c83a 	sub	r2,zero,r2
 c00dce4:	18800015 	stw	r2,0(r3)
    rc = -1;
 c00dce8:	00bfffc4 	movi	r2,-1
 c00dcec:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 c00dcf0:	e0bffb17 	ldw	r2,-20(fp)
}
 c00dcf4:	e037883a 	mov	sp,fp
 c00dcf8:	dfc00117 	ldw	ra,4(sp)
 c00dcfc:	df000017 	ldw	fp,0(sp)
 c00dd00:	dec00204 	addi	sp,sp,8
 c00dd04:	f800283a 	ret

0c00dd08 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 c00dd08:	defffd04 	addi	sp,sp,-12
 c00dd0c:	dfc00215 	stw	ra,8(sp)
 c00dd10:	df000115 	stw	fp,4(sp)
 c00dd14:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 c00dd18:	0009883a 	mov	r4,zero
 c00dd1c:	c00e1e00 	call	c00e1e0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 c00dd20:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 c00dd24:	c00e2180 	call	c00e218 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 c00dd28:	01830074 	movhi	r6,3073
 c00dd2c:	31814104 	addi	r6,r6,1284
 c00dd30:	01430074 	movhi	r5,3073
 c00dd34:	29414104 	addi	r5,r5,1284
 c00dd38:	01030074 	movhi	r4,3073
 c00dd3c:	21014104 	addi	r4,r4,1284
 c00dd40:	c00f5c00 	call	c00f5c0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 c00dd44:	c00f15c0 	call	c00f15c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 c00dd48:	01030074 	movhi	r4,3073
 c00dd4c:	213c6f04 	addi	r4,r4,-3652
 c00dd50:	c00fd800 	call	c00fd80 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 c00dd54:	d0a6d617 	ldw	r2,-25768(gp)
 c00dd58:	d0e6d717 	ldw	r3,-25764(gp)
 c00dd5c:	d126d817 	ldw	r4,-25760(gp)
 c00dd60:	200d883a 	mov	r6,r4
 c00dd64:	180b883a 	mov	r5,r3
 c00dd68:	1009883a 	mov	r4,r2
 c00dd6c:	c00026c0 	call	c00026c <main>
 c00dd70:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 c00dd74:	01000044 	movi	r4,1
 c00dd78:	c00d8240 	call	c00d824 <close>
  exit (result);
 c00dd7c:	e13fff17 	ldw	r4,-4(fp)
 c00dd80:	c00fd940 	call	c00fd94 <exit>

0c00dd84 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 c00dd84:	defffe04 	addi	sp,sp,-8
 c00dd88:	df000115 	stw	fp,4(sp)
 c00dd8c:	df000104 	addi	fp,sp,4
 c00dd90:	e13fff15 	stw	r4,-4(fp)
}
 c00dd94:	0001883a 	nop
 c00dd98:	e037883a 	mov	sp,fp
 c00dd9c:	df000017 	ldw	fp,0(sp)
 c00dda0:	dec00104 	addi	sp,sp,4
 c00dda4:	f800283a 	ret

0c00dda8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 c00dda8:	defffe04 	addi	sp,sp,-8
 c00ddac:	df000115 	stw	fp,4(sp)
 c00ddb0:	df000104 	addi	fp,sp,4
 c00ddb4:	e13fff15 	stw	r4,-4(fp)
}
 c00ddb8:	0001883a 	nop
 c00ddbc:	e037883a 	mov	sp,fp
 c00ddc0:	df000017 	ldw	fp,0(sp)
 c00ddc4:	dec00104 	addi	sp,sp,4
 c00ddc8:	f800283a 	ret

0c00ddcc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c00ddcc:	defffe04 	addi	sp,sp,-8
 c00ddd0:	dfc00115 	stw	ra,4(sp)
 c00ddd4:	df000015 	stw	fp,0(sp)
 c00ddd8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 c00dddc:	d0a00d17 	ldw	r2,-32716(gp)
 c00dde0:	10000326 	beq	r2,zero,c00ddf0 <alt_get_errno+0x24>
 c00dde4:	d0a00d17 	ldw	r2,-32716(gp)
 c00dde8:	103ee83a 	callr	r2
 c00ddec:	00000106 	br	c00ddf4 <alt_get_errno+0x28>
 c00ddf0:	d0a6d504 	addi	r2,gp,-25772
}
 c00ddf4:	e037883a 	mov	sp,fp
 c00ddf8:	dfc00117 	ldw	ra,4(sp)
 c00ddfc:	df000017 	ldw	fp,0(sp)
 c00de00:	dec00204 	addi	sp,sp,8
 c00de04:	f800283a 	ret

0c00de08 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 c00de08:	defff904 	addi	sp,sp,-28
 c00de0c:	dfc00615 	stw	ra,24(sp)
 c00de10:	df000515 	stw	fp,20(sp)
 c00de14:	df000504 	addi	fp,sp,20
 c00de18:	e13ffd15 	stw	r4,-12(fp)
 c00de1c:	e17ffe15 	stw	r5,-8(fp)
 c00de20:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 c00de24:	e0bffd17 	ldw	r2,-12(fp)
 c00de28:	10000816 	blt	r2,zero,c00de4c <read+0x44>
 c00de2c:	01400304 	movi	r5,12
 c00de30:	e13ffd17 	ldw	r4,-12(fp)
 c00de34:	c00097c0 	call	c00097c <__mulsi3>
 c00de38:	1007883a 	mov	r3,r2
 c00de3c:	00830074 	movhi	r2,3073
 c00de40:	10837e04 	addi	r2,r2,3576
 c00de44:	1885883a 	add	r2,r3,r2
 c00de48:	00000106 	br	c00de50 <read+0x48>
 c00de4c:	0005883a 	mov	r2,zero
 c00de50:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 c00de54:	e0bffb17 	ldw	r2,-20(fp)
 c00de58:	10002226 	beq	r2,zero,c00dee4 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 c00de5c:	e0bffb17 	ldw	r2,-20(fp)
 c00de60:	10800217 	ldw	r2,8(r2)
 c00de64:	108000cc 	andi	r2,r2,3
 c00de68:	10800060 	cmpeqi	r2,r2,1
 c00de6c:	1000181e 	bne	r2,zero,c00ded0 <read+0xc8>
        (fd->dev->read))
 c00de70:	e0bffb17 	ldw	r2,-20(fp)
 c00de74:	10800017 	ldw	r2,0(r2)
 c00de78:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 c00de7c:	10001426 	beq	r2,zero,c00ded0 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 c00de80:	e0bffb17 	ldw	r2,-20(fp)
 c00de84:	10800017 	ldw	r2,0(r2)
 c00de88:	10800517 	ldw	r2,20(r2)
 c00de8c:	e0ffff17 	ldw	r3,-4(fp)
 c00de90:	180d883a 	mov	r6,r3
 c00de94:	e17ffe17 	ldw	r5,-8(fp)
 c00de98:	e13ffb17 	ldw	r4,-20(fp)
 c00de9c:	103ee83a 	callr	r2
 c00dea0:	e0bffc15 	stw	r2,-16(fp)
 c00dea4:	e0bffc17 	ldw	r2,-16(fp)
 c00dea8:	1000070e 	bge	r2,zero,c00dec8 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 c00deac:	c00ddcc0 	call	c00ddcc <alt_get_errno>
 c00deb0:	1007883a 	mov	r3,r2
 c00deb4:	e0bffc17 	ldw	r2,-16(fp)
 c00deb8:	0085c83a 	sub	r2,zero,r2
 c00debc:	18800015 	stw	r2,0(r3)
          return -1;
 c00dec0:	00bfffc4 	movi	r2,-1
 c00dec4:	00000c06 	br	c00def8 <read+0xf0>
        }
        return rval;
 c00dec8:	e0bffc17 	ldw	r2,-16(fp)
 c00decc:	00000a06 	br	c00def8 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 c00ded0:	c00ddcc0 	call	c00ddcc <alt_get_errno>
 c00ded4:	1007883a 	mov	r3,r2
 c00ded8:	00800344 	movi	r2,13
 c00dedc:	18800015 	stw	r2,0(r3)
 c00dee0:	00000406 	br	c00def4 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 c00dee4:	c00ddcc0 	call	c00ddcc <alt_get_errno>
 c00dee8:	1007883a 	mov	r3,r2
 c00deec:	00801444 	movi	r2,81
 c00def0:	18800015 	stw	r2,0(r3)
  }
  return -1;
 c00def4:	00bfffc4 	movi	r2,-1
}
 c00def8:	e037883a 	mov	sp,fp
 c00defc:	dfc00117 	ldw	ra,4(sp)
 c00df00:	df000017 	ldw	fp,0(sp)
 c00df04:	dec00204 	addi	sp,sp,8
 c00df08:	f800283a 	ret

0c00df0c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 c00df0c:	defffc04 	addi	sp,sp,-16
 c00df10:	dfc00315 	stw	ra,12(sp)
 c00df14:	df000215 	stw	fp,8(sp)
 c00df18:	dc000115 	stw	r16,4(sp)
 c00df1c:	df000204 	addi	fp,sp,8
 c00df20:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 c00df24:	e0bffe17 	ldw	r2,-8(fp)
 c00df28:	108000d0 	cmplti	r2,r2,3
 c00df2c:	1000111e 	bne	r2,zero,c00df74 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 c00df30:	04030074 	movhi	r16,3073
 c00df34:	84037e04 	addi	r16,r16,3576
 c00df38:	e0bffe17 	ldw	r2,-8(fp)
 c00df3c:	01400304 	movi	r5,12
 c00df40:	1009883a 	mov	r4,r2
 c00df44:	c00097c0 	call	c00097c <__mulsi3>
 c00df48:	8085883a 	add	r2,r16,r2
 c00df4c:	10800204 	addi	r2,r2,8
 c00df50:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 c00df54:	04030074 	movhi	r16,3073
 c00df58:	84037e04 	addi	r16,r16,3576
 c00df5c:	e0bffe17 	ldw	r2,-8(fp)
 c00df60:	01400304 	movi	r5,12
 c00df64:	1009883a 	mov	r4,r2
 c00df68:	c00097c0 	call	c00097c <__mulsi3>
 c00df6c:	8085883a 	add	r2,r16,r2
 c00df70:	10000015 	stw	zero,0(r2)
  }
}
 c00df74:	0001883a 	nop
 c00df78:	e6ffff04 	addi	sp,fp,-4
 c00df7c:	dfc00217 	ldw	ra,8(sp)
 c00df80:	df000117 	ldw	fp,4(sp)
 c00df84:	dc000017 	ldw	r16,0(sp)
 c00df88:	dec00304 	addi	sp,sp,12
 c00df8c:	f800283a 	ret

0c00df90 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 c00df90:	defff904 	addi	sp,sp,-28
 c00df94:	df000615 	stw	fp,24(sp)
 c00df98:	df000604 	addi	fp,sp,24
 c00df9c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c00dfa0:	0005303a 	rdctl	r2,status
 c00dfa4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c00dfa8:	e0fffe17 	ldw	r3,-8(fp)
 c00dfac:	00bfff84 	movi	r2,-2
 c00dfb0:	1884703a 	and	r2,r3,r2
 c00dfb4:	1001703a 	wrctl	status,r2
  
  return context;
 c00dfb8:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 c00dfbc:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 c00dfc0:	d0a00e17 	ldw	r2,-32712(gp)
 c00dfc4:	10c000c4 	addi	r3,r2,3
 c00dfc8:	00bfff04 	movi	r2,-4
 c00dfcc:	1884703a 	and	r2,r3,r2
 c00dfd0:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 c00dfd4:	d0e00e17 	ldw	r3,-32712(gp)
 c00dfd8:	e0bfff17 	ldw	r2,-4(fp)
 c00dfdc:	1887883a 	add	r3,r3,r2
 c00dfe0:	00840034 	movhi	r2,4096
 c00dfe4:	10800004 	addi	r2,r2,0
 c00dfe8:	10c0062e 	bgeu	r2,r3,c00e004 <sbrk+0x74>
 c00dfec:	e0bffb17 	ldw	r2,-20(fp)
 c00dff0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c00dff4:	e0bffa17 	ldw	r2,-24(fp)
 c00dff8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 c00dffc:	00bfffc4 	movi	r2,-1
 c00e000:	00000b06 	br	c00e030 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 c00e004:	d0a00e17 	ldw	r2,-32712(gp)
 c00e008:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 c00e00c:	d0e00e17 	ldw	r3,-32712(gp)
 c00e010:	e0bfff17 	ldw	r2,-4(fp)
 c00e014:	1885883a 	add	r2,r3,r2
 c00e018:	d0a00e15 	stw	r2,-32712(gp)
 c00e01c:	e0bffb17 	ldw	r2,-20(fp)
 c00e020:	e0bffc15 	stw	r2,-16(fp)
 c00e024:	e0bffc17 	ldw	r2,-16(fp)
 c00e028:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 c00e02c:	e0bffd17 	ldw	r2,-12(fp)
} 
 c00e030:	e037883a 	mov	sp,fp
 c00e034:	df000017 	ldw	fp,0(sp)
 c00e038:	dec00104 	addi	sp,sp,4
 c00e03c:	f800283a 	ret

0c00e040 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 c00e040:	defffd04 	addi	sp,sp,-12
 c00e044:	dfc00215 	stw	ra,8(sp)
 c00e048:	df000115 	stw	fp,4(sp)
 c00e04c:	df000104 	addi	fp,sp,4
 c00e050:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 c00e054:	e13fff17 	ldw	r4,-4(fp)
 c00e058:	c00ef040 	call	c00ef04 <alt_busy_sleep>
}
 c00e05c:	e037883a 	mov	sp,fp
 c00e060:	dfc00117 	ldw	ra,4(sp)
 c00e064:	df000017 	ldw	fp,0(sp)
 c00e068:	dec00204 	addi	sp,sp,8
 c00e06c:	f800283a 	ret

0c00e070 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c00e070:	defffe04 	addi	sp,sp,-8
 c00e074:	dfc00115 	stw	ra,4(sp)
 c00e078:	df000015 	stw	fp,0(sp)
 c00e07c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 c00e080:	d0a00d17 	ldw	r2,-32716(gp)
 c00e084:	10000326 	beq	r2,zero,c00e094 <alt_get_errno+0x24>
 c00e088:	d0a00d17 	ldw	r2,-32716(gp)
 c00e08c:	103ee83a 	callr	r2
 c00e090:	00000106 	br	c00e098 <alt_get_errno+0x28>
 c00e094:	d0a6d504 	addi	r2,gp,-25772
}
 c00e098:	e037883a 	mov	sp,fp
 c00e09c:	dfc00117 	ldw	ra,4(sp)
 c00e0a0:	df000017 	ldw	fp,0(sp)
 c00e0a4:	dec00204 	addi	sp,sp,8
 c00e0a8:	f800283a 	ret

0c00e0ac <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 c00e0ac:	defff904 	addi	sp,sp,-28
 c00e0b0:	dfc00615 	stw	ra,24(sp)
 c00e0b4:	df000515 	stw	fp,20(sp)
 c00e0b8:	df000504 	addi	fp,sp,20
 c00e0bc:	e13ffd15 	stw	r4,-12(fp)
 c00e0c0:	e17ffe15 	stw	r5,-8(fp)
 c00e0c4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 c00e0c8:	e0bffd17 	ldw	r2,-12(fp)
 c00e0cc:	10000816 	blt	r2,zero,c00e0f0 <write+0x44>
 c00e0d0:	01400304 	movi	r5,12
 c00e0d4:	e13ffd17 	ldw	r4,-12(fp)
 c00e0d8:	c00097c0 	call	c00097c <__mulsi3>
 c00e0dc:	1007883a 	mov	r3,r2
 c00e0e0:	00830074 	movhi	r2,3073
 c00e0e4:	10837e04 	addi	r2,r2,3576
 c00e0e8:	1885883a 	add	r2,r3,r2
 c00e0ec:	00000106 	br	c00e0f4 <write+0x48>
 c00e0f0:	0005883a 	mov	r2,zero
 c00e0f4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 c00e0f8:	e0bffb17 	ldw	r2,-20(fp)
 c00e0fc:	10002126 	beq	r2,zero,c00e184 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 c00e100:	e0bffb17 	ldw	r2,-20(fp)
 c00e104:	10800217 	ldw	r2,8(r2)
 c00e108:	108000cc 	andi	r2,r2,3
 c00e10c:	10001826 	beq	r2,zero,c00e170 <write+0xc4>
 c00e110:	e0bffb17 	ldw	r2,-20(fp)
 c00e114:	10800017 	ldw	r2,0(r2)
 c00e118:	10800617 	ldw	r2,24(r2)
 c00e11c:	10001426 	beq	r2,zero,c00e170 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 c00e120:	e0bffb17 	ldw	r2,-20(fp)
 c00e124:	10800017 	ldw	r2,0(r2)
 c00e128:	10800617 	ldw	r2,24(r2)
 c00e12c:	e0ffff17 	ldw	r3,-4(fp)
 c00e130:	180d883a 	mov	r6,r3
 c00e134:	e17ffe17 	ldw	r5,-8(fp)
 c00e138:	e13ffb17 	ldw	r4,-20(fp)
 c00e13c:	103ee83a 	callr	r2
 c00e140:	e0bffc15 	stw	r2,-16(fp)
 c00e144:	e0bffc17 	ldw	r2,-16(fp)
 c00e148:	1000070e 	bge	r2,zero,c00e168 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 c00e14c:	c00e0700 	call	c00e070 <alt_get_errno>
 c00e150:	1007883a 	mov	r3,r2
 c00e154:	e0bffc17 	ldw	r2,-16(fp)
 c00e158:	0085c83a 	sub	r2,zero,r2
 c00e15c:	18800015 	stw	r2,0(r3)
        return -1;
 c00e160:	00bfffc4 	movi	r2,-1
 c00e164:	00000c06 	br	c00e198 <write+0xec>
      }
      return rval;
 c00e168:	e0bffc17 	ldw	r2,-16(fp)
 c00e16c:	00000a06 	br	c00e198 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 c00e170:	c00e0700 	call	c00e070 <alt_get_errno>
 c00e174:	1007883a 	mov	r3,r2
 c00e178:	00800344 	movi	r2,13
 c00e17c:	18800015 	stw	r2,0(r3)
 c00e180:	00000406 	br	c00e194 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 c00e184:	c00e0700 	call	c00e070 <alt_get_errno>
 c00e188:	1007883a 	mov	r3,r2
 c00e18c:	00801444 	movi	r2,81
 c00e190:	18800015 	stw	r2,0(r3)
  }
  return -1;
 c00e194:	00bfffc4 	movi	r2,-1
}
 c00e198:	e037883a 	mov	sp,fp
 c00e19c:	dfc00117 	ldw	ra,4(sp)
 c00e1a0:	df000017 	ldw	fp,0(sp)
 c00e1a4:	dec00204 	addi	sp,sp,8
 c00e1a8:	f800283a 	ret

0c00e1ac <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 c00e1ac:	defffd04 	addi	sp,sp,-12
 c00e1b0:	dfc00215 	stw	ra,8(sp)
 c00e1b4:	df000115 	stw	fp,4(sp)
 c00e1b8:	df000104 	addi	fp,sp,4
 c00e1bc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 c00e1c0:	d1600a04 	addi	r5,gp,-32728
 c00e1c4:	e13fff17 	ldw	r4,-4(fp)
 c00e1c8:	c00f0b80 	call	c00f0b8 <alt_dev_llist_insert>
}
 c00e1cc:	e037883a 	mov	sp,fp
 c00e1d0:	dfc00117 	ldw	ra,4(sp)
 c00e1d4:	df000017 	ldw	fp,0(sp)
 c00e1d8:	dec00204 	addi	sp,sp,8
 c00e1dc:	f800283a 	ret

0c00e1e0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 c00e1e0:	defffd04 	addi	sp,sp,-12
 c00e1e4:	dfc00215 	stw	ra,8(sp)
 c00e1e8:	df000115 	stw	fp,4(sp)
 c00e1ec:	df000104 	addi	fp,sp,4
 c00e1f0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 c00e1f4:	c00fa640 	call	c00fa64 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 c00e1f8:	00800044 	movi	r2,1
 c00e1fc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 c00e200:	0001883a 	nop
 c00e204:	e037883a 	mov	sp,fp
 c00e208:	dfc00117 	ldw	ra,4(sp)
 c00e20c:	df000017 	ldw	fp,0(sp)
 c00e210:	dec00204 	addi	sp,sp,8
 c00e214:	f800283a 	ret

0c00e218 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 c00e218:	defffe04 	addi	sp,sp,-8
 c00e21c:	dfc00115 	stw	ra,4(sp)
 c00e220:	df000015 	stw	fp,0(sp)
 c00e224:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 c00e228:	01c0fa04 	movi	r7,1000
 c00e22c:	01800084 	movi	r6,2
 c00e230:	000b883a 	mov	r5,zero
 c00e234:	01003004 	movi	r4,192
 c00e238:	c00ed5c0 	call	c00ed5c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 c00e23c:	01800044 	movi	r6,1
 c00e240:	000b883a 	mov	r5,zero
 c00e244:	01030074 	movhi	r4,3073
 c00e248:	2103e804 	addi	r4,r4,4000
 c00e24c:	c00e3e00 	call	c00e3e0 <altera_avalon_jtag_uart_init>
 c00e250:	01030074 	movhi	r4,3073
 c00e254:	2103de04 	addi	r4,r4,3960
 c00e258:	c00e1ac0 	call	c00e1ac <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
 c00e25c:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 c00e260:	0001883a 	nop
}
 c00e264:	0001883a 	nop
 c00e268:	e037883a 	mov	sp,fp
 c00e26c:	dfc00117 	ldw	ra,4(sp)
 c00e270:	df000017 	ldw	fp,0(sp)
 c00e274:	dec00204 	addi	sp,sp,8
 c00e278:	f800283a 	ret

0c00e27c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 c00e27c:	defffa04 	addi	sp,sp,-24
 c00e280:	dfc00515 	stw	ra,20(sp)
 c00e284:	df000415 	stw	fp,16(sp)
 c00e288:	df000404 	addi	fp,sp,16
 c00e28c:	e13ffd15 	stw	r4,-12(fp)
 c00e290:	e17ffe15 	stw	r5,-8(fp)
 c00e294:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 c00e298:	e0bffd17 	ldw	r2,-12(fp)
 c00e29c:	10800017 	ldw	r2,0(r2)
 c00e2a0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 c00e2a4:	e0bffc17 	ldw	r2,-16(fp)
 c00e2a8:	10c00a04 	addi	r3,r2,40
 c00e2ac:	e0bffd17 	ldw	r2,-12(fp)
 c00e2b0:	10800217 	ldw	r2,8(r2)
 c00e2b4:	100f883a 	mov	r7,r2
 c00e2b8:	e1bfff17 	ldw	r6,-4(fp)
 c00e2bc:	e17ffe17 	ldw	r5,-8(fp)
 c00e2c0:	1809883a 	mov	r4,r3
 c00e2c4:	c00e8a40 	call	c00e8a4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 c00e2c8:	e037883a 	mov	sp,fp
 c00e2cc:	dfc00117 	ldw	ra,4(sp)
 c00e2d0:	df000017 	ldw	fp,0(sp)
 c00e2d4:	dec00204 	addi	sp,sp,8
 c00e2d8:	f800283a 	ret

0c00e2dc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 c00e2dc:	defffa04 	addi	sp,sp,-24
 c00e2e0:	dfc00515 	stw	ra,20(sp)
 c00e2e4:	df000415 	stw	fp,16(sp)
 c00e2e8:	df000404 	addi	fp,sp,16
 c00e2ec:	e13ffd15 	stw	r4,-12(fp)
 c00e2f0:	e17ffe15 	stw	r5,-8(fp)
 c00e2f4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 c00e2f8:	e0bffd17 	ldw	r2,-12(fp)
 c00e2fc:	10800017 	ldw	r2,0(r2)
 c00e300:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 c00e304:	e0bffc17 	ldw	r2,-16(fp)
 c00e308:	10c00a04 	addi	r3,r2,40
 c00e30c:	e0bffd17 	ldw	r2,-12(fp)
 c00e310:	10800217 	ldw	r2,8(r2)
 c00e314:	100f883a 	mov	r7,r2
 c00e318:	e1bfff17 	ldw	r6,-4(fp)
 c00e31c:	e17ffe17 	ldw	r5,-8(fp)
 c00e320:	1809883a 	mov	r4,r3
 c00e324:	c00eac00 	call	c00eac0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 c00e328:	e037883a 	mov	sp,fp
 c00e32c:	dfc00117 	ldw	ra,4(sp)
 c00e330:	df000017 	ldw	fp,0(sp)
 c00e334:	dec00204 	addi	sp,sp,8
 c00e338:	f800283a 	ret

0c00e33c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 c00e33c:	defffc04 	addi	sp,sp,-16
 c00e340:	dfc00315 	stw	ra,12(sp)
 c00e344:	df000215 	stw	fp,8(sp)
 c00e348:	df000204 	addi	fp,sp,8
 c00e34c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 c00e350:	e0bfff17 	ldw	r2,-4(fp)
 c00e354:	10800017 	ldw	r2,0(r2)
 c00e358:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 c00e35c:	e0bffe17 	ldw	r2,-8(fp)
 c00e360:	10c00a04 	addi	r3,r2,40
 c00e364:	e0bfff17 	ldw	r2,-4(fp)
 c00e368:	10800217 	ldw	r2,8(r2)
 c00e36c:	100b883a 	mov	r5,r2
 c00e370:	1809883a 	mov	r4,r3
 c00e374:	c00e74c0 	call	c00e74c <altera_avalon_jtag_uart_close>
}
 c00e378:	e037883a 	mov	sp,fp
 c00e37c:	dfc00117 	ldw	ra,4(sp)
 c00e380:	df000017 	ldw	fp,0(sp)
 c00e384:	dec00204 	addi	sp,sp,8
 c00e388:	f800283a 	ret

0c00e38c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 c00e38c:	defffa04 	addi	sp,sp,-24
 c00e390:	dfc00515 	stw	ra,20(sp)
 c00e394:	df000415 	stw	fp,16(sp)
 c00e398:	df000404 	addi	fp,sp,16
 c00e39c:	e13ffd15 	stw	r4,-12(fp)
 c00e3a0:	e17ffe15 	stw	r5,-8(fp)
 c00e3a4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 c00e3a8:	e0bffd17 	ldw	r2,-12(fp)
 c00e3ac:	10800017 	ldw	r2,0(r2)
 c00e3b0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 c00e3b4:	e0bffc17 	ldw	r2,-16(fp)
 c00e3b8:	10800a04 	addi	r2,r2,40
 c00e3bc:	e1bfff17 	ldw	r6,-4(fp)
 c00e3c0:	e17ffe17 	ldw	r5,-8(fp)
 c00e3c4:	1009883a 	mov	r4,r2
 c00e3c8:	c00e7b40 	call	c00e7b4 <altera_avalon_jtag_uart_ioctl>
}
 c00e3cc:	e037883a 	mov	sp,fp
 c00e3d0:	dfc00117 	ldw	ra,4(sp)
 c00e3d4:	df000017 	ldw	fp,0(sp)
 c00e3d8:	dec00204 	addi	sp,sp,8
 c00e3dc:	f800283a 	ret

0c00e3e0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 c00e3e0:	defffa04 	addi	sp,sp,-24
 c00e3e4:	dfc00515 	stw	ra,20(sp)
 c00e3e8:	df000415 	stw	fp,16(sp)
 c00e3ec:	df000404 	addi	fp,sp,16
 c00e3f0:	e13ffd15 	stw	r4,-12(fp)
 c00e3f4:	e17ffe15 	stw	r5,-8(fp)
 c00e3f8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 c00e3fc:	e0bffd17 	ldw	r2,-12(fp)
 c00e400:	00c00044 	movi	r3,1
 c00e404:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 c00e408:	e0bffd17 	ldw	r2,-12(fp)
 c00e40c:	10800017 	ldw	r2,0(r2)
 c00e410:	10800104 	addi	r2,r2,4
 c00e414:	1007883a 	mov	r3,r2
 c00e418:	e0bffd17 	ldw	r2,-12(fp)
 c00e41c:	10800817 	ldw	r2,32(r2)
 c00e420:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 c00e424:	e0bffe17 	ldw	r2,-8(fp)
 c00e428:	e0ffff17 	ldw	r3,-4(fp)
 c00e42c:	d8000015 	stw	zero,0(sp)
 c00e430:	e1fffd17 	ldw	r7,-12(fp)
 c00e434:	01830074 	movhi	r6,3073
 c00e438:	31b92804 	addi	r6,r6,-7008
 c00e43c:	180b883a 	mov	r5,r3
 c00e440:	1009883a 	mov	r4,r2
 c00e444:	c00f23c0 	call	c00f23c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 c00e448:	e0bffd17 	ldw	r2,-12(fp)
 c00e44c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 c00e450:	e0bffd17 	ldw	r2,-12(fp)
 c00e454:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 c00e458:	d0e6da17 	ldw	r3,-25752(gp)
 c00e45c:	e1fffd17 	ldw	r7,-12(fp)
 c00e460:	01830074 	movhi	r6,3073
 c00e464:	31b9ab04 	addi	r6,r6,-6484
 c00e468:	180b883a 	mov	r5,r3
 c00e46c:	1009883a 	mov	r4,r2
 c00e470:	c00edd80 	call	c00edd8 <alt_alarm_start>
 c00e474:	1000040e 	bge	r2,zero,c00e488 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 c00e478:	e0fffd17 	ldw	r3,-12(fp)
 c00e47c:	00a00034 	movhi	r2,32768
 c00e480:	10bfffc4 	addi	r2,r2,-1
 c00e484:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 c00e488:	0001883a 	nop
 c00e48c:	e037883a 	mov	sp,fp
 c00e490:	dfc00117 	ldw	ra,4(sp)
 c00e494:	df000017 	ldw	fp,0(sp)
 c00e498:	dec00204 	addi	sp,sp,8
 c00e49c:	f800283a 	ret

0c00e4a0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 c00e4a0:	defff804 	addi	sp,sp,-32
 c00e4a4:	df000715 	stw	fp,28(sp)
 c00e4a8:	df000704 	addi	fp,sp,28
 c00e4ac:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 c00e4b0:	e0bfff17 	ldw	r2,-4(fp)
 c00e4b4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 c00e4b8:	e0bffb17 	ldw	r2,-20(fp)
 c00e4bc:	10800017 	ldw	r2,0(r2)
 c00e4c0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 c00e4c4:	e0bffc17 	ldw	r2,-16(fp)
 c00e4c8:	10800104 	addi	r2,r2,4
 c00e4cc:	10800037 	ldwio	r2,0(r2)
 c00e4d0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 c00e4d4:	e0bffd17 	ldw	r2,-12(fp)
 c00e4d8:	1080c00c 	andi	r2,r2,768
 c00e4dc:	10006d26 	beq	r2,zero,c00e694 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 c00e4e0:	e0bffd17 	ldw	r2,-12(fp)
 c00e4e4:	1080400c 	andi	r2,r2,256
 c00e4e8:	10003526 	beq	r2,zero,c00e5c0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 c00e4ec:	00800074 	movhi	r2,1
 c00e4f0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 c00e4f4:	e0bffb17 	ldw	r2,-20(fp)
 c00e4f8:	10800a17 	ldw	r2,40(r2)
 c00e4fc:	10800044 	addi	r2,r2,1
 c00e500:	1081ffcc 	andi	r2,r2,2047
 c00e504:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 c00e508:	e0bffb17 	ldw	r2,-20(fp)
 c00e50c:	10c00b17 	ldw	r3,44(r2)
 c00e510:	e0bffe17 	ldw	r2,-8(fp)
 c00e514:	18801526 	beq	r3,r2,c00e56c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 c00e518:	e0bffc17 	ldw	r2,-16(fp)
 c00e51c:	10800037 	ldwio	r2,0(r2)
 c00e520:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 c00e524:	e0bff917 	ldw	r2,-28(fp)
 c00e528:	10a0000c 	andi	r2,r2,32768
 c00e52c:	10001126 	beq	r2,zero,c00e574 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 c00e530:	e0bffb17 	ldw	r2,-20(fp)
 c00e534:	10800a17 	ldw	r2,40(r2)
 c00e538:	e0fff917 	ldw	r3,-28(fp)
 c00e53c:	1809883a 	mov	r4,r3
 c00e540:	e0fffb17 	ldw	r3,-20(fp)
 c00e544:	1885883a 	add	r2,r3,r2
 c00e548:	10800e04 	addi	r2,r2,56
 c00e54c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 c00e550:	e0bffb17 	ldw	r2,-20(fp)
 c00e554:	10800a17 	ldw	r2,40(r2)
 c00e558:	10800044 	addi	r2,r2,1
 c00e55c:	10c1ffcc 	andi	r3,r2,2047
 c00e560:	e0bffb17 	ldw	r2,-20(fp)
 c00e564:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 c00e568:	003fe206 	br	c00e4f4 <__alt_data_end+0xfc00e4f4>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 c00e56c:	0001883a 	nop
 c00e570:	00000106 	br	c00e578 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 c00e574:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 c00e578:	e0bff917 	ldw	r2,-28(fp)
 c00e57c:	10bfffec 	andhi	r2,r2,65535
 c00e580:	10000f26 	beq	r2,zero,c00e5c0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 c00e584:	e0bffb17 	ldw	r2,-20(fp)
 c00e588:	10c00817 	ldw	r3,32(r2)
 c00e58c:	00bfff84 	movi	r2,-2
 c00e590:	1886703a 	and	r3,r3,r2
 c00e594:	e0bffb17 	ldw	r2,-20(fp)
 c00e598:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 c00e59c:	e0bffc17 	ldw	r2,-16(fp)
 c00e5a0:	10800104 	addi	r2,r2,4
 c00e5a4:	1007883a 	mov	r3,r2
 c00e5a8:	e0bffb17 	ldw	r2,-20(fp)
 c00e5ac:	10800817 	ldw	r2,32(r2)
 c00e5b0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 c00e5b4:	e0bffc17 	ldw	r2,-16(fp)
 c00e5b8:	10800104 	addi	r2,r2,4
 c00e5bc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 c00e5c0:	e0bffd17 	ldw	r2,-12(fp)
 c00e5c4:	1080800c 	andi	r2,r2,512
 c00e5c8:	103fbe26 	beq	r2,zero,c00e4c4 <__alt_data_end+0xfc00e4c4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 c00e5cc:	e0bffd17 	ldw	r2,-12(fp)
 c00e5d0:	1004d43a 	srli	r2,r2,16
 c00e5d4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 c00e5d8:	00001406 	br	c00e62c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 c00e5dc:	e0bffc17 	ldw	r2,-16(fp)
 c00e5e0:	e0fffb17 	ldw	r3,-20(fp)
 c00e5e4:	18c00d17 	ldw	r3,52(r3)
 c00e5e8:	e13ffb17 	ldw	r4,-20(fp)
 c00e5ec:	20c7883a 	add	r3,r4,r3
 c00e5f0:	18c20e04 	addi	r3,r3,2104
 c00e5f4:	18c00003 	ldbu	r3,0(r3)
 c00e5f8:	18c03fcc 	andi	r3,r3,255
 c00e5fc:	18c0201c 	xori	r3,r3,128
 c00e600:	18ffe004 	addi	r3,r3,-128
 c00e604:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 c00e608:	e0bffb17 	ldw	r2,-20(fp)
 c00e60c:	10800d17 	ldw	r2,52(r2)
 c00e610:	10800044 	addi	r2,r2,1
 c00e614:	10c1ffcc 	andi	r3,r2,2047
 c00e618:	e0bffb17 	ldw	r2,-20(fp)
 c00e61c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 c00e620:	e0bffa17 	ldw	r2,-24(fp)
 c00e624:	10bfffc4 	addi	r2,r2,-1
 c00e628:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 c00e62c:	e0bffa17 	ldw	r2,-24(fp)
 c00e630:	10000526 	beq	r2,zero,c00e648 <altera_avalon_jtag_uart_irq+0x1a8>
 c00e634:	e0bffb17 	ldw	r2,-20(fp)
 c00e638:	10c00d17 	ldw	r3,52(r2)
 c00e63c:	e0bffb17 	ldw	r2,-20(fp)
 c00e640:	10800c17 	ldw	r2,48(r2)
 c00e644:	18bfe51e 	bne	r3,r2,c00e5dc <__alt_data_end+0xfc00e5dc>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 c00e648:	e0bffa17 	ldw	r2,-24(fp)
 c00e64c:	103f9d26 	beq	r2,zero,c00e4c4 <__alt_data_end+0xfc00e4c4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 c00e650:	e0bffb17 	ldw	r2,-20(fp)
 c00e654:	10c00817 	ldw	r3,32(r2)
 c00e658:	00bfff44 	movi	r2,-3
 c00e65c:	1886703a 	and	r3,r3,r2
 c00e660:	e0bffb17 	ldw	r2,-20(fp)
 c00e664:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 c00e668:	e0bffb17 	ldw	r2,-20(fp)
 c00e66c:	10800017 	ldw	r2,0(r2)
 c00e670:	10800104 	addi	r2,r2,4
 c00e674:	1007883a 	mov	r3,r2
 c00e678:	e0bffb17 	ldw	r2,-20(fp)
 c00e67c:	10800817 	ldw	r2,32(r2)
 c00e680:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 c00e684:	e0bffc17 	ldw	r2,-16(fp)
 c00e688:	10800104 	addi	r2,r2,4
 c00e68c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 c00e690:	003f8c06 	br	c00e4c4 <__alt_data_end+0xfc00e4c4>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 c00e694:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 c00e698:	0001883a 	nop
 c00e69c:	e037883a 	mov	sp,fp
 c00e6a0:	df000017 	ldw	fp,0(sp)
 c00e6a4:	dec00104 	addi	sp,sp,4
 c00e6a8:	f800283a 	ret

0c00e6ac <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 c00e6ac:	defff804 	addi	sp,sp,-32
 c00e6b0:	df000715 	stw	fp,28(sp)
 c00e6b4:	df000704 	addi	fp,sp,28
 c00e6b8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 c00e6bc:	e0bffb17 	ldw	r2,-20(fp)
 c00e6c0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 c00e6c4:	e0bff917 	ldw	r2,-28(fp)
 c00e6c8:	10800017 	ldw	r2,0(r2)
 c00e6cc:	10800104 	addi	r2,r2,4
 c00e6d0:	10800037 	ldwio	r2,0(r2)
 c00e6d4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 c00e6d8:	e0bffa17 	ldw	r2,-24(fp)
 c00e6dc:	1081000c 	andi	r2,r2,1024
 c00e6e0:	10000b26 	beq	r2,zero,c00e710 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 c00e6e4:	e0bff917 	ldw	r2,-28(fp)
 c00e6e8:	10800017 	ldw	r2,0(r2)
 c00e6ec:	10800104 	addi	r2,r2,4
 c00e6f0:	1007883a 	mov	r3,r2
 c00e6f4:	e0bff917 	ldw	r2,-28(fp)
 c00e6f8:	10800817 	ldw	r2,32(r2)
 c00e6fc:	10810014 	ori	r2,r2,1024
 c00e700:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 c00e704:	e0bff917 	ldw	r2,-28(fp)
 c00e708:	10000915 	stw	zero,36(r2)
 c00e70c:	00000a06 	br	c00e738 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 c00e710:	e0bff917 	ldw	r2,-28(fp)
 c00e714:	10c00917 	ldw	r3,36(r2)
 c00e718:	00a00034 	movhi	r2,32768
 c00e71c:	10bfff04 	addi	r2,r2,-4
 c00e720:	10c00536 	bltu	r2,r3,c00e738 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 c00e724:	e0bff917 	ldw	r2,-28(fp)
 c00e728:	10800917 	ldw	r2,36(r2)
 c00e72c:	10c00044 	addi	r3,r2,1
 c00e730:	e0bff917 	ldw	r2,-28(fp)
 c00e734:	10c00915 	stw	r3,36(r2)
 c00e738:	d0a6da17 	ldw	r2,-25752(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 c00e73c:	e037883a 	mov	sp,fp
 c00e740:	df000017 	ldw	fp,0(sp)
 c00e744:	dec00104 	addi	sp,sp,4
 c00e748:	f800283a 	ret

0c00e74c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 c00e74c:	defffd04 	addi	sp,sp,-12
 c00e750:	df000215 	stw	fp,8(sp)
 c00e754:	df000204 	addi	fp,sp,8
 c00e758:	e13ffe15 	stw	r4,-8(fp)
 c00e75c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 c00e760:	00000506 	br	c00e778 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 c00e764:	e0bfff17 	ldw	r2,-4(fp)
 c00e768:	1090000c 	andi	r2,r2,16384
 c00e76c:	10000226 	beq	r2,zero,c00e778 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 c00e770:	00bffd44 	movi	r2,-11
 c00e774:	00000b06 	br	c00e7a4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 c00e778:	e0bffe17 	ldw	r2,-8(fp)
 c00e77c:	10c00d17 	ldw	r3,52(r2)
 c00e780:	e0bffe17 	ldw	r2,-8(fp)
 c00e784:	10800c17 	ldw	r2,48(r2)
 c00e788:	18800526 	beq	r3,r2,c00e7a0 <altera_avalon_jtag_uart_close+0x54>
 c00e78c:	e0bffe17 	ldw	r2,-8(fp)
 c00e790:	10c00917 	ldw	r3,36(r2)
 c00e794:	e0bffe17 	ldw	r2,-8(fp)
 c00e798:	10800117 	ldw	r2,4(r2)
 c00e79c:	18bff136 	bltu	r3,r2,c00e764 <__alt_data_end+0xfc00e764>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 c00e7a0:	0005883a 	mov	r2,zero
}
 c00e7a4:	e037883a 	mov	sp,fp
 c00e7a8:	df000017 	ldw	fp,0(sp)
 c00e7ac:	dec00104 	addi	sp,sp,4
 c00e7b0:	f800283a 	ret

0c00e7b4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 c00e7b4:	defffa04 	addi	sp,sp,-24
 c00e7b8:	df000515 	stw	fp,20(sp)
 c00e7bc:	df000504 	addi	fp,sp,20
 c00e7c0:	e13ffd15 	stw	r4,-12(fp)
 c00e7c4:	e17ffe15 	stw	r5,-8(fp)
 c00e7c8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 c00e7cc:	00bff9c4 	movi	r2,-25
 c00e7d0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 c00e7d4:	e0bffe17 	ldw	r2,-8(fp)
 c00e7d8:	10da8060 	cmpeqi	r3,r2,27137
 c00e7dc:	1800031e 	bne	r3,zero,c00e7ec <altera_avalon_jtag_uart_ioctl+0x38>
 c00e7e0:	109a80a0 	cmpeqi	r2,r2,27138
 c00e7e4:	1000181e 	bne	r2,zero,c00e848 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 c00e7e8:	00002906 	br	c00e890 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 c00e7ec:	e0bffd17 	ldw	r2,-12(fp)
 c00e7f0:	10c00117 	ldw	r3,4(r2)
 c00e7f4:	00a00034 	movhi	r2,32768
 c00e7f8:	10bfffc4 	addi	r2,r2,-1
 c00e7fc:	18802126 	beq	r3,r2,c00e884 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 c00e800:	e0bfff17 	ldw	r2,-4(fp)
 c00e804:	10800017 	ldw	r2,0(r2)
 c00e808:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 c00e80c:	e0bffc17 	ldw	r2,-16(fp)
 c00e810:	10800090 	cmplti	r2,r2,2
 c00e814:	1000061e 	bne	r2,zero,c00e830 <altera_avalon_jtag_uart_ioctl+0x7c>
 c00e818:	e0fffc17 	ldw	r3,-16(fp)
 c00e81c:	00a00034 	movhi	r2,32768
 c00e820:	10bfffc4 	addi	r2,r2,-1
 c00e824:	18800226 	beq	r3,r2,c00e830 <altera_avalon_jtag_uart_ioctl+0x7c>
 c00e828:	e0bffc17 	ldw	r2,-16(fp)
 c00e82c:	00000206 	br	c00e838 <altera_avalon_jtag_uart_ioctl+0x84>
 c00e830:	00a00034 	movhi	r2,32768
 c00e834:	10bfff84 	addi	r2,r2,-2
 c00e838:	e0fffd17 	ldw	r3,-12(fp)
 c00e83c:	18800115 	stw	r2,4(r3)
      rc = 0;
 c00e840:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 c00e844:	00000f06 	br	c00e884 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 c00e848:	e0bffd17 	ldw	r2,-12(fp)
 c00e84c:	10c00117 	ldw	r3,4(r2)
 c00e850:	00a00034 	movhi	r2,32768
 c00e854:	10bfffc4 	addi	r2,r2,-1
 c00e858:	18800c26 	beq	r3,r2,c00e88c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 c00e85c:	e0bffd17 	ldw	r2,-12(fp)
 c00e860:	10c00917 	ldw	r3,36(r2)
 c00e864:	e0bffd17 	ldw	r2,-12(fp)
 c00e868:	10800117 	ldw	r2,4(r2)
 c00e86c:	1885803a 	cmpltu	r2,r3,r2
 c00e870:	10c03fcc 	andi	r3,r2,255
 c00e874:	e0bfff17 	ldw	r2,-4(fp)
 c00e878:	10c00015 	stw	r3,0(r2)
      rc = 0;
 c00e87c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 c00e880:	00000206 	br	c00e88c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 c00e884:	0001883a 	nop
 c00e888:	00000106 	br	c00e890 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 c00e88c:	0001883a 	nop

  default:
    break;
  }

  return rc;
 c00e890:	e0bffb17 	ldw	r2,-20(fp)
}
 c00e894:	e037883a 	mov	sp,fp
 c00e898:	df000017 	ldw	fp,0(sp)
 c00e89c:	dec00104 	addi	sp,sp,4
 c00e8a0:	f800283a 	ret

0c00e8a4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 c00e8a4:	defff304 	addi	sp,sp,-52
 c00e8a8:	dfc00c15 	stw	ra,48(sp)
 c00e8ac:	df000b15 	stw	fp,44(sp)
 c00e8b0:	df000b04 	addi	fp,sp,44
 c00e8b4:	e13ffc15 	stw	r4,-16(fp)
 c00e8b8:	e17ffd15 	stw	r5,-12(fp)
 c00e8bc:	e1bffe15 	stw	r6,-8(fp)
 c00e8c0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 c00e8c4:	e0bffd17 	ldw	r2,-12(fp)
 c00e8c8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 c00e8cc:	00004706 	br	c00e9ec <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 c00e8d0:	e0bffc17 	ldw	r2,-16(fp)
 c00e8d4:	10800a17 	ldw	r2,40(r2)
 c00e8d8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 c00e8dc:	e0bffc17 	ldw	r2,-16(fp)
 c00e8e0:	10800b17 	ldw	r2,44(r2)
 c00e8e4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 c00e8e8:	e0fff717 	ldw	r3,-36(fp)
 c00e8ec:	e0bff817 	ldw	r2,-32(fp)
 c00e8f0:	18800536 	bltu	r3,r2,c00e908 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 c00e8f4:	e0fff717 	ldw	r3,-36(fp)
 c00e8f8:	e0bff817 	ldw	r2,-32(fp)
 c00e8fc:	1885c83a 	sub	r2,r3,r2
 c00e900:	e0bff615 	stw	r2,-40(fp)
 c00e904:	00000406 	br	c00e918 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 c00e908:	00c20004 	movi	r3,2048
 c00e90c:	e0bff817 	ldw	r2,-32(fp)
 c00e910:	1885c83a 	sub	r2,r3,r2
 c00e914:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 c00e918:	e0bff617 	ldw	r2,-40(fp)
 c00e91c:	10001e26 	beq	r2,zero,c00e998 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 c00e920:	e0fffe17 	ldw	r3,-8(fp)
 c00e924:	e0bff617 	ldw	r2,-40(fp)
 c00e928:	1880022e 	bgeu	r3,r2,c00e934 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 c00e92c:	e0bffe17 	ldw	r2,-8(fp)
 c00e930:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 c00e934:	e0bffc17 	ldw	r2,-16(fp)
 c00e938:	10c00e04 	addi	r3,r2,56
 c00e93c:	e0bff817 	ldw	r2,-32(fp)
 c00e940:	1885883a 	add	r2,r3,r2
 c00e944:	e1bff617 	ldw	r6,-40(fp)
 c00e948:	100b883a 	mov	r5,r2
 c00e94c:	e13ff517 	ldw	r4,-44(fp)
 c00e950:	c0009a40 	call	c0009a4 <memcpy>
      ptr   += n;
 c00e954:	e0fff517 	ldw	r3,-44(fp)
 c00e958:	e0bff617 	ldw	r2,-40(fp)
 c00e95c:	1885883a 	add	r2,r3,r2
 c00e960:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 c00e964:	e0fffe17 	ldw	r3,-8(fp)
 c00e968:	e0bff617 	ldw	r2,-40(fp)
 c00e96c:	1885c83a 	sub	r2,r3,r2
 c00e970:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 c00e974:	e0fff817 	ldw	r3,-32(fp)
 c00e978:	e0bff617 	ldw	r2,-40(fp)
 c00e97c:	1885883a 	add	r2,r3,r2
 c00e980:	10c1ffcc 	andi	r3,r2,2047
 c00e984:	e0bffc17 	ldw	r2,-16(fp)
 c00e988:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 c00e98c:	e0bffe17 	ldw	r2,-8(fp)
 c00e990:	00bfcf16 	blt	zero,r2,c00e8d0 <__alt_data_end+0xfc00e8d0>
 c00e994:	00000106 	br	c00e99c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 c00e998:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 c00e99c:	e0fff517 	ldw	r3,-44(fp)
 c00e9a0:	e0bffd17 	ldw	r2,-12(fp)
 c00e9a4:	1880141e 	bne	r3,r2,c00e9f8 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 c00e9a8:	e0bfff17 	ldw	r2,-4(fp)
 c00e9ac:	1090000c 	andi	r2,r2,16384
 c00e9b0:	1000131e 	bne	r2,zero,c00ea00 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 c00e9b4:	0001883a 	nop
 c00e9b8:	e0bffc17 	ldw	r2,-16(fp)
 c00e9bc:	10c00a17 	ldw	r3,40(r2)
 c00e9c0:	e0bff717 	ldw	r2,-36(fp)
 c00e9c4:	1880051e 	bne	r3,r2,c00e9dc <altera_avalon_jtag_uart_read+0x138>
 c00e9c8:	e0bffc17 	ldw	r2,-16(fp)
 c00e9cc:	10c00917 	ldw	r3,36(r2)
 c00e9d0:	e0bffc17 	ldw	r2,-16(fp)
 c00e9d4:	10800117 	ldw	r2,4(r2)
 c00e9d8:	18bff736 	bltu	r3,r2,c00e9b8 <__alt_data_end+0xfc00e9b8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 c00e9dc:	e0bffc17 	ldw	r2,-16(fp)
 c00e9e0:	10c00a17 	ldw	r3,40(r2)
 c00e9e4:	e0bff717 	ldw	r2,-36(fp)
 c00e9e8:	18800726 	beq	r3,r2,c00ea08 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 c00e9ec:	e0bffe17 	ldw	r2,-8(fp)
 c00e9f0:	00bfb716 	blt	zero,r2,c00e8d0 <__alt_data_end+0xfc00e8d0>
 c00e9f4:	00000506 	br	c00ea0c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 c00e9f8:	0001883a 	nop
 c00e9fc:	00000306 	br	c00ea0c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 c00ea00:	0001883a 	nop
 c00ea04:	00000106 	br	c00ea0c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 c00ea08:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 c00ea0c:	e0fff517 	ldw	r3,-44(fp)
 c00ea10:	e0bffd17 	ldw	r2,-12(fp)
 c00ea14:	18801826 	beq	r3,r2,c00ea78 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c00ea18:	0005303a 	rdctl	r2,status
 c00ea1c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c00ea20:	e0fffb17 	ldw	r3,-20(fp)
 c00ea24:	00bfff84 	movi	r2,-2
 c00ea28:	1884703a 	and	r2,r3,r2
 c00ea2c:	1001703a 	wrctl	status,r2
  
  return context;
 c00ea30:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 c00ea34:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 c00ea38:	e0bffc17 	ldw	r2,-16(fp)
 c00ea3c:	10800817 	ldw	r2,32(r2)
 c00ea40:	10c00054 	ori	r3,r2,1
 c00ea44:	e0bffc17 	ldw	r2,-16(fp)
 c00ea48:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 c00ea4c:	e0bffc17 	ldw	r2,-16(fp)
 c00ea50:	10800017 	ldw	r2,0(r2)
 c00ea54:	10800104 	addi	r2,r2,4
 c00ea58:	1007883a 	mov	r3,r2
 c00ea5c:	e0bffc17 	ldw	r2,-16(fp)
 c00ea60:	10800817 	ldw	r2,32(r2)
 c00ea64:	18800035 	stwio	r2,0(r3)
 c00ea68:	e0bffa17 	ldw	r2,-24(fp)
 c00ea6c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c00ea70:	e0bff917 	ldw	r2,-28(fp)
 c00ea74:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 c00ea78:	e0fff517 	ldw	r3,-44(fp)
 c00ea7c:	e0bffd17 	ldw	r2,-12(fp)
 c00ea80:	18800426 	beq	r3,r2,c00ea94 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 c00ea84:	e0fff517 	ldw	r3,-44(fp)
 c00ea88:	e0bffd17 	ldw	r2,-12(fp)
 c00ea8c:	1885c83a 	sub	r2,r3,r2
 c00ea90:	00000606 	br	c00eaac <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 c00ea94:	e0bfff17 	ldw	r2,-4(fp)
 c00ea98:	1090000c 	andi	r2,r2,16384
 c00ea9c:	10000226 	beq	r2,zero,c00eaa8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 c00eaa0:	00bffd44 	movi	r2,-11
 c00eaa4:	00000106 	br	c00eaac <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 c00eaa8:	00bffec4 	movi	r2,-5
}
 c00eaac:	e037883a 	mov	sp,fp
 c00eab0:	dfc00117 	ldw	ra,4(sp)
 c00eab4:	df000017 	ldw	fp,0(sp)
 c00eab8:	dec00204 	addi	sp,sp,8
 c00eabc:	f800283a 	ret

0c00eac0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 c00eac0:	defff304 	addi	sp,sp,-52
 c00eac4:	dfc00c15 	stw	ra,48(sp)
 c00eac8:	df000b15 	stw	fp,44(sp)
 c00eacc:	df000b04 	addi	fp,sp,44
 c00ead0:	e13ffc15 	stw	r4,-16(fp)
 c00ead4:	e17ffd15 	stw	r5,-12(fp)
 c00ead8:	e1bffe15 	stw	r6,-8(fp)
 c00eadc:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 c00eae0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 c00eae4:	e0bffd17 	ldw	r2,-12(fp)
 c00eae8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 c00eaec:	00003706 	br	c00ebcc <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 c00eaf0:	e0bffc17 	ldw	r2,-16(fp)
 c00eaf4:	10800c17 	ldw	r2,48(r2)
 c00eaf8:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 c00eafc:	e0bffc17 	ldw	r2,-16(fp)
 c00eb00:	10800d17 	ldw	r2,52(r2)
 c00eb04:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 c00eb08:	e0fff917 	ldw	r3,-28(fp)
 c00eb0c:	e0bff517 	ldw	r2,-44(fp)
 c00eb10:	1880062e 	bgeu	r3,r2,c00eb2c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 c00eb14:	e0fff517 	ldw	r3,-44(fp)
 c00eb18:	e0bff917 	ldw	r2,-28(fp)
 c00eb1c:	1885c83a 	sub	r2,r3,r2
 c00eb20:	10bfffc4 	addi	r2,r2,-1
 c00eb24:	e0bff615 	stw	r2,-40(fp)
 c00eb28:	00000b06 	br	c00eb58 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 c00eb2c:	e0bff517 	ldw	r2,-44(fp)
 c00eb30:	10000526 	beq	r2,zero,c00eb48 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 c00eb34:	00c20004 	movi	r3,2048
 c00eb38:	e0bff917 	ldw	r2,-28(fp)
 c00eb3c:	1885c83a 	sub	r2,r3,r2
 c00eb40:	e0bff615 	stw	r2,-40(fp)
 c00eb44:	00000406 	br	c00eb58 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 c00eb48:	00c1ffc4 	movi	r3,2047
 c00eb4c:	e0bff917 	ldw	r2,-28(fp)
 c00eb50:	1885c83a 	sub	r2,r3,r2
 c00eb54:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 c00eb58:	e0bff617 	ldw	r2,-40(fp)
 c00eb5c:	10001e26 	beq	r2,zero,c00ebd8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 c00eb60:	e0fffe17 	ldw	r3,-8(fp)
 c00eb64:	e0bff617 	ldw	r2,-40(fp)
 c00eb68:	1880022e 	bgeu	r3,r2,c00eb74 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 c00eb6c:	e0bffe17 	ldw	r2,-8(fp)
 c00eb70:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 c00eb74:	e0bffc17 	ldw	r2,-16(fp)
 c00eb78:	10c20e04 	addi	r3,r2,2104
 c00eb7c:	e0bff917 	ldw	r2,-28(fp)
 c00eb80:	1885883a 	add	r2,r3,r2
 c00eb84:	e1bff617 	ldw	r6,-40(fp)
 c00eb88:	e17ffd17 	ldw	r5,-12(fp)
 c00eb8c:	1009883a 	mov	r4,r2
 c00eb90:	c0009a40 	call	c0009a4 <memcpy>
      ptr   += n;
 c00eb94:	e0fffd17 	ldw	r3,-12(fp)
 c00eb98:	e0bff617 	ldw	r2,-40(fp)
 c00eb9c:	1885883a 	add	r2,r3,r2
 c00eba0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 c00eba4:	e0fffe17 	ldw	r3,-8(fp)
 c00eba8:	e0bff617 	ldw	r2,-40(fp)
 c00ebac:	1885c83a 	sub	r2,r3,r2
 c00ebb0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 c00ebb4:	e0fff917 	ldw	r3,-28(fp)
 c00ebb8:	e0bff617 	ldw	r2,-40(fp)
 c00ebbc:	1885883a 	add	r2,r3,r2
 c00ebc0:	10c1ffcc 	andi	r3,r2,2047
 c00ebc4:	e0bffc17 	ldw	r2,-16(fp)
 c00ebc8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 c00ebcc:	e0bffe17 	ldw	r2,-8(fp)
 c00ebd0:	00bfc716 	blt	zero,r2,c00eaf0 <__alt_data_end+0xfc00eaf0>
 c00ebd4:	00000106 	br	c00ebdc <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 c00ebd8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c00ebdc:	0005303a 	rdctl	r2,status
 c00ebe0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c00ebe4:	e0fffb17 	ldw	r3,-20(fp)
 c00ebe8:	00bfff84 	movi	r2,-2
 c00ebec:	1884703a 	and	r2,r3,r2
 c00ebf0:	1001703a 	wrctl	status,r2
  
  return context;
 c00ebf4:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 c00ebf8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 c00ebfc:	e0bffc17 	ldw	r2,-16(fp)
 c00ec00:	10800817 	ldw	r2,32(r2)
 c00ec04:	10c00094 	ori	r3,r2,2
 c00ec08:	e0bffc17 	ldw	r2,-16(fp)
 c00ec0c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 c00ec10:	e0bffc17 	ldw	r2,-16(fp)
 c00ec14:	10800017 	ldw	r2,0(r2)
 c00ec18:	10800104 	addi	r2,r2,4
 c00ec1c:	1007883a 	mov	r3,r2
 c00ec20:	e0bffc17 	ldw	r2,-16(fp)
 c00ec24:	10800817 	ldw	r2,32(r2)
 c00ec28:	18800035 	stwio	r2,0(r3)
 c00ec2c:	e0bffa17 	ldw	r2,-24(fp)
 c00ec30:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c00ec34:	e0bff817 	ldw	r2,-32(fp)
 c00ec38:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 c00ec3c:	e0bffe17 	ldw	r2,-8(fp)
 c00ec40:	0080100e 	bge	zero,r2,c00ec84 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 c00ec44:	e0bfff17 	ldw	r2,-4(fp)
 c00ec48:	1090000c 	andi	r2,r2,16384
 c00ec4c:	1000101e 	bne	r2,zero,c00ec90 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 c00ec50:	0001883a 	nop
 c00ec54:	e0bffc17 	ldw	r2,-16(fp)
 c00ec58:	10c00d17 	ldw	r3,52(r2)
 c00ec5c:	e0bff517 	ldw	r2,-44(fp)
 c00ec60:	1880051e 	bne	r3,r2,c00ec78 <altera_avalon_jtag_uart_write+0x1b8>
 c00ec64:	e0bffc17 	ldw	r2,-16(fp)
 c00ec68:	10c00917 	ldw	r3,36(r2)
 c00ec6c:	e0bffc17 	ldw	r2,-16(fp)
 c00ec70:	10800117 	ldw	r2,4(r2)
 c00ec74:	18bff736 	bltu	r3,r2,c00ec54 <__alt_data_end+0xfc00ec54>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 c00ec78:	e0bffc17 	ldw	r2,-16(fp)
 c00ec7c:	10800917 	ldw	r2,36(r2)
 c00ec80:	1000051e 	bne	r2,zero,c00ec98 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 c00ec84:	e0bffe17 	ldw	r2,-8(fp)
 c00ec88:	00bfd016 	blt	zero,r2,c00ebcc <__alt_data_end+0xfc00ebcc>
 c00ec8c:	00000306 	br	c00ec9c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 c00ec90:	0001883a 	nop
 c00ec94:	00000106 	br	c00ec9c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 c00ec98:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 c00ec9c:	e0fffd17 	ldw	r3,-12(fp)
 c00eca0:	e0bff717 	ldw	r2,-36(fp)
 c00eca4:	18800426 	beq	r3,r2,c00ecb8 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 c00eca8:	e0fffd17 	ldw	r3,-12(fp)
 c00ecac:	e0bff717 	ldw	r2,-36(fp)
 c00ecb0:	1885c83a 	sub	r2,r3,r2
 c00ecb4:	00000606 	br	c00ecd0 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 c00ecb8:	e0bfff17 	ldw	r2,-4(fp)
 c00ecbc:	1090000c 	andi	r2,r2,16384
 c00ecc0:	10000226 	beq	r2,zero,c00eccc <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 c00ecc4:	00bffd44 	movi	r2,-11
 c00ecc8:	00000106 	br	c00ecd0 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 c00eccc:	00bffec4 	movi	r2,-5
}
 c00ecd0:	e037883a 	mov	sp,fp
 c00ecd4:	dfc00117 	ldw	ra,4(sp)
 c00ecd8:	df000017 	ldw	fp,0(sp)
 c00ecdc:	dec00204 	addi	sp,sp,8
 c00ece0:	f800283a 	ret

0c00ece4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 c00ece4:	defffa04 	addi	sp,sp,-24
 c00ece8:	dfc00515 	stw	ra,20(sp)
 c00ecec:	df000415 	stw	fp,16(sp)
 c00ecf0:	df000404 	addi	fp,sp,16
 c00ecf4:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 c00ecf8:	0007883a 	mov	r3,zero
 c00ecfc:	e0bfff17 	ldw	r2,-4(fp)
 c00ed00:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 c00ed04:	e0bfff17 	ldw	r2,-4(fp)
 c00ed08:	10800104 	addi	r2,r2,4
 c00ed0c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c00ed10:	0005303a 	rdctl	r2,status
 c00ed14:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c00ed18:	e0fffd17 	ldw	r3,-12(fp)
 c00ed1c:	00bfff84 	movi	r2,-2
 c00ed20:	1884703a 	and	r2,r3,r2
 c00ed24:	1001703a 	wrctl	status,r2
  
  return context;
 c00ed28:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 c00ed2c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 c00ed30:	c00f95c0 	call	c00f95c <alt_tick>
 c00ed34:	e0bffc17 	ldw	r2,-16(fp)
 c00ed38:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c00ed3c:	e0bffe17 	ldw	r2,-8(fp)
 c00ed40:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 c00ed44:	0001883a 	nop
 c00ed48:	e037883a 	mov	sp,fp
 c00ed4c:	dfc00117 	ldw	ra,4(sp)
 c00ed50:	df000017 	ldw	fp,0(sp)
 c00ed54:	dec00204 	addi	sp,sp,8
 c00ed58:	f800283a 	ret

0c00ed5c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 c00ed5c:	defff804 	addi	sp,sp,-32
 c00ed60:	dfc00715 	stw	ra,28(sp)
 c00ed64:	df000615 	stw	fp,24(sp)
 c00ed68:	df000604 	addi	fp,sp,24
 c00ed6c:	e13ffc15 	stw	r4,-16(fp)
 c00ed70:	e17ffd15 	stw	r5,-12(fp)
 c00ed74:	e1bffe15 	stw	r6,-8(fp)
 c00ed78:	e1ffff15 	stw	r7,-4(fp)
 c00ed7c:	e0bfff17 	ldw	r2,-4(fp)
 c00ed80:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 c00ed84:	d0a6da17 	ldw	r2,-25752(gp)
 c00ed88:	1000021e 	bne	r2,zero,c00ed94 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 c00ed8c:	e0bffb17 	ldw	r2,-20(fp)
 c00ed90:	d0a6da15 	stw	r2,-25752(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 c00ed94:	e0bffc17 	ldw	r2,-16(fp)
 c00ed98:	10800104 	addi	r2,r2,4
 c00ed9c:	00c001c4 	movi	r3,7
 c00eda0:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 c00eda4:	d8000015 	stw	zero,0(sp)
 c00eda8:	e1fffc17 	ldw	r7,-16(fp)
 c00edac:	01830074 	movhi	r6,3073
 c00edb0:	31bb3904 	addi	r6,r6,-4892
 c00edb4:	e17ffe17 	ldw	r5,-8(fp)
 c00edb8:	e13ffd17 	ldw	r4,-12(fp)
 c00edbc:	c00f23c0 	call	c00f23c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 c00edc0:	0001883a 	nop
 c00edc4:	e037883a 	mov	sp,fp
 c00edc8:	dfc00117 	ldw	ra,4(sp)
 c00edcc:	df000017 	ldw	fp,0(sp)
 c00edd0:	dec00204 	addi	sp,sp,8
 c00edd4:	f800283a 	ret

0c00edd8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 c00edd8:	defff504 	addi	sp,sp,-44
 c00eddc:	df000a15 	stw	fp,40(sp)
 c00ede0:	df000a04 	addi	fp,sp,40
 c00ede4:	e13ffc15 	stw	r4,-16(fp)
 c00ede8:	e17ffd15 	stw	r5,-12(fp)
 c00edec:	e1bffe15 	stw	r6,-8(fp)
 c00edf0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 c00edf4:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 c00edf8:	d0a6da17 	ldw	r2,-25752(gp)
  
  if (alt_ticks_per_second ())
 c00edfc:	10003c26 	beq	r2,zero,c00eef0 <alt_alarm_start+0x118>
  {
    if (alarm)
 c00ee00:	e0bffc17 	ldw	r2,-16(fp)
 c00ee04:	10003826 	beq	r2,zero,c00eee8 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 c00ee08:	e0bffc17 	ldw	r2,-16(fp)
 c00ee0c:	e0fffe17 	ldw	r3,-8(fp)
 c00ee10:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 c00ee14:	e0bffc17 	ldw	r2,-16(fp)
 c00ee18:	e0ffff17 	ldw	r3,-4(fp)
 c00ee1c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c00ee20:	0005303a 	rdctl	r2,status
 c00ee24:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c00ee28:	e0fff917 	ldw	r3,-28(fp)
 c00ee2c:	00bfff84 	movi	r2,-2
 c00ee30:	1884703a 	and	r2,r3,r2
 c00ee34:	1001703a 	wrctl	status,r2
  
  return context;
 c00ee38:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 c00ee3c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 c00ee40:	d0a6db17 	ldw	r2,-25748(gp)
      
      current_nticks = alt_nticks();
 c00ee44:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 c00ee48:	e0fffd17 	ldw	r3,-12(fp)
 c00ee4c:	e0bff617 	ldw	r2,-40(fp)
 c00ee50:	1885883a 	add	r2,r3,r2
 c00ee54:	10c00044 	addi	r3,r2,1
 c00ee58:	e0bffc17 	ldw	r2,-16(fp)
 c00ee5c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 c00ee60:	e0bffc17 	ldw	r2,-16(fp)
 c00ee64:	10c00217 	ldw	r3,8(r2)
 c00ee68:	e0bff617 	ldw	r2,-40(fp)
 c00ee6c:	1880042e 	bgeu	r3,r2,c00ee80 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 c00ee70:	e0bffc17 	ldw	r2,-16(fp)
 c00ee74:	00c00044 	movi	r3,1
 c00ee78:	10c00405 	stb	r3,16(r2)
 c00ee7c:	00000206 	br	c00ee88 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 c00ee80:	e0bffc17 	ldw	r2,-16(fp)
 c00ee84:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 c00ee88:	e0bffc17 	ldw	r2,-16(fp)
 c00ee8c:	d0e01004 	addi	r3,gp,-32704
 c00ee90:	e0fffa15 	stw	r3,-24(fp)
 c00ee94:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 c00ee98:	e0bffb17 	ldw	r2,-20(fp)
 c00ee9c:	e0fffa17 	ldw	r3,-24(fp)
 c00eea0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 c00eea4:	e0bffa17 	ldw	r2,-24(fp)
 c00eea8:	10c00017 	ldw	r3,0(r2)
 c00eeac:	e0bffb17 	ldw	r2,-20(fp)
 c00eeb0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 c00eeb4:	e0bffa17 	ldw	r2,-24(fp)
 c00eeb8:	10800017 	ldw	r2,0(r2)
 c00eebc:	e0fffb17 	ldw	r3,-20(fp)
 c00eec0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 c00eec4:	e0bffa17 	ldw	r2,-24(fp)
 c00eec8:	e0fffb17 	ldw	r3,-20(fp)
 c00eecc:	10c00015 	stw	r3,0(r2)
 c00eed0:	e0bff817 	ldw	r2,-32(fp)
 c00eed4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c00eed8:	e0bff717 	ldw	r2,-36(fp)
 c00eedc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 c00eee0:	0005883a 	mov	r2,zero
 c00eee4:	00000306 	br	c00eef4 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 c00eee8:	00bffa84 	movi	r2,-22
 c00eeec:	00000106 	br	c00eef4 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 c00eef0:	00bfde84 	movi	r2,-134
  }
}
 c00eef4:	e037883a 	mov	sp,fp
 c00eef8:	df000017 	ldw	fp,0(sp)
 c00eefc:	dec00104 	addi	sp,sp,4
 c00ef00:	f800283a 	ret

0c00ef04 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 c00ef04:	defffa04 	addi	sp,sp,-24
 c00ef08:	dfc00515 	stw	ra,20(sp)
 c00ef0c:	df000415 	stw	fp,16(sp)
 c00ef10:	df000404 	addi	fp,sp,16
 c00ef14:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 c00ef18:	00800244 	movi	r2,9
 c00ef1c:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 c00ef20:	014003f4 	movhi	r5,15
 c00ef24:	29509004 	addi	r5,r5,16960
 c00ef28:	e13ffd17 	ldw	r4,-12(fp)
 c00ef2c:	c00097c0 	call	c00097c <__mulsi3>
 c00ef30:	100b883a 	mov	r5,r2
 c00ef34:	0100bef4 	movhi	r4,763
 c00ef38:	213c2004 	addi	r4,r4,-3968
 c00ef3c:	c00ae880 	call	c00ae88 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 c00ef40:	100b883a 	mov	r5,r2
 c00ef44:	01200034 	movhi	r4,32768
 c00ef48:	213fffc4 	addi	r4,r4,-1
 c00ef4c:	c00ae880 	call	c00ae88 <__udivsi3>
 c00ef50:	100b883a 	mov	r5,r2
 c00ef54:	e13fff17 	ldw	r4,-4(fp)
 c00ef58:	c00ae880 	call	c00ae88 <__udivsi3>
 c00ef5c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 c00ef60:	e0bffe17 	ldw	r2,-8(fp)
 c00ef64:	10002a26 	beq	r2,zero,c00f010 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 c00ef68:	e03ffc15 	stw	zero,-16(fp)
 c00ef6c:	00001706 	br	c00efcc <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 c00ef70:	00a00034 	movhi	r2,32768
 c00ef74:	10bfffc4 	addi	r2,r2,-1
 c00ef78:	10bfffc4 	addi	r2,r2,-1
 c00ef7c:	103ffe1e 	bne	r2,zero,c00ef78 <__alt_data_end+0xfc00ef78>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 c00ef80:	014003f4 	movhi	r5,15
 c00ef84:	29509004 	addi	r5,r5,16960
 c00ef88:	e13ffd17 	ldw	r4,-12(fp)
 c00ef8c:	c00097c0 	call	c00097c <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 c00ef90:	100b883a 	mov	r5,r2
 c00ef94:	0100bef4 	movhi	r4,763
 c00ef98:	213c2004 	addi	r4,r4,-3968
 c00ef9c:	c00ae880 	call	c00ae88 <__udivsi3>
 c00efa0:	100b883a 	mov	r5,r2
 c00efa4:	01200034 	movhi	r4,32768
 c00efa8:	213fffc4 	addi	r4,r4,-1
 c00efac:	c00ae880 	call	c00ae88 <__udivsi3>
 c00efb0:	1007883a 	mov	r3,r2
 c00efb4:	e0bfff17 	ldw	r2,-4(fp)
 c00efb8:	10c5c83a 	sub	r2,r2,r3
 c00efbc:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 c00efc0:	e0bffc17 	ldw	r2,-16(fp)
 c00efc4:	10800044 	addi	r2,r2,1
 c00efc8:	e0bffc15 	stw	r2,-16(fp)
 c00efcc:	e0fffc17 	ldw	r3,-16(fp)
 c00efd0:	e0bffe17 	ldw	r2,-8(fp)
 c00efd4:	18bfe616 	blt	r3,r2,c00ef70 <__alt_data_end+0xfc00ef70>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 c00efd8:	014003f4 	movhi	r5,15
 c00efdc:	29509004 	addi	r5,r5,16960
 c00efe0:	e13ffd17 	ldw	r4,-12(fp)
 c00efe4:	c00097c0 	call	c00097c <__mulsi3>
 c00efe8:	100b883a 	mov	r5,r2
 c00efec:	0100bef4 	movhi	r4,763
 c00eff0:	213c2004 	addi	r4,r4,-3968
 c00eff4:	c00ae880 	call	c00ae88 <__udivsi3>
 c00eff8:	e17fff17 	ldw	r5,-4(fp)
 c00effc:	1009883a 	mov	r4,r2
 c00f000:	c00097c0 	call	c00097c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 c00f004:	10bfffc4 	addi	r2,r2,-1
 c00f008:	103ffe1e 	bne	r2,zero,c00f004 <__alt_data_end+0xfc00f004>
 c00f00c:	00000d06 	br	c00f044 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 c00f010:	014003f4 	movhi	r5,15
 c00f014:	29509004 	addi	r5,r5,16960
 c00f018:	e13ffd17 	ldw	r4,-12(fp)
 c00f01c:	c00097c0 	call	c00097c <__mulsi3>
 c00f020:	100b883a 	mov	r5,r2
 c00f024:	0100bef4 	movhi	r4,763
 c00f028:	213c2004 	addi	r4,r4,-3968
 c00f02c:	c00ae880 	call	c00ae88 <__udivsi3>
 c00f030:	e17fff17 	ldw	r5,-4(fp)
 c00f034:	1009883a 	mov	r4,r2
 c00f038:	c00097c0 	call	c00097c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 c00f03c:	10bfffc4 	addi	r2,r2,-1
 c00f040:	00bffe16 	blt	zero,r2,c00f03c <__alt_data_end+0xfc00f03c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 c00f044:	0005883a 	mov	r2,zero
}
 c00f048:	e037883a 	mov	sp,fp
 c00f04c:	dfc00117 	ldw	ra,4(sp)
 c00f050:	df000017 	ldw	fp,0(sp)
 c00f054:	dec00204 	addi	sp,sp,8
 c00f058:	f800283a 	ret

0c00f05c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 c00f05c:	deffff04 	addi	sp,sp,-4
 c00f060:	df000015 	stw	fp,0(sp)
 c00f064:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 c00f068:	0001883a 	nop
 c00f06c:	e037883a 	mov	sp,fp
 c00f070:	df000017 	ldw	fp,0(sp)
 c00f074:	dec00104 	addi	sp,sp,4
 c00f078:	f800283a 	ret

0c00f07c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c00f07c:	defffe04 	addi	sp,sp,-8
 c00f080:	dfc00115 	stw	ra,4(sp)
 c00f084:	df000015 	stw	fp,0(sp)
 c00f088:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 c00f08c:	d0a00d17 	ldw	r2,-32716(gp)
 c00f090:	10000326 	beq	r2,zero,c00f0a0 <alt_get_errno+0x24>
 c00f094:	d0a00d17 	ldw	r2,-32716(gp)
 c00f098:	103ee83a 	callr	r2
 c00f09c:	00000106 	br	c00f0a4 <alt_get_errno+0x28>
 c00f0a0:	d0a6d504 	addi	r2,gp,-25772
}
 c00f0a4:	e037883a 	mov	sp,fp
 c00f0a8:	dfc00117 	ldw	ra,4(sp)
 c00f0ac:	df000017 	ldw	fp,0(sp)
 c00f0b0:	dec00204 	addi	sp,sp,8
 c00f0b4:	f800283a 	ret

0c00f0b8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 c00f0b8:	defffa04 	addi	sp,sp,-24
 c00f0bc:	dfc00515 	stw	ra,20(sp)
 c00f0c0:	df000415 	stw	fp,16(sp)
 c00f0c4:	df000404 	addi	fp,sp,16
 c00f0c8:	e13ffe15 	stw	r4,-8(fp)
 c00f0cc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 c00f0d0:	e0bffe17 	ldw	r2,-8(fp)
 c00f0d4:	10000326 	beq	r2,zero,c00f0e4 <alt_dev_llist_insert+0x2c>
 c00f0d8:	e0bffe17 	ldw	r2,-8(fp)
 c00f0dc:	10800217 	ldw	r2,8(r2)
 c00f0e0:	1000061e 	bne	r2,zero,c00f0fc <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 c00f0e4:	c00f07c0 	call	c00f07c <alt_get_errno>
 c00f0e8:	1007883a 	mov	r3,r2
 c00f0ec:	00800584 	movi	r2,22
 c00f0f0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 c00f0f4:	00bffa84 	movi	r2,-22
 c00f0f8:	00001306 	br	c00f148 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 c00f0fc:	e0bffe17 	ldw	r2,-8(fp)
 c00f100:	e0ffff17 	ldw	r3,-4(fp)
 c00f104:	e0fffc15 	stw	r3,-16(fp)
 c00f108:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 c00f10c:	e0bffd17 	ldw	r2,-12(fp)
 c00f110:	e0fffc17 	ldw	r3,-16(fp)
 c00f114:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 c00f118:	e0bffc17 	ldw	r2,-16(fp)
 c00f11c:	10c00017 	ldw	r3,0(r2)
 c00f120:	e0bffd17 	ldw	r2,-12(fp)
 c00f124:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 c00f128:	e0bffc17 	ldw	r2,-16(fp)
 c00f12c:	10800017 	ldw	r2,0(r2)
 c00f130:	e0fffd17 	ldw	r3,-12(fp)
 c00f134:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 c00f138:	e0bffc17 	ldw	r2,-16(fp)
 c00f13c:	e0fffd17 	ldw	r3,-12(fp)
 c00f140:	10c00015 	stw	r3,0(r2)

  return 0;  
 c00f144:	0005883a 	mov	r2,zero
}
 c00f148:	e037883a 	mov	sp,fp
 c00f14c:	dfc00117 	ldw	ra,4(sp)
 c00f150:	df000017 	ldw	fp,0(sp)
 c00f154:	dec00204 	addi	sp,sp,8
 c00f158:	f800283a 	ret

0c00f15c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 c00f15c:	defffd04 	addi	sp,sp,-12
 c00f160:	dfc00215 	stw	ra,8(sp)
 c00f164:	df000115 	stw	fp,4(sp)
 c00f168:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 c00f16c:	00830074 	movhi	r2,3073
 c00f170:	10804404 	addi	r2,r2,272
 c00f174:	e0bfff15 	stw	r2,-4(fp)
 c00f178:	00000606 	br	c00f194 <_do_ctors+0x38>
        (*ctor) (); 
 c00f17c:	e0bfff17 	ldw	r2,-4(fp)
 c00f180:	10800017 	ldw	r2,0(r2)
 c00f184:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 c00f188:	e0bfff17 	ldw	r2,-4(fp)
 c00f18c:	10bfff04 	addi	r2,r2,-4
 c00f190:	e0bfff15 	stw	r2,-4(fp)
 c00f194:	e0ffff17 	ldw	r3,-4(fp)
 c00f198:	00830074 	movhi	r2,3073
 c00f19c:	10804504 	addi	r2,r2,276
 c00f1a0:	18bff62e 	bgeu	r3,r2,c00f17c <__alt_data_end+0xfc00f17c>
        (*ctor) (); 
}
 c00f1a4:	0001883a 	nop
 c00f1a8:	e037883a 	mov	sp,fp
 c00f1ac:	dfc00117 	ldw	ra,4(sp)
 c00f1b0:	df000017 	ldw	fp,0(sp)
 c00f1b4:	dec00204 	addi	sp,sp,8
 c00f1b8:	f800283a 	ret

0c00f1bc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 c00f1bc:	defffd04 	addi	sp,sp,-12
 c00f1c0:	dfc00215 	stw	ra,8(sp)
 c00f1c4:	df000115 	stw	fp,4(sp)
 c00f1c8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 c00f1cc:	00830074 	movhi	r2,3073
 c00f1d0:	10804404 	addi	r2,r2,272
 c00f1d4:	e0bfff15 	stw	r2,-4(fp)
 c00f1d8:	00000606 	br	c00f1f4 <_do_dtors+0x38>
        (*dtor) (); 
 c00f1dc:	e0bfff17 	ldw	r2,-4(fp)
 c00f1e0:	10800017 	ldw	r2,0(r2)
 c00f1e4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 c00f1e8:	e0bfff17 	ldw	r2,-4(fp)
 c00f1ec:	10bfff04 	addi	r2,r2,-4
 c00f1f0:	e0bfff15 	stw	r2,-4(fp)
 c00f1f4:	e0ffff17 	ldw	r3,-4(fp)
 c00f1f8:	00830074 	movhi	r2,3073
 c00f1fc:	10804504 	addi	r2,r2,276
 c00f200:	18bff62e 	bgeu	r3,r2,c00f1dc <__alt_data_end+0xfc00f1dc>
        (*dtor) (); 
}
 c00f204:	0001883a 	nop
 c00f208:	e037883a 	mov	sp,fp
 c00f20c:	dfc00117 	ldw	ra,4(sp)
 c00f210:	df000017 	ldw	fp,0(sp)
 c00f214:	dec00204 	addi	sp,sp,8
 c00f218:	f800283a 	ret

0c00f21c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 c00f21c:	deffff04 	addi	sp,sp,-4
 c00f220:	df000015 	stw	fp,0(sp)
 c00f224:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 c00f228:	0001883a 	nop
 c00f22c:	e037883a 	mov	sp,fp
 c00f230:	df000017 	ldw	fp,0(sp)
 c00f234:	dec00104 	addi	sp,sp,4
 c00f238:	f800283a 	ret

0c00f23c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 c00f23c:	defff904 	addi	sp,sp,-28
 c00f240:	dfc00615 	stw	ra,24(sp)
 c00f244:	df000515 	stw	fp,20(sp)
 c00f248:	df000504 	addi	fp,sp,20
 c00f24c:	e13ffc15 	stw	r4,-16(fp)
 c00f250:	e17ffd15 	stw	r5,-12(fp)
 c00f254:	e1bffe15 	stw	r6,-8(fp)
 c00f258:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 c00f25c:	e0800217 	ldw	r2,8(fp)
 c00f260:	d8800015 	stw	r2,0(sp)
 c00f264:	e1ffff17 	ldw	r7,-4(fp)
 c00f268:	e1bffe17 	ldw	r6,-8(fp)
 c00f26c:	e17ffd17 	ldw	r5,-12(fp)
 c00f270:	e13ffc17 	ldw	r4,-16(fp)
 c00f274:	c00f3ec0 	call	c00f3ec <alt_iic_isr_register>
}  
 c00f278:	e037883a 	mov	sp,fp
 c00f27c:	dfc00117 	ldw	ra,4(sp)
 c00f280:	df000017 	ldw	fp,0(sp)
 c00f284:	dec00204 	addi	sp,sp,8
 c00f288:	f800283a 	ret

0c00f28c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 c00f28c:	defff904 	addi	sp,sp,-28
 c00f290:	df000615 	stw	fp,24(sp)
 c00f294:	df000604 	addi	fp,sp,24
 c00f298:	e13ffe15 	stw	r4,-8(fp)
 c00f29c:	e17fff15 	stw	r5,-4(fp)
 c00f2a0:	e0bfff17 	ldw	r2,-4(fp)
 c00f2a4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c00f2a8:	0005303a 	rdctl	r2,status
 c00f2ac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c00f2b0:	e0fffb17 	ldw	r3,-20(fp)
 c00f2b4:	00bfff84 	movi	r2,-2
 c00f2b8:	1884703a 	and	r2,r3,r2
 c00f2bc:	1001703a 	wrctl	status,r2
  
  return context;
 c00f2c0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 c00f2c4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 c00f2c8:	00c00044 	movi	r3,1
 c00f2cc:	e0bffa17 	ldw	r2,-24(fp)
 c00f2d0:	1884983a 	sll	r2,r3,r2
 c00f2d4:	1007883a 	mov	r3,r2
 c00f2d8:	d0a6d917 	ldw	r2,-25756(gp)
 c00f2dc:	1884b03a 	or	r2,r3,r2
 c00f2e0:	d0a6d915 	stw	r2,-25756(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 c00f2e4:	d0a6d917 	ldw	r2,-25756(gp)
 c00f2e8:	100170fa 	wrctl	ienable,r2
 c00f2ec:	e0bffc17 	ldw	r2,-16(fp)
 c00f2f0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c00f2f4:	e0bffd17 	ldw	r2,-12(fp)
 c00f2f8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 c00f2fc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 c00f300:	0001883a 	nop
}
 c00f304:	e037883a 	mov	sp,fp
 c00f308:	df000017 	ldw	fp,0(sp)
 c00f30c:	dec00104 	addi	sp,sp,4
 c00f310:	f800283a 	ret

0c00f314 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 c00f314:	defff904 	addi	sp,sp,-28
 c00f318:	df000615 	stw	fp,24(sp)
 c00f31c:	df000604 	addi	fp,sp,24
 c00f320:	e13ffe15 	stw	r4,-8(fp)
 c00f324:	e17fff15 	stw	r5,-4(fp)
 c00f328:	e0bfff17 	ldw	r2,-4(fp)
 c00f32c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c00f330:	0005303a 	rdctl	r2,status
 c00f334:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c00f338:	e0fffb17 	ldw	r3,-20(fp)
 c00f33c:	00bfff84 	movi	r2,-2
 c00f340:	1884703a 	and	r2,r3,r2
 c00f344:	1001703a 	wrctl	status,r2
  
  return context;
 c00f348:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 c00f34c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 c00f350:	00c00044 	movi	r3,1
 c00f354:	e0bffa17 	ldw	r2,-24(fp)
 c00f358:	1884983a 	sll	r2,r3,r2
 c00f35c:	0084303a 	nor	r2,zero,r2
 c00f360:	1007883a 	mov	r3,r2
 c00f364:	d0a6d917 	ldw	r2,-25756(gp)
 c00f368:	1884703a 	and	r2,r3,r2
 c00f36c:	d0a6d915 	stw	r2,-25756(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 c00f370:	d0a6d917 	ldw	r2,-25756(gp)
 c00f374:	100170fa 	wrctl	ienable,r2
 c00f378:	e0bffc17 	ldw	r2,-16(fp)
 c00f37c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c00f380:	e0bffd17 	ldw	r2,-12(fp)
 c00f384:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 c00f388:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 c00f38c:	0001883a 	nop
}
 c00f390:	e037883a 	mov	sp,fp
 c00f394:	df000017 	ldw	fp,0(sp)
 c00f398:	dec00104 	addi	sp,sp,4
 c00f39c:	f800283a 	ret

0c00f3a0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 c00f3a0:	defffc04 	addi	sp,sp,-16
 c00f3a4:	df000315 	stw	fp,12(sp)
 c00f3a8:	df000304 	addi	fp,sp,12
 c00f3ac:	e13ffe15 	stw	r4,-8(fp)
 c00f3b0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 c00f3b4:	000530fa 	rdctl	r2,ienable
 c00f3b8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 c00f3bc:	00c00044 	movi	r3,1
 c00f3c0:	e0bfff17 	ldw	r2,-4(fp)
 c00f3c4:	1884983a 	sll	r2,r3,r2
 c00f3c8:	1007883a 	mov	r3,r2
 c00f3cc:	e0bffd17 	ldw	r2,-12(fp)
 c00f3d0:	1884703a 	and	r2,r3,r2
 c00f3d4:	1004c03a 	cmpne	r2,r2,zero
 c00f3d8:	10803fcc 	andi	r2,r2,255
}
 c00f3dc:	e037883a 	mov	sp,fp
 c00f3e0:	df000017 	ldw	fp,0(sp)
 c00f3e4:	dec00104 	addi	sp,sp,4
 c00f3e8:	f800283a 	ret

0c00f3ec <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 c00f3ec:	defff504 	addi	sp,sp,-44
 c00f3f0:	dfc00a15 	stw	ra,40(sp)
 c00f3f4:	df000915 	stw	fp,36(sp)
 c00f3f8:	df000904 	addi	fp,sp,36
 c00f3fc:	e13ffc15 	stw	r4,-16(fp)
 c00f400:	e17ffd15 	stw	r5,-12(fp)
 c00f404:	e1bffe15 	stw	r6,-8(fp)
 c00f408:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 c00f40c:	00bffa84 	movi	r2,-22
 c00f410:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 c00f414:	e0bffd17 	ldw	r2,-12(fp)
 c00f418:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 c00f41c:	e0bff817 	ldw	r2,-32(fp)
 c00f420:	10800808 	cmpgei	r2,r2,32
 c00f424:	1000271e 	bne	r2,zero,c00f4c4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c00f428:	0005303a 	rdctl	r2,status
 c00f42c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c00f430:	e0fffb17 	ldw	r3,-20(fp)
 c00f434:	00bfff84 	movi	r2,-2
 c00f438:	1884703a 	and	r2,r3,r2
 c00f43c:	1001703a 	wrctl	status,r2
  
  return context;
 c00f440:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 c00f444:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 c00f448:	00830074 	movhi	r2,3073
 c00f44c:	108edd04 	addi	r2,r2,15220
 c00f450:	e0fff817 	ldw	r3,-32(fp)
 c00f454:	180690fa 	slli	r3,r3,3
 c00f458:	10c5883a 	add	r2,r2,r3
 c00f45c:	e0fffe17 	ldw	r3,-8(fp)
 c00f460:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 c00f464:	00830074 	movhi	r2,3073
 c00f468:	108edd04 	addi	r2,r2,15220
 c00f46c:	e0fff817 	ldw	r3,-32(fp)
 c00f470:	180690fa 	slli	r3,r3,3
 c00f474:	10c5883a 	add	r2,r2,r3
 c00f478:	10800104 	addi	r2,r2,4
 c00f47c:	e0ffff17 	ldw	r3,-4(fp)
 c00f480:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 c00f484:	e0bffe17 	ldw	r2,-8(fp)
 c00f488:	10000526 	beq	r2,zero,c00f4a0 <alt_iic_isr_register+0xb4>
 c00f48c:	e0bff817 	ldw	r2,-32(fp)
 c00f490:	100b883a 	mov	r5,r2
 c00f494:	e13ffc17 	ldw	r4,-16(fp)
 c00f498:	c00f28c0 	call	c00f28c <alt_ic_irq_enable>
 c00f49c:	00000406 	br	c00f4b0 <alt_iic_isr_register+0xc4>
 c00f4a0:	e0bff817 	ldw	r2,-32(fp)
 c00f4a4:	100b883a 	mov	r5,r2
 c00f4a8:	e13ffc17 	ldw	r4,-16(fp)
 c00f4ac:	c00f3140 	call	c00f314 <alt_ic_irq_disable>
 c00f4b0:	e0bff715 	stw	r2,-36(fp)
 c00f4b4:	e0bffa17 	ldw	r2,-24(fp)
 c00f4b8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c00f4bc:	e0bff917 	ldw	r2,-28(fp)
 c00f4c0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 c00f4c4:	e0bff717 	ldw	r2,-36(fp)
}
 c00f4c8:	e037883a 	mov	sp,fp
 c00f4cc:	dfc00117 	ldw	ra,4(sp)
 c00f4d0:	df000017 	ldw	fp,0(sp)
 c00f4d4:	dec00204 	addi	sp,sp,8
 c00f4d8:	f800283a 	ret

0c00f4dc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 c00f4dc:	defff804 	addi	sp,sp,-32
 c00f4e0:	dfc00715 	stw	ra,28(sp)
 c00f4e4:	df000615 	stw	fp,24(sp)
 c00f4e8:	dc000515 	stw	r16,20(sp)
 c00f4ec:	df000604 	addi	fp,sp,24
 c00f4f0:	e13ffb15 	stw	r4,-20(fp)
 c00f4f4:	e17ffc15 	stw	r5,-16(fp)
 c00f4f8:	e1bffd15 	stw	r6,-12(fp)
 c00f4fc:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 c00f500:	e1bffe17 	ldw	r6,-8(fp)
 c00f504:	e17ffd17 	ldw	r5,-12(fp)
 c00f508:	e13ffc17 	ldw	r4,-16(fp)
 c00f50c:	c00f7640 	call	c00f764 <open>
 c00f510:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 c00f514:	e0bffa17 	ldw	r2,-24(fp)
 c00f518:	10002216 	blt	r2,zero,c00f5a4 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 c00f51c:	04030074 	movhi	r16,3073
 c00f520:	84037e04 	addi	r16,r16,3576
 c00f524:	e0bffa17 	ldw	r2,-24(fp)
 c00f528:	01400304 	movi	r5,12
 c00f52c:	1009883a 	mov	r4,r2
 c00f530:	c00097c0 	call	c00097c <__mulsi3>
 c00f534:	8085883a 	add	r2,r16,r2
 c00f538:	10c00017 	ldw	r3,0(r2)
 c00f53c:	e0bffb17 	ldw	r2,-20(fp)
 c00f540:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 c00f544:	04030074 	movhi	r16,3073
 c00f548:	84037e04 	addi	r16,r16,3576
 c00f54c:	e0bffa17 	ldw	r2,-24(fp)
 c00f550:	01400304 	movi	r5,12
 c00f554:	1009883a 	mov	r4,r2
 c00f558:	c00097c0 	call	c00097c <__mulsi3>
 c00f55c:	8085883a 	add	r2,r16,r2
 c00f560:	10800104 	addi	r2,r2,4
 c00f564:	10c00017 	ldw	r3,0(r2)
 c00f568:	e0bffb17 	ldw	r2,-20(fp)
 c00f56c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 c00f570:	04030074 	movhi	r16,3073
 c00f574:	84037e04 	addi	r16,r16,3576
 c00f578:	e0bffa17 	ldw	r2,-24(fp)
 c00f57c:	01400304 	movi	r5,12
 c00f580:	1009883a 	mov	r4,r2
 c00f584:	c00097c0 	call	c00097c <__mulsi3>
 c00f588:	8085883a 	add	r2,r16,r2
 c00f58c:	10800204 	addi	r2,r2,8
 c00f590:	10c00017 	ldw	r3,0(r2)
 c00f594:	e0bffb17 	ldw	r2,-20(fp)
 c00f598:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 c00f59c:	e13ffa17 	ldw	r4,-24(fp)
 c00f5a0:	c00df0c0 	call	c00df0c <alt_release_fd>
  }
} 
 c00f5a4:	0001883a 	nop
 c00f5a8:	e6ffff04 	addi	sp,fp,-4
 c00f5ac:	dfc00217 	ldw	ra,8(sp)
 c00f5b0:	df000117 	ldw	fp,4(sp)
 c00f5b4:	dc000017 	ldw	r16,0(sp)
 c00f5b8:	dec00304 	addi	sp,sp,12
 c00f5bc:	f800283a 	ret

0c00f5c0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 c00f5c0:	defffb04 	addi	sp,sp,-20
 c00f5c4:	dfc00415 	stw	ra,16(sp)
 c00f5c8:	df000315 	stw	fp,12(sp)
 c00f5cc:	df000304 	addi	fp,sp,12
 c00f5d0:	e13ffd15 	stw	r4,-12(fp)
 c00f5d4:	e17ffe15 	stw	r5,-8(fp)
 c00f5d8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 c00f5dc:	01c07fc4 	movi	r7,511
 c00f5e0:	01800044 	movi	r6,1
 c00f5e4:	e17ffd17 	ldw	r5,-12(fp)
 c00f5e8:	01030074 	movhi	r4,3073
 c00f5ec:	21038104 	addi	r4,r4,3588
 c00f5f0:	c00f4dc0 	call	c00f4dc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 c00f5f4:	01c07fc4 	movi	r7,511
 c00f5f8:	000d883a 	mov	r6,zero
 c00f5fc:	e17ffe17 	ldw	r5,-8(fp)
 c00f600:	01030074 	movhi	r4,3073
 c00f604:	21037e04 	addi	r4,r4,3576
 c00f608:	c00f4dc0 	call	c00f4dc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 c00f60c:	01c07fc4 	movi	r7,511
 c00f610:	01800044 	movi	r6,1
 c00f614:	e17fff17 	ldw	r5,-4(fp)
 c00f618:	01030074 	movhi	r4,3073
 c00f61c:	21038404 	addi	r4,r4,3600
 c00f620:	c00f4dc0 	call	c00f4dc <alt_open_fd>
}  
 c00f624:	0001883a 	nop
 c00f628:	e037883a 	mov	sp,fp
 c00f62c:	dfc00117 	ldw	ra,4(sp)
 c00f630:	df000017 	ldw	fp,0(sp)
 c00f634:	dec00204 	addi	sp,sp,8
 c00f638:	f800283a 	ret

0c00f63c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c00f63c:	defffe04 	addi	sp,sp,-8
 c00f640:	dfc00115 	stw	ra,4(sp)
 c00f644:	df000015 	stw	fp,0(sp)
 c00f648:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 c00f64c:	d0a00d17 	ldw	r2,-32716(gp)
 c00f650:	10000326 	beq	r2,zero,c00f660 <alt_get_errno+0x24>
 c00f654:	d0a00d17 	ldw	r2,-32716(gp)
 c00f658:	103ee83a 	callr	r2
 c00f65c:	00000106 	br	c00f664 <alt_get_errno+0x28>
 c00f660:	d0a6d504 	addi	r2,gp,-25772
}
 c00f664:	e037883a 	mov	sp,fp
 c00f668:	dfc00117 	ldw	ra,4(sp)
 c00f66c:	df000017 	ldw	fp,0(sp)
 c00f670:	dec00204 	addi	sp,sp,8
 c00f674:	f800283a 	ret

0c00f678 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 c00f678:	defffb04 	addi	sp,sp,-20
 c00f67c:	dfc00415 	stw	ra,16(sp)
 c00f680:	df000315 	stw	fp,12(sp)
 c00f684:	dc000215 	stw	r16,8(sp)
 c00f688:	df000304 	addi	fp,sp,12
 c00f68c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 c00f690:	e0bffe17 	ldw	r2,-8(fp)
 c00f694:	10800217 	ldw	r2,8(r2)
 c00f698:	10d00034 	orhi	r3,r2,16384
 c00f69c:	e0bffe17 	ldw	r2,-8(fp)
 c00f6a0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 c00f6a4:	e03ffd15 	stw	zero,-12(fp)
 c00f6a8:	00002306 	br	c00f738 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 c00f6ac:	04030074 	movhi	r16,3073
 c00f6b0:	84037e04 	addi	r16,r16,3576
 c00f6b4:	e0bffd17 	ldw	r2,-12(fp)
 c00f6b8:	01400304 	movi	r5,12
 c00f6bc:	1009883a 	mov	r4,r2
 c00f6c0:	c00097c0 	call	c00097c <__mulsi3>
 c00f6c4:	8085883a 	add	r2,r16,r2
 c00f6c8:	10c00017 	ldw	r3,0(r2)
 c00f6cc:	e0bffe17 	ldw	r2,-8(fp)
 c00f6d0:	10800017 	ldw	r2,0(r2)
 c00f6d4:	1880151e 	bne	r3,r2,c00f72c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 c00f6d8:	04030074 	movhi	r16,3073
 c00f6dc:	84037e04 	addi	r16,r16,3576
 c00f6e0:	e0bffd17 	ldw	r2,-12(fp)
 c00f6e4:	01400304 	movi	r5,12
 c00f6e8:	1009883a 	mov	r4,r2
 c00f6ec:	c00097c0 	call	c00097c <__mulsi3>
 c00f6f0:	8085883a 	add	r2,r16,r2
 c00f6f4:	10800204 	addi	r2,r2,8
 c00f6f8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 c00f6fc:	10000b0e 	bge	r2,zero,c00f72c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 c00f700:	01400304 	movi	r5,12
 c00f704:	e13ffd17 	ldw	r4,-12(fp)
 c00f708:	c00097c0 	call	c00097c <__mulsi3>
 c00f70c:	1007883a 	mov	r3,r2
 c00f710:	00830074 	movhi	r2,3073
 c00f714:	10837e04 	addi	r2,r2,3576
 c00f718:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 c00f71c:	e0bffe17 	ldw	r2,-8(fp)
 c00f720:	18800226 	beq	r3,r2,c00f72c <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 c00f724:	00bffcc4 	movi	r2,-13
 c00f728:	00000806 	br	c00f74c <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 c00f72c:	e0bffd17 	ldw	r2,-12(fp)
 c00f730:	10800044 	addi	r2,r2,1
 c00f734:	e0bffd15 	stw	r2,-12(fp)
 c00f738:	d0a00c17 	ldw	r2,-32720(gp)
 c00f73c:	1007883a 	mov	r3,r2
 c00f740:	e0bffd17 	ldw	r2,-12(fp)
 c00f744:	18bfd92e 	bgeu	r3,r2,c00f6ac <__alt_data_end+0xfc00f6ac>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 c00f748:	0005883a 	mov	r2,zero
}
 c00f74c:	e6ffff04 	addi	sp,fp,-4
 c00f750:	dfc00217 	ldw	ra,8(sp)
 c00f754:	df000117 	ldw	fp,4(sp)
 c00f758:	dc000017 	ldw	r16,0(sp)
 c00f75c:	dec00304 	addi	sp,sp,12
 c00f760:	f800283a 	ret

0c00f764 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 c00f764:	defff604 	addi	sp,sp,-40
 c00f768:	dfc00915 	stw	ra,36(sp)
 c00f76c:	df000815 	stw	fp,32(sp)
 c00f770:	df000804 	addi	fp,sp,32
 c00f774:	e13ffd15 	stw	r4,-12(fp)
 c00f778:	e17ffe15 	stw	r5,-8(fp)
 c00f77c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 c00f780:	00bfffc4 	movi	r2,-1
 c00f784:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 c00f788:	00bffb44 	movi	r2,-19
 c00f78c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 c00f790:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 c00f794:	d1600a04 	addi	r5,gp,-32728
 c00f798:	e13ffd17 	ldw	r4,-12(fp)
 c00f79c:	c00fa880 	call	c00fa88 <alt_find_dev>
 c00f7a0:	e0bff815 	stw	r2,-32(fp)
 c00f7a4:	e0bff817 	ldw	r2,-32(fp)
 c00f7a8:	1000051e 	bne	r2,zero,c00f7c0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 c00f7ac:	e13ffd17 	ldw	r4,-12(fp)
 c00f7b0:	c00fb180 	call	c00fb18 <alt_find_file>
 c00f7b4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 c00f7b8:	00800044 	movi	r2,1
 c00f7bc:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 c00f7c0:	e0bff817 	ldw	r2,-32(fp)
 c00f7c4:	10002b26 	beq	r2,zero,c00f874 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 c00f7c8:	e13ff817 	ldw	r4,-32(fp)
 c00f7cc:	c00fc200 	call	c00fc20 <alt_get_fd>
 c00f7d0:	e0bff915 	stw	r2,-28(fp)
 c00f7d4:	e0bff917 	ldw	r2,-28(fp)
 c00f7d8:	1000030e 	bge	r2,zero,c00f7e8 <open+0x84>
    {
      status = index;
 c00f7dc:	e0bff917 	ldw	r2,-28(fp)
 c00f7e0:	e0bffa15 	stw	r2,-24(fp)
 c00f7e4:	00002506 	br	c00f87c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 c00f7e8:	01400304 	movi	r5,12
 c00f7ec:	e13ff917 	ldw	r4,-28(fp)
 c00f7f0:	c00097c0 	call	c00097c <__mulsi3>
 c00f7f4:	1007883a 	mov	r3,r2
 c00f7f8:	00830074 	movhi	r2,3073
 c00f7fc:	10837e04 	addi	r2,r2,3576
 c00f800:	1885883a 	add	r2,r3,r2
 c00f804:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 c00f808:	e0fffe17 	ldw	r3,-8(fp)
 c00f80c:	00900034 	movhi	r2,16384
 c00f810:	10bfffc4 	addi	r2,r2,-1
 c00f814:	1886703a 	and	r3,r3,r2
 c00f818:	e0bffc17 	ldw	r2,-16(fp)
 c00f81c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 c00f820:	e0bffb17 	ldw	r2,-20(fp)
 c00f824:	1000051e 	bne	r2,zero,c00f83c <open+0xd8>
 c00f828:	e13ffc17 	ldw	r4,-16(fp)
 c00f82c:	c00f6780 	call	c00f678 <alt_file_locked>
 c00f830:	e0bffa15 	stw	r2,-24(fp)
 c00f834:	e0bffa17 	ldw	r2,-24(fp)
 c00f838:	10001016 	blt	r2,zero,c00f87c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 c00f83c:	e0bff817 	ldw	r2,-32(fp)
 c00f840:	10800317 	ldw	r2,12(r2)
 c00f844:	10000826 	beq	r2,zero,c00f868 <open+0x104>
 c00f848:	e0bff817 	ldw	r2,-32(fp)
 c00f84c:	10800317 	ldw	r2,12(r2)
 c00f850:	e1ffff17 	ldw	r7,-4(fp)
 c00f854:	e1bffe17 	ldw	r6,-8(fp)
 c00f858:	e17ffd17 	ldw	r5,-12(fp)
 c00f85c:	e13ffc17 	ldw	r4,-16(fp)
 c00f860:	103ee83a 	callr	r2
 c00f864:	00000106 	br	c00f86c <open+0x108>
 c00f868:	0005883a 	mov	r2,zero
 c00f86c:	e0bffa15 	stw	r2,-24(fp)
 c00f870:	00000206 	br	c00f87c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 c00f874:	00bffb44 	movi	r2,-19
 c00f878:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 c00f87c:	e0bffa17 	ldw	r2,-24(fp)
 c00f880:	1000090e 	bge	r2,zero,c00f8a8 <open+0x144>
  {
    alt_release_fd (index);  
 c00f884:	e13ff917 	ldw	r4,-28(fp)
 c00f888:	c00df0c0 	call	c00df0c <alt_release_fd>
    ALT_ERRNO = -status;
 c00f88c:	c00f63c0 	call	c00f63c <alt_get_errno>
 c00f890:	1007883a 	mov	r3,r2
 c00f894:	e0bffa17 	ldw	r2,-24(fp)
 c00f898:	0085c83a 	sub	r2,zero,r2
 c00f89c:	18800015 	stw	r2,0(r3)
    return -1;
 c00f8a0:	00bfffc4 	movi	r2,-1
 c00f8a4:	00000106 	br	c00f8ac <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 c00f8a8:	e0bff917 	ldw	r2,-28(fp)
}
 c00f8ac:	e037883a 	mov	sp,fp
 c00f8b0:	dfc00117 	ldw	ra,4(sp)
 c00f8b4:	df000017 	ldw	fp,0(sp)
 c00f8b8:	dec00204 	addi	sp,sp,8
 c00f8bc:	f800283a 	ret

0c00f8c0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 c00f8c0:	defffa04 	addi	sp,sp,-24
 c00f8c4:	df000515 	stw	fp,20(sp)
 c00f8c8:	df000504 	addi	fp,sp,20
 c00f8cc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c00f8d0:	0005303a 	rdctl	r2,status
 c00f8d4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c00f8d8:	e0fffc17 	ldw	r3,-16(fp)
 c00f8dc:	00bfff84 	movi	r2,-2
 c00f8e0:	1884703a 	and	r2,r3,r2
 c00f8e4:	1001703a 	wrctl	status,r2
  
  return context;
 c00f8e8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 c00f8ec:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 c00f8f0:	e0bfff17 	ldw	r2,-4(fp)
 c00f8f4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 c00f8f8:	e0bffd17 	ldw	r2,-12(fp)
 c00f8fc:	10800017 	ldw	r2,0(r2)
 c00f900:	e0fffd17 	ldw	r3,-12(fp)
 c00f904:	18c00117 	ldw	r3,4(r3)
 c00f908:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 c00f90c:	e0bffd17 	ldw	r2,-12(fp)
 c00f910:	10800117 	ldw	r2,4(r2)
 c00f914:	e0fffd17 	ldw	r3,-12(fp)
 c00f918:	18c00017 	ldw	r3,0(r3)
 c00f91c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 c00f920:	e0bffd17 	ldw	r2,-12(fp)
 c00f924:	e0fffd17 	ldw	r3,-12(fp)
 c00f928:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 c00f92c:	e0bffd17 	ldw	r2,-12(fp)
 c00f930:	e0fffd17 	ldw	r3,-12(fp)
 c00f934:	10c00015 	stw	r3,0(r2)
 c00f938:	e0bffb17 	ldw	r2,-20(fp)
 c00f93c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c00f940:	e0bffe17 	ldw	r2,-8(fp)
 c00f944:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 c00f948:	0001883a 	nop
 c00f94c:	e037883a 	mov	sp,fp
 c00f950:	df000017 	ldw	fp,0(sp)
 c00f954:	dec00104 	addi	sp,sp,4
 c00f958:	f800283a 	ret

0c00f95c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 c00f95c:	defffb04 	addi	sp,sp,-20
 c00f960:	dfc00415 	stw	ra,16(sp)
 c00f964:	df000315 	stw	fp,12(sp)
 c00f968:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 c00f96c:	d0a01017 	ldw	r2,-32704(gp)
 c00f970:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 c00f974:	d0a6db17 	ldw	r2,-25748(gp)
 c00f978:	10800044 	addi	r2,r2,1
 c00f97c:	d0a6db15 	stw	r2,-25748(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 c00f980:	00002e06 	br	c00fa3c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 c00f984:	e0bffd17 	ldw	r2,-12(fp)
 c00f988:	10800017 	ldw	r2,0(r2)
 c00f98c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 c00f990:	e0bffd17 	ldw	r2,-12(fp)
 c00f994:	10800403 	ldbu	r2,16(r2)
 c00f998:	10803fcc 	andi	r2,r2,255
 c00f99c:	10000426 	beq	r2,zero,c00f9b0 <alt_tick+0x54>
 c00f9a0:	d0a6db17 	ldw	r2,-25748(gp)
 c00f9a4:	1000021e 	bne	r2,zero,c00f9b0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 c00f9a8:	e0bffd17 	ldw	r2,-12(fp)
 c00f9ac:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 c00f9b0:	e0bffd17 	ldw	r2,-12(fp)
 c00f9b4:	10800217 	ldw	r2,8(r2)
 c00f9b8:	d0e6db17 	ldw	r3,-25748(gp)
 c00f9bc:	18801d36 	bltu	r3,r2,c00fa34 <alt_tick+0xd8>
 c00f9c0:	e0bffd17 	ldw	r2,-12(fp)
 c00f9c4:	10800403 	ldbu	r2,16(r2)
 c00f9c8:	10803fcc 	andi	r2,r2,255
 c00f9cc:	1000191e 	bne	r2,zero,c00fa34 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 c00f9d0:	e0bffd17 	ldw	r2,-12(fp)
 c00f9d4:	10800317 	ldw	r2,12(r2)
 c00f9d8:	e0fffd17 	ldw	r3,-12(fp)
 c00f9dc:	18c00517 	ldw	r3,20(r3)
 c00f9e0:	1809883a 	mov	r4,r3
 c00f9e4:	103ee83a 	callr	r2
 c00f9e8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 c00f9ec:	e0bfff17 	ldw	r2,-4(fp)
 c00f9f0:	1000031e 	bne	r2,zero,c00fa00 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 c00f9f4:	e13ffd17 	ldw	r4,-12(fp)
 c00f9f8:	c00f8c00 	call	c00f8c0 <alt_alarm_stop>
 c00f9fc:	00000d06 	br	c00fa34 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 c00fa00:	e0bffd17 	ldw	r2,-12(fp)
 c00fa04:	10c00217 	ldw	r3,8(r2)
 c00fa08:	e0bfff17 	ldw	r2,-4(fp)
 c00fa0c:	1887883a 	add	r3,r3,r2
 c00fa10:	e0bffd17 	ldw	r2,-12(fp)
 c00fa14:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 c00fa18:	e0bffd17 	ldw	r2,-12(fp)
 c00fa1c:	10c00217 	ldw	r3,8(r2)
 c00fa20:	d0a6db17 	ldw	r2,-25748(gp)
 c00fa24:	1880032e 	bgeu	r3,r2,c00fa34 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 c00fa28:	e0bffd17 	ldw	r2,-12(fp)
 c00fa2c:	00c00044 	movi	r3,1
 c00fa30:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 c00fa34:	e0bffe17 	ldw	r2,-8(fp)
 c00fa38:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 c00fa3c:	e0fffd17 	ldw	r3,-12(fp)
 c00fa40:	d0a01004 	addi	r2,gp,-32704
 c00fa44:	18bfcf1e 	bne	r3,r2,c00f984 <__alt_data_end+0xfc00f984>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 c00fa48:	0001883a 	nop
}
 c00fa4c:	0001883a 	nop
 c00fa50:	e037883a 	mov	sp,fp
 c00fa54:	dfc00117 	ldw	ra,4(sp)
 c00fa58:	df000017 	ldw	fp,0(sp)
 c00fa5c:	dec00204 	addi	sp,sp,8
 c00fa60:	f800283a 	ret

0c00fa64 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 c00fa64:	deffff04 	addi	sp,sp,-4
 c00fa68:	df000015 	stw	fp,0(sp)
 c00fa6c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 c00fa70:	000170fa 	wrctl	ienable,zero
}
 c00fa74:	0001883a 	nop
 c00fa78:	e037883a 	mov	sp,fp
 c00fa7c:	df000017 	ldw	fp,0(sp)
 c00fa80:	dec00104 	addi	sp,sp,4
 c00fa84:	f800283a 	ret

0c00fa88 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 c00fa88:	defffa04 	addi	sp,sp,-24
 c00fa8c:	dfc00515 	stw	ra,20(sp)
 c00fa90:	df000415 	stw	fp,16(sp)
 c00fa94:	df000404 	addi	fp,sp,16
 c00fa98:	e13ffe15 	stw	r4,-8(fp)
 c00fa9c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 c00faa0:	e0bfff17 	ldw	r2,-4(fp)
 c00faa4:	10800017 	ldw	r2,0(r2)
 c00faa8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 c00faac:	e13ffe17 	ldw	r4,-8(fp)
 c00fab0:	c00756c0 	call	c00756c <strlen>
 c00fab4:	10800044 	addi	r2,r2,1
 c00fab8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 c00fabc:	00000d06 	br	c00faf4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 c00fac0:	e0bffc17 	ldw	r2,-16(fp)
 c00fac4:	10800217 	ldw	r2,8(r2)
 c00fac8:	e0fffd17 	ldw	r3,-12(fp)
 c00facc:	180d883a 	mov	r6,r3
 c00fad0:	e17ffe17 	ldw	r5,-8(fp)
 c00fad4:	1009883a 	mov	r4,r2
 c00fad8:	c00fdcc0 	call	c00fdcc <memcmp>
 c00fadc:	1000021e 	bne	r2,zero,c00fae8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 c00fae0:	e0bffc17 	ldw	r2,-16(fp)
 c00fae4:	00000706 	br	c00fb04 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 c00fae8:	e0bffc17 	ldw	r2,-16(fp)
 c00faec:	10800017 	ldw	r2,0(r2)
 c00faf0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 c00faf4:	e0fffc17 	ldw	r3,-16(fp)
 c00faf8:	e0bfff17 	ldw	r2,-4(fp)
 c00fafc:	18bff01e 	bne	r3,r2,c00fac0 <__alt_data_end+0xfc00fac0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 c00fb00:	0005883a 	mov	r2,zero
}
 c00fb04:	e037883a 	mov	sp,fp
 c00fb08:	dfc00117 	ldw	ra,4(sp)
 c00fb0c:	df000017 	ldw	fp,0(sp)
 c00fb10:	dec00204 	addi	sp,sp,8
 c00fb14:	f800283a 	ret

0c00fb18 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 c00fb18:	defffb04 	addi	sp,sp,-20
 c00fb1c:	dfc00415 	stw	ra,16(sp)
 c00fb20:	df000315 	stw	fp,12(sp)
 c00fb24:	df000304 	addi	fp,sp,12
 c00fb28:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 c00fb2c:	d0a00817 	ldw	r2,-32736(gp)
 c00fb30:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 c00fb34:	00003106 	br	c00fbfc <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 c00fb38:	e0bffd17 	ldw	r2,-12(fp)
 c00fb3c:	10800217 	ldw	r2,8(r2)
 c00fb40:	1009883a 	mov	r4,r2
 c00fb44:	c00756c0 	call	c00756c <strlen>
 c00fb48:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 c00fb4c:	e0bffd17 	ldw	r2,-12(fp)
 c00fb50:	10c00217 	ldw	r3,8(r2)
 c00fb54:	e0bffe17 	ldw	r2,-8(fp)
 c00fb58:	10bfffc4 	addi	r2,r2,-1
 c00fb5c:	1885883a 	add	r2,r3,r2
 c00fb60:	10800003 	ldbu	r2,0(r2)
 c00fb64:	10803fcc 	andi	r2,r2,255
 c00fb68:	1080201c 	xori	r2,r2,128
 c00fb6c:	10bfe004 	addi	r2,r2,-128
 c00fb70:	10800bd8 	cmpnei	r2,r2,47
 c00fb74:	1000031e 	bne	r2,zero,c00fb84 <alt_find_file+0x6c>
    {
      len -= 1;
 c00fb78:	e0bffe17 	ldw	r2,-8(fp)
 c00fb7c:	10bfffc4 	addi	r2,r2,-1
 c00fb80:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 c00fb84:	e0bffe17 	ldw	r2,-8(fp)
 c00fb88:	e0ffff17 	ldw	r3,-4(fp)
 c00fb8c:	1885883a 	add	r2,r3,r2
 c00fb90:	10800003 	ldbu	r2,0(r2)
 c00fb94:	10803fcc 	andi	r2,r2,255
 c00fb98:	1080201c 	xori	r2,r2,128
 c00fb9c:	10bfe004 	addi	r2,r2,-128
 c00fba0:	10800be0 	cmpeqi	r2,r2,47
 c00fba4:	1000081e 	bne	r2,zero,c00fbc8 <alt_find_file+0xb0>
 c00fba8:	e0bffe17 	ldw	r2,-8(fp)
 c00fbac:	e0ffff17 	ldw	r3,-4(fp)
 c00fbb0:	1885883a 	add	r2,r3,r2
 c00fbb4:	10800003 	ldbu	r2,0(r2)
 c00fbb8:	10803fcc 	andi	r2,r2,255
 c00fbbc:	1080201c 	xori	r2,r2,128
 c00fbc0:	10bfe004 	addi	r2,r2,-128
 c00fbc4:	10000a1e 	bne	r2,zero,c00fbf0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 c00fbc8:	e0bffd17 	ldw	r2,-12(fp)
 c00fbcc:	10800217 	ldw	r2,8(r2)
 c00fbd0:	e0fffe17 	ldw	r3,-8(fp)
 c00fbd4:	180d883a 	mov	r6,r3
 c00fbd8:	e17fff17 	ldw	r5,-4(fp)
 c00fbdc:	1009883a 	mov	r4,r2
 c00fbe0:	c00fdcc0 	call	c00fdcc <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 c00fbe4:	1000021e 	bne	r2,zero,c00fbf0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 c00fbe8:	e0bffd17 	ldw	r2,-12(fp)
 c00fbec:	00000706 	br	c00fc0c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 c00fbf0:	e0bffd17 	ldw	r2,-12(fp)
 c00fbf4:	10800017 	ldw	r2,0(r2)
 c00fbf8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 c00fbfc:	e0fffd17 	ldw	r3,-12(fp)
 c00fc00:	d0a00804 	addi	r2,gp,-32736
 c00fc04:	18bfcc1e 	bne	r3,r2,c00fb38 <__alt_data_end+0xfc00fb38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 c00fc08:	0005883a 	mov	r2,zero
}
 c00fc0c:	e037883a 	mov	sp,fp
 c00fc10:	dfc00117 	ldw	ra,4(sp)
 c00fc14:	df000017 	ldw	fp,0(sp)
 c00fc18:	dec00204 	addi	sp,sp,8
 c00fc1c:	f800283a 	ret

0c00fc20 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 c00fc20:	defffa04 	addi	sp,sp,-24
 c00fc24:	dfc00515 	stw	ra,20(sp)
 c00fc28:	df000415 	stw	fp,16(sp)
 c00fc2c:	dc000315 	stw	r16,12(sp)
 c00fc30:	df000404 	addi	fp,sp,16
 c00fc34:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 c00fc38:	00bffa04 	movi	r2,-24
 c00fc3c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 c00fc40:	e03ffc15 	stw	zero,-16(fp)
 c00fc44:	00001d06 	br	c00fcbc <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 c00fc48:	04030074 	movhi	r16,3073
 c00fc4c:	84037e04 	addi	r16,r16,3576
 c00fc50:	e0bffc17 	ldw	r2,-16(fp)
 c00fc54:	01400304 	movi	r5,12
 c00fc58:	1009883a 	mov	r4,r2
 c00fc5c:	c00097c0 	call	c00097c <__mulsi3>
 c00fc60:	8085883a 	add	r2,r16,r2
 c00fc64:	10800017 	ldw	r2,0(r2)
 c00fc68:	1000111e 	bne	r2,zero,c00fcb0 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 c00fc6c:	04030074 	movhi	r16,3073
 c00fc70:	84037e04 	addi	r16,r16,3576
 c00fc74:	e0bffc17 	ldw	r2,-16(fp)
 c00fc78:	01400304 	movi	r5,12
 c00fc7c:	1009883a 	mov	r4,r2
 c00fc80:	c00097c0 	call	c00097c <__mulsi3>
 c00fc84:	8085883a 	add	r2,r16,r2
 c00fc88:	e0fffe17 	ldw	r3,-8(fp)
 c00fc8c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 c00fc90:	d0e00c17 	ldw	r3,-32720(gp)
 c00fc94:	e0bffc17 	ldw	r2,-16(fp)
 c00fc98:	1880020e 	bge	r3,r2,c00fca4 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 c00fc9c:	e0bffc17 	ldw	r2,-16(fp)
 c00fca0:	d0a00c15 	stw	r2,-32720(gp)
      }
      rc = i;
 c00fca4:	e0bffc17 	ldw	r2,-16(fp)
 c00fca8:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 c00fcac:	00000606 	br	c00fcc8 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 c00fcb0:	e0bffc17 	ldw	r2,-16(fp)
 c00fcb4:	10800044 	addi	r2,r2,1
 c00fcb8:	e0bffc15 	stw	r2,-16(fp)
 c00fcbc:	e0bffc17 	ldw	r2,-16(fp)
 c00fcc0:	10800810 	cmplti	r2,r2,32
 c00fcc4:	103fe01e 	bne	r2,zero,c00fc48 <__alt_data_end+0xfc00fc48>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 c00fcc8:	e0bffd17 	ldw	r2,-12(fp)
}
 c00fccc:	e6ffff04 	addi	sp,fp,-4
 c00fcd0:	dfc00217 	ldw	ra,8(sp)
 c00fcd4:	df000117 	ldw	fp,4(sp)
 c00fcd8:	dc000017 	ldw	r16,0(sp)
 c00fcdc:	dec00304 	addi	sp,sp,12
 c00fce0:	f800283a 	ret

0c00fce4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 c00fce4:	defffe04 	addi	sp,sp,-8
 c00fce8:	df000115 	stw	fp,4(sp)
 c00fcec:	df000104 	addi	fp,sp,4
 c00fcf0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 c00fcf4:	e0bfff17 	ldw	r2,-4(fp)
 c00fcf8:	10bffe84 	addi	r2,r2,-6
 c00fcfc:	10c00428 	cmpgeui	r3,r2,16
 c00fd00:	18001a1e 	bne	r3,zero,c00fd6c <alt_exception_cause_generated_bad_addr+0x88>
 c00fd04:	100690ba 	slli	r3,r2,2
 c00fd08:	00830074 	movhi	r2,3073
 c00fd0c:	10bf4704 	addi	r2,r2,-740
 c00fd10:	1885883a 	add	r2,r3,r2
 c00fd14:	10800017 	ldw	r2,0(r2)
 c00fd18:	1000683a 	jmp	r2
 c00fd1c:	0c00fd5c 	xori	r16,at,1013
 c00fd20:	0c00fd5c 	xori	r16,at,1013
 c00fd24:	0c00fd6c 	andhi	r16,at,1013
 c00fd28:	0c00fd6c 	andhi	r16,at,1013
 c00fd2c:	0c00fd6c 	andhi	r16,at,1013
 c00fd30:	0c00fd5c 	xori	r16,at,1013
 c00fd34:	0c00fd64 	muli	r16,at,1013
 c00fd38:	0c00fd6c 	andhi	r16,at,1013
 c00fd3c:	0c00fd5c 	xori	r16,at,1013
 c00fd40:	0c00fd5c 	xori	r16,at,1013
 c00fd44:	0c00fd6c 	andhi	r16,at,1013
 c00fd48:	0c00fd5c 	xori	r16,at,1013
 c00fd4c:	0c00fd64 	muli	r16,at,1013
 c00fd50:	0c00fd6c 	andhi	r16,at,1013
 c00fd54:	0c00fd6c 	andhi	r16,at,1013
 c00fd58:	0c00fd5c 	xori	r16,at,1013
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 c00fd5c:	00800044 	movi	r2,1
 c00fd60:	00000306 	br	c00fd70 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 c00fd64:	0005883a 	mov	r2,zero
 c00fd68:	00000106 	br	c00fd70 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 c00fd6c:	0005883a 	mov	r2,zero
  }
}
 c00fd70:	e037883a 	mov	sp,fp
 c00fd74:	df000017 	ldw	fp,0(sp)
 c00fd78:	dec00104 	addi	sp,sp,4
 c00fd7c:	f800283a 	ret

0c00fd80 <atexit>:
 c00fd80:	200b883a 	mov	r5,r4
 c00fd84:	000f883a 	mov	r7,zero
 c00fd88:	000d883a 	mov	r6,zero
 c00fd8c:	0009883a 	mov	r4,zero
 c00fd90:	c00fe481 	jmpi	c00fe48 <__register_exitproc>

0c00fd94 <exit>:
 c00fd94:	defffe04 	addi	sp,sp,-8
 c00fd98:	000b883a 	mov	r5,zero
 c00fd9c:	dc000015 	stw	r16,0(sp)
 c00fda0:	dfc00115 	stw	ra,4(sp)
 c00fda4:	2021883a 	mov	r16,r4
 c00fda8:	c00ff600 	call	c00ff60 <__call_exitprocs>
 c00fdac:	00830074 	movhi	r2,3073
 c00fdb0:	1087f804 	addi	r2,r2,8160
 c00fdb4:	11000017 	ldw	r4,0(r2)
 c00fdb8:	20800f17 	ldw	r2,60(r4)
 c00fdbc:	10000126 	beq	r2,zero,c00fdc4 <exit+0x30>
 c00fdc0:	103ee83a 	callr	r2
 c00fdc4:	8009883a 	mov	r4,r16
 c00fdc8:	c0100e00 	call	c0100e0 <_exit>

0c00fdcc <memcmp>:
 c00fdcc:	01c000c4 	movi	r7,3
 c00fdd0:	3980192e 	bgeu	r7,r6,c00fe38 <memcmp+0x6c>
 c00fdd4:	2144b03a 	or	r2,r4,r5
 c00fdd8:	11c4703a 	and	r2,r2,r7
 c00fddc:	10000f26 	beq	r2,zero,c00fe1c <memcmp+0x50>
 c00fde0:	20800003 	ldbu	r2,0(r4)
 c00fde4:	28c00003 	ldbu	r3,0(r5)
 c00fde8:	10c0151e 	bne	r2,r3,c00fe40 <memcmp+0x74>
 c00fdec:	31bfff84 	addi	r6,r6,-2
 c00fdf0:	01ffffc4 	movi	r7,-1
 c00fdf4:	00000406 	br	c00fe08 <memcmp+0x3c>
 c00fdf8:	20800003 	ldbu	r2,0(r4)
 c00fdfc:	28c00003 	ldbu	r3,0(r5)
 c00fe00:	31bfffc4 	addi	r6,r6,-1
 c00fe04:	10c00e1e 	bne	r2,r3,c00fe40 <memcmp+0x74>
 c00fe08:	21000044 	addi	r4,r4,1
 c00fe0c:	29400044 	addi	r5,r5,1
 c00fe10:	31fff91e 	bne	r6,r7,c00fdf8 <__alt_data_end+0xfc00fdf8>
 c00fe14:	0005883a 	mov	r2,zero
 c00fe18:	f800283a 	ret
 c00fe1c:	20c00017 	ldw	r3,0(r4)
 c00fe20:	28800017 	ldw	r2,0(r5)
 c00fe24:	18bfee1e 	bne	r3,r2,c00fde0 <__alt_data_end+0xfc00fde0>
 c00fe28:	31bfff04 	addi	r6,r6,-4
 c00fe2c:	21000104 	addi	r4,r4,4
 c00fe30:	29400104 	addi	r5,r5,4
 c00fe34:	39bff936 	bltu	r7,r6,c00fe1c <__alt_data_end+0xfc00fe1c>
 c00fe38:	303fe91e 	bne	r6,zero,c00fde0 <__alt_data_end+0xfc00fde0>
 c00fe3c:	003ff506 	br	c00fe14 <__alt_data_end+0xfc00fe14>
 c00fe40:	10c5c83a 	sub	r2,r2,r3
 c00fe44:	f800283a 	ret

0c00fe48 <__register_exitproc>:
 c00fe48:	defffa04 	addi	sp,sp,-24
 c00fe4c:	dc000315 	stw	r16,12(sp)
 c00fe50:	04030074 	movhi	r16,3073
 c00fe54:	8407f804 	addi	r16,r16,8160
 c00fe58:	80c00017 	ldw	r3,0(r16)
 c00fe5c:	dc400415 	stw	r17,16(sp)
 c00fe60:	dfc00515 	stw	ra,20(sp)
 c00fe64:	18805217 	ldw	r2,328(r3)
 c00fe68:	2023883a 	mov	r17,r4
 c00fe6c:	10003726 	beq	r2,zero,c00ff4c <__register_exitproc+0x104>
 c00fe70:	10c00117 	ldw	r3,4(r2)
 c00fe74:	010007c4 	movi	r4,31
 c00fe78:	20c00e16 	blt	r4,r3,c00feb4 <__register_exitproc+0x6c>
 c00fe7c:	1a000044 	addi	r8,r3,1
 c00fe80:	8800221e 	bne	r17,zero,c00ff0c <__register_exitproc+0xc4>
 c00fe84:	18c00084 	addi	r3,r3,2
 c00fe88:	18c7883a 	add	r3,r3,r3
 c00fe8c:	18c7883a 	add	r3,r3,r3
 c00fe90:	12000115 	stw	r8,4(r2)
 c00fe94:	10c7883a 	add	r3,r2,r3
 c00fe98:	19400015 	stw	r5,0(r3)
 c00fe9c:	0005883a 	mov	r2,zero
 c00fea0:	dfc00517 	ldw	ra,20(sp)
 c00fea4:	dc400417 	ldw	r17,16(sp)
 c00fea8:	dc000317 	ldw	r16,12(sp)
 c00feac:	dec00604 	addi	sp,sp,24
 c00feb0:	f800283a 	ret
 c00feb4:	00800034 	movhi	r2,0
 c00feb8:	10800004 	addi	r2,r2,0
 c00febc:	10002626 	beq	r2,zero,c00ff58 <__register_exitproc+0x110>
 c00fec0:	01006404 	movi	r4,400
 c00fec4:	d9400015 	stw	r5,0(sp)
 c00fec8:	d9800115 	stw	r6,4(sp)
 c00fecc:	d9c00215 	stw	r7,8(sp)
 c00fed0:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 c00fed4:	d9400017 	ldw	r5,0(sp)
 c00fed8:	d9800117 	ldw	r6,4(sp)
 c00fedc:	d9c00217 	ldw	r7,8(sp)
 c00fee0:	10001d26 	beq	r2,zero,c00ff58 <__register_exitproc+0x110>
 c00fee4:	81000017 	ldw	r4,0(r16)
 c00fee8:	10000115 	stw	zero,4(r2)
 c00feec:	02000044 	movi	r8,1
 c00fef0:	22405217 	ldw	r9,328(r4)
 c00fef4:	0007883a 	mov	r3,zero
 c00fef8:	12400015 	stw	r9,0(r2)
 c00fefc:	20805215 	stw	r2,328(r4)
 c00ff00:	10006215 	stw	zero,392(r2)
 c00ff04:	10006315 	stw	zero,396(r2)
 c00ff08:	883fde26 	beq	r17,zero,c00fe84 <__alt_data_end+0xfc00fe84>
 c00ff0c:	18c9883a 	add	r4,r3,r3
 c00ff10:	2109883a 	add	r4,r4,r4
 c00ff14:	1109883a 	add	r4,r2,r4
 c00ff18:	21802215 	stw	r6,136(r4)
 c00ff1c:	01800044 	movi	r6,1
 c00ff20:	12406217 	ldw	r9,392(r2)
 c00ff24:	30cc983a 	sll	r6,r6,r3
 c00ff28:	4992b03a 	or	r9,r9,r6
 c00ff2c:	12406215 	stw	r9,392(r2)
 c00ff30:	21c04215 	stw	r7,264(r4)
 c00ff34:	01000084 	movi	r4,2
 c00ff38:	893fd21e 	bne	r17,r4,c00fe84 <__alt_data_end+0xfc00fe84>
 c00ff3c:	11006317 	ldw	r4,396(r2)
 c00ff40:	218cb03a 	or	r6,r4,r6
 c00ff44:	11806315 	stw	r6,396(r2)
 c00ff48:	003fce06 	br	c00fe84 <__alt_data_end+0xfc00fe84>
 c00ff4c:	18805304 	addi	r2,r3,332
 c00ff50:	18805215 	stw	r2,328(r3)
 c00ff54:	003fc606 	br	c00fe70 <__alt_data_end+0xfc00fe70>
 c00ff58:	00bfffc4 	movi	r2,-1
 c00ff5c:	003fd006 	br	c00fea0 <__alt_data_end+0xfc00fea0>

0c00ff60 <__call_exitprocs>:
 c00ff60:	defff504 	addi	sp,sp,-44
 c00ff64:	df000915 	stw	fp,36(sp)
 c00ff68:	dd400615 	stw	r21,24(sp)
 c00ff6c:	dc800315 	stw	r18,12(sp)
 c00ff70:	dfc00a15 	stw	ra,40(sp)
 c00ff74:	ddc00815 	stw	r23,32(sp)
 c00ff78:	dd800715 	stw	r22,28(sp)
 c00ff7c:	dd000515 	stw	r20,20(sp)
 c00ff80:	dcc00415 	stw	r19,16(sp)
 c00ff84:	dc400215 	stw	r17,8(sp)
 c00ff88:	dc000115 	stw	r16,4(sp)
 c00ff8c:	d9000015 	stw	r4,0(sp)
 c00ff90:	2839883a 	mov	fp,r5
 c00ff94:	04800044 	movi	r18,1
 c00ff98:	057fffc4 	movi	r21,-1
 c00ff9c:	00830074 	movhi	r2,3073
 c00ffa0:	1087f804 	addi	r2,r2,8160
 c00ffa4:	12000017 	ldw	r8,0(r2)
 c00ffa8:	45005217 	ldw	r20,328(r8)
 c00ffac:	44c05204 	addi	r19,r8,328
 c00ffb0:	a0001c26 	beq	r20,zero,c010024 <__call_exitprocs+0xc4>
 c00ffb4:	a0800117 	ldw	r2,4(r20)
 c00ffb8:	15ffffc4 	addi	r23,r2,-1
 c00ffbc:	b8000d16 	blt	r23,zero,c00fff4 <__call_exitprocs+0x94>
 c00ffc0:	14000044 	addi	r16,r2,1
 c00ffc4:	8421883a 	add	r16,r16,r16
 c00ffc8:	8421883a 	add	r16,r16,r16
 c00ffcc:	84402004 	addi	r17,r16,128
 c00ffd0:	a463883a 	add	r17,r20,r17
 c00ffd4:	a421883a 	add	r16,r20,r16
 c00ffd8:	e0001e26 	beq	fp,zero,c010054 <__call_exitprocs+0xf4>
 c00ffdc:	80804017 	ldw	r2,256(r16)
 c00ffe0:	e0801c26 	beq	fp,r2,c010054 <__call_exitprocs+0xf4>
 c00ffe4:	bdffffc4 	addi	r23,r23,-1
 c00ffe8:	843fff04 	addi	r16,r16,-4
 c00ffec:	8c7fff04 	addi	r17,r17,-4
 c00fff0:	bd7ff91e 	bne	r23,r21,c00ffd8 <__alt_data_end+0xfc00ffd8>
 c00fff4:	00800034 	movhi	r2,0
 c00fff8:	10800004 	addi	r2,r2,0
 c00fffc:	10000926 	beq	r2,zero,c010024 <__call_exitprocs+0xc4>
 c010000:	a0800117 	ldw	r2,4(r20)
 c010004:	1000301e 	bne	r2,zero,c0100c8 <__call_exitprocs+0x168>
 c010008:	a0800017 	ldw	r2,0(r20)
 c01000c:	10003226 	beq	r2,zero,c0100d8 <__call_exitprocs+0x178>
 c010010:	a009883a 	mov	r4,r20
 c010014:	98800015 	stw	r2,0(r19)
 c010018:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 c01001c:	9d000017 	ldw	r20,0(r19)
 c010020:	a03fe41e 	bne	r20,zero,c00ffb4 <__alt_data_end+0xfc00ffb4>
 c010024:	dfc00a17 	ldw	ra,40(sp)
 c010028:	df000917 	ldw	fp,36(sp)
 c01002c:	ddc00817 	ldw	r23,32(sp)
 c010030:	dd800717 	ldw	r22,28(sp)
 c010034:	dd400617 	ldw	r21,24(sp)
 c010038:	dd000517 	ldw	r20,20(sp)
 c01003c:	dcc00417 	ldw	r19,16(sp)
 c010040:	dc800317 	ldw	r18,12(sp)
 c010044:	dc400217 	ldw	r17,8(sp)
 c010048:	dc000117 	ldw	r16,4(sp)
 c01004c:	dec00b04 	addi	sp,sp,44
 c010050:	f800283a 	ret
 c010054:	a0800117 	ldw	r2,4(r20)
 c010058:	80c00017 	ldw	r3,0(r16)
 c01005c:	10bfffc4 	addi	r2,r2,-1
 c010060:	15c01426 	beq	r2,r23,c0100b4 <__call_exitprocs+0x154>
 c010064:	80000015 	stw	zero,0(r16)
 c010068:	183fde26 	beq	r3,zero,c00ffe4 <__alt_data_end+0xfc00ffe4>
 c01006c:	95c8983a 	sll	r4,r18,r23
 c010070:	a0806217 	ldw	r2,392(r20)
 c010074:	a5800117 	ldw	r22,4(r20)
 c010078:	2084703a 	and	r2,r4,r2
 c01007c:	10000b26 	beq	r2,zero,c0100ac <__call_exitprocs+0x14c>
 c010080:	a0806317 	ldw	r2,396(r20)
 c010084:	2088703a 	and	r4,r4,r2
 c010088:	20000c1e 	bne	r4,zero,c0100bc <__call_exitprocs+0x15c>
 c01008c:	89400017 	ldw	r5,0(r17)
 c010090:	d9000017 	ldw	r4,0(sp)
 c010094:	183ee83a 	callr	r3
 c010098:	a0800117 	ldw	r2,4(r20)
 c01009c:	15bfbf1e 	bne	r2,r22,c00ff9c <__alt_data_end+0xfc00ff9c>
 c0100a0:	98800017 	ldw	r2,0(r19)
 c0100a4:	153fcf26 	beq	r2,r20,c00ffe4 <__alt_data_end+0xfc00ffe4>
 c0100a8:	003fbc06 	br	c00ff9c <__alt_data_end+0xfc00ff9c>
 c0100ac:	183ee83a 	callr	r3
 c0100b0:	003ff906 	br	c010098 <__alt_data_end+0xfc010098>
 c0100b4:	a5c00115 	stw	r23,4(r20)
 c0100b8:	003feb06 	br	c010068 <__alt_data_end+0xfc010068>
 c0100bc:	89000017 	ldw	r4,0(r17)
 c0100c0:	183ee83a 	callr	r3
 c0100c4:	003ff406 	br	c010098 <__alt_data_end+0xfc010098>
 c0100c8:	a0800017 	ldw	r2,0(r20)
 c0100cc:	a027883a 	mov	r19,r20
 c0100d0:	1029883a 	mov	r20,r2
 c0100d4:	003fb606 	br	c00ffb0 <__alt_data_end+0xfc00ffb0>
 c0100d8:	0005883a 	mov	r2,zero
 c0100dc:	003ffb06 	br	c0100cc <__alt_data_end+0xfc0100cc>

0c0100e0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 c0100e0:	defffd04 	addi	sp,sp,-12
 c0100e4:	df000215 	stw	fp,8(sp)
 c0100e8:	df000204 	addi	fp,sp,8
 c0100ec:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 c0100f0:	0001883a 	nop
 c0100f4:	e0bfff17 	ldw	r2,-4(fp)
 c0100f8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 c0100fc:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 c010100:	10000226 	beq	r2,zero,c01010c <_exit+0x2c>
    ALT_SIM_FAIL();
 c010104:	002af070 	cmpltui	zero,zero,43969
 c010108:	00000106 	br	c010110 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 c01010c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 c010110:	003fff06 	br	c010110 <__alt_data_end+0xfc010110>
