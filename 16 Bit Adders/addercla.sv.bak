module addercla (input logic A, B, cin, output logic s, p, g);
	assign s = A^B^cin;
	assign p = A^B;
	assign g = A&B;
endmodule 

module addercla4 (input logic [3:0] A, B, input logic cin, output logic [3:0] s, output logic cout, pg, gg);
	
	logic g0, g1, g2, g3, p0, p1, p2, p3;
	logic c1, c2, c3;

	always_comb
	begin
		addercla CLA0(.A(A[0]), .B(B[0]), .cin(cin), .s(s[0]), .p(p0), .g(g0));
		c1 = (cin&p0)|g0;
		addercla CLA1(.A(A[1]), .B(B[1]), .cin(c1), .s(s[1]), .p(p1), .g(g1));
		c2 = (c1&p1)|g1;
		addercla CLA2(.A(A[2]), .B(B[2]), .cin(c2), .s(s[2]), .p(p2), .g(g2));
		c3 = (c2&p2)|g2;
		addercla CLA3(.A(A[3]), .B(B[3]), .cin(c3), .s(s[3]), .p(p3), .g(g3));
		cout = (c3&p3)|g3;
		pp = p0&p1&p2&p3;
		gg = g3|(g2&p3)|(g1&p3&p2)|(g0&p3&p2&p1);
	end
endmodule 